{
  "version": 3,
  "sources": ["../../ws/browser.js", "../../puppeteer-core/src/common/NodeWebSocketTransport.ts", "../../puppeteer-core/src/generated/version.ts"],
  "sourcesContent": ["'use strict';\n\nmodule.exports = function () {\n  throw new Error(\n    'ws does not work in the browser. Browser clients must use the native ' +\n      'WebSocket object'\n  );\n};\n", "/**\n * Copyright 2018 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport NodeWebSocket from 'ws';\n\nimport {ConnectionTransport} from '../common/ConnectionTransport.js';\nimport {packageVersion} from '../generated/version.js';\n\n/**\n * @internal\n */\nexport class NodeWebSocketTransport implements ConnectionTransport {\n  static create(\n    url: string,\n    headers?: Record<string, string>\n  ): Promise<NodeWebSocketTransport> {\n    return new Promise((resolve, reject) => {\n      const ws = new NodeWebSocket(url, [], {\n        followRedirects: true,\n        perMessageDeflate: false,\n        maxPayload: 256 * 1024 * 1024, // 256Mb\n        headers: {\n          'User-Agent': `Puppeteer ${packageVersion}`,\n          ...headers,\n        },\n      });\n\n      ws.addEventListener('open', () => {\n        return resolve(new NodeWebSocketTransport(ws));\n      });\n      ws.addEventListener('error', reject);\n    });\n  }\n\n  #ws: NodeWebSocket;\n  onmessage?: (message: NodeWebSocket.Data) => void;\n  onclose?: () => void;\n\n  constructor(ws: NodeWebSocket) {\n    this.#ws = ws;\n    this.#ws.addEventListener('message', event => {\n      if (this.onmessage) {\n        this.onmessage.call(null, event.data);\n      }\n    });\n    this.#ws.addEventListener('close', () => {\n      if (this.onclose) {\n        this.onclose.call(null);\n      }\n    });\n    // Silently ignore all errors - we don't know what to do with them.\n    this.#ws.addEventListener('error', () => {});\n  }\n\n  send(message: string): void {\n    this.#ws.send(message);\n  }\n\n  close(): void {\n    this.#ws.close();\n  }\n}\n", "/**\n * @internal\n */\nexport const packageVersion = '20.7.3';\n"],
  "mappings": ";;;;;;AAAA;AAAA;AAAA;AAEA,WAAO,UAAU,WAAY;AAC3B,YAAM,IAAI;AAAA,QACR;AAAA,MAEF;AAAA,IACF;AAAA;AAAA;;;ACQA,gBAA0B;;;ACZnB,IAAM,iBAAiB;;;;;;;;;;;;;;;;;;;;ADoBxB,IAAO,yBAAP,MAA6B;EACjC,OAAO,OACL,KACA,SAAgC;AAEhC,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAU;AACrC,YAAM,KAAK,IAAI,UAAAA,QAAc,KAAK,CAAA,GAAI;QACpC,iBAAiB;QACjB,mBAAmB;QACnB,YAAY,MAAM,OAAO;QACzB,SAAS;UACP,cAAc,aAAa;UAC3B,GAAG;;OAEN;AAED,SAAG,iBAAiB,QAAQ,MAAK;AAC/B,eAAO,QAAQ,IAAI,uBAAuB,EAAE,CAAC;MAC/C,CAAC;AACD,SAAG,iBAAiB,SAAS,MAAM;IACrC,CAAC;EACH;EAMA,YAAY,IAAiB;AAJ7B,+BAAA,IAAA,MAAA,MAAA;AAKE,2BAAA,MAAI,4BAAO,IAAE,GAAA;AACb,2BAAA,MAAI,4BAAA,GAAA,EAAK,iBAAiB,WAAW,WAAQ;AAC3C,UAAI,KAAK,WAAW;AAClB,aAAK,UAAU,KAAK,MAAM,MAAM,IAAI;;IAExC,CAAC;AACD,2BAAA,MAAI,4BAAA,GAAA,EAAK,iBAAiB,SAAS,MAAK;AACtC,UAAI,KAAK,SAAS;AAChB,aAAK,QAAQ,KAAK,IAAI;;IAE1B,CAAC;AAED,2BAAA,MAAI,4BAAA,GAAA,EAAK,iBAAiB,SAAS,MAAK;IAAE,CAAC;EAC7C;EAEA,KAAK,SAAe;AAClB,2BAAA,MAAI,4BAAA,GAAA,EAAK,KAAK,OAAO;EACvB;EAEA,QAAK;AACH,2BAAA,MAAI,4BAAA,GAAA,EAAK,MAAK;EAChB;;;",
  "names": ["NodeWebSocket"]
}
