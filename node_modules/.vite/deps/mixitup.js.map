{
  "version": 3,
  "sources": ["../../mixitup/dist/mixitup.js"],
  "sourcesContent": ["/**!\n * MixItUp v3.3.1\n * A high-performance, dependency-free library for animated filtering, sorting and more\n * Build 94e0fbf6-cd0b-4987-b3c0-14b59b67b8a0\n *\n * @copyright Copyright 2014-2018 KunkaLabs Limited.\n * @author    KunkaLabs Limited.\n * @link      https://www.kunkalabs.com/mixitup/\n *\n * @license   Commercial use requires a commercial license.\n *            https://www.kunkalabs.com/mixitup/licenses/\n *\n *            Non-commercial use permitted under same terms as CC BY-NC 3.0 license.\n *            http://creativecommons.org/licenses/by-nc/3.0/\n */\n\n(function (window) {\n    'use strict';\n\n    var mixitup = null,\n        h = null;\n\n    (function () {\n        var VENDORS = ['webkit', 'moz', 'o', 'ms'],\n            canary = window.document.createElement('div'),\n            i = -1;\n\n        // window.requestAnimationFrame\n\n        for (i = 0; i < VENDORS.length && !window.requestAnimationFrame; i++) {\n            window.requestAnimationFrame = window[VENDORS[i] + 'RequestAnimationFrame'];\n        }\n\n        // Element.nextElementSibling\n\n        if (typeof canary.nextElementSibling === 'undefined') {\n            Object.defineProperty(window.Element.prototype, 'nextElementSibling', {\n                get: function () {\n                    var el = this.nextSibling;\n\n                    while (el) {\n                        if (el.nodeType === 1) {\n                            return el;\n                        }\n\n                        el = el.nextSibling;\n                    }\n\n                    return null;\n                }\n            });\n        }\n\n        // Element.matches\n\n        (function (ElementPrototype) {\n            ElementPrototype.matches =\n                ElementPrototype.matches ||\n                ElementPrototype.machesSelector ||\n                ElementPrototype.mozMatchesSelector ||\n                ElementPrototype.msMatchesSelector ||\n                ElementPrototype.oMatchesSelector ||\n                ElementPrototype.webkitMatchesSelector ||\n                function (selector) {\n                    return Array.prototype.indexOf.call(this.parentElement.querySelectorAll(selector), this) > -1;\n                };\n        })(window.Element.prototype);\n\n        // Object.keys\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\n\n        if (!Object.keys) {\n            Object.keys = (function () {\n                var hasOwnProperty = Object.prototype.hasOwnProperty,\n                    hasDontEnumBug = false,\n                    dontEnums = [],\n                    dontEnumsLength = -1;\n\n                hasDontEnumBug = !({\n                    toString: null\n                })\n                    .propertyIsEnumerable('toString');\n\n                dontEnums = [\n                    'toString',\n                    'toLocaleString',\n                    'valueOf',\n                    'hasOwnProperty',\n                    'isPrototypeOf',\n                    'propertyIsEnumerable',\n                    'constructor'\n                ];\n\n                dontEnumsLength = dontEnums.length;\n\n                return function (obj) {\n                    var result = [],\n                        prop = '',\n                        i = -1;\n\n                    if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {\n                        throw new TypeError('Object.keys called on non-object');\n                    }\n\n                    for (prop in obj) {\n                        if (hasOwnProperty.call(obj, prop)) {\n                            result.push(prop);\n                        }\n                    }\n\n                    if (hasDontEnumBug) {\n                        for (i = 0; i < dontEnumsLength; i++) {\n                            if (hasOwnProperty.call(obj, dontEnums[i])) {\n                                result.push(dontEnums[i]);\n                            }\n                        }\n                    }\n\n                    return result;\n                };\n            }());\n        }\n\n        // Array.isArray\n        // https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\n\n        if (!Array.isArray) {\n            Array.isArray = function (arg) {\n                return Object.prototype.toString.call(arg) === '[object Array]';\n            };\n        }\n\n        // Object.create\n        // https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create\n\n        if (typeof Object.create !== 'function') {\n            Object.create = (function (undefined) {\n                var Temp = function () { };\n\n                return function (prototype, propertiesObject) {\n                    if (prototype !== Object(prototype) && prototype !== null) {\n                        throw TypeError('Argument must be an object, or null');\n                    }\n\n                    Temp.prototype = prototype || {};\n\n                    var result = new Temp();\n\n                    Temp.prototype = null;\n\n                    if (propertiesObject !== undefined) {\n                        Object.defineProperties(result, propertiesObject);\n                    }\n\n                    if (prototype === null) {\n                        /* jshint ignore:start */\n                        result.__proto__ = null;\n                        /* jshint ignore:end */\n                    }\n\n                    return result;\n                };\n            })();\n        }\n\n        // String.prototyoe.trim\n\n        if (!String.prototype.trim) {\n            String.prototype.trim = function () {\n                return this.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n            };\n        }\n\n        // Array.prototype.indexOf\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\n\n        if (!Array.prototype.indexOf) {\n            Array.prototype.indexOf = function (searchElement) {\n                var n, k, t, len;\n\n                if (this === null) {\n                    throw new TypeError();\n                }\n\n                t = Object(this);\n\n                len = t.length >>> 0;\n\n                if (len === 0) {\n                    return -1;\n                }\n\n                n = 0;\n\n                if (arguments.length > 1) {\n                    n = Number(arguments[1]);\n\n                    if (n !== n) {\n                        n = 0;\n                    } else if (n !== 0 && n !== Infinity && n !== -Infinity) {\n                        n = (n > 0 || -1) * Math.floor(Math.abs(n));\n                    }\n                }\n\n                if (n >= len) {\n                    return -1;\n                }\n\n                for (k = n >= 0 ? n : Math.max(len - Math.abs(n), 0); k < len; k++) {\n                    if (k in t && t[k] === searchElement) {\n                        return k;\n                    }\n                }\n\n                return -1;\n            };\n        }\n\n        // Function.prototype.bind\n        // https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind\n\n        if (!Function.prototype.bind) {\n            Function.prototype.bind = function (oThis) {\n                var aArgs, self, FNOP, fBound;\n\n                if (typeof this !== 'function') {\n                    throw new TypeError();\n                }\n\n                aArgs = Array.prototype.slice.call(arguments, 1);\n\n                self = this;\n\n                FNOP = function () { };\n\n                fBound = function () {\n                    return self.apply(this instanceof FNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));\n                };\n\n                if (this.prototype) {\n                    FNOP.prototype = this.prototype;\n                }\n\n                fBound.prototype = new FNOP();\n\n                return fBound;\n            };\n        }\n\n        // Element.prototype.dispatchEvent\n\n        if (!window.Element.prototype.dispatchEvent) {\n            window.Element.prototype.dispatchEvent = function (event) {\n                try {\n                    return this.fireEvent('on' + event.type, event);\n                } catch (err) { }\n            };\n        }\n    })();\n\n    /**\n     * The `mixitup()` \"factory\" function creates and returns individual instances\n     * of MixItUp, known as \"mixers\", on which API methods can be called.\n     *\n     * When loading MixItUp via a script tag, the factory function is accessed\n     * via the global variable `mixitup`. When using a module loading\n     * system (e.g. ES2015, CommonJS, RequireJS), the factory function is\n     * exported into your module when you require the MixItUp library.\n     *\n     * @example\n     * mixitup(container [,config] [,foreignDoc])\n     *\n     * @example <caption>Example 1: Creating a mixer instance with an element reference</caption>\n     * var containerEl = document.querySelector('.container');\n     *\n     * var mixer = mixitup(containerEl);\n     *\n     * @example <caption>Example 2: Creating a mixer instance with a selector string</caption>\n     * var mixer = mixitup('.container');\n     *\n     * @example <caption>Example 3: Passing a configuration object</caption>\n     * var mixer = mixitup(containerEl, {\n     *     animation: {\n     *         effects: 'fade scale(0.5)'\n     *     }\n     * });\n     *\n     * @example <caption>Example 4: Passing an iframe reference</caption>\n     * var mixer = mixitup(containerEl, config, foreignDocument);\n     *\n     * @global\n     * @namespace\n     * @public\n     * @kind        function\n     * @since       3.0.0\n     * @param       {(Element|string)}  container\n     *      A DOM element or selector string representing the container(s) on which to instantiate MixItUp.\n     * @param       {object}            [config]\n     *      An optional \"configuration object\" used to customize the behavior of the MixItUp instance.\n     * @param       {object}            [foreignDoc]\n     *      An optional reference to a `document`, which can be used to control a MixItUp instance in an iframe.\n     * @return      {mixitup.Mixer}\n     *      A \"mixer\" object holding the MixItUp instance.\n     */\n\n    mixitup = function (container, config, foreignDoc) {\n        var el = null,\n            returnCollection = false,\n            instance = null,\n            facade = null,\n            doc = null,\n            output = null,\n            instances = [],\n            id = '',\n            elements = [],\n            i = -1;\n\n        doc = foreignDoc || window.document;\n\n        if (returnCollection = arguments[3]) {\n            // A non-documented 4th paramater enabling control of multiple instances\n\n            returnCollection = typeof returnCollection === 'boolean';\n        }\n\n        if (typeof container === 'string') {\n            elements = doc.querySelectorAll(container);\n        } else if (container && typeof container === 'object' && h.isElement(container, doc)) {\n            elements = [container];\n        } else if (container && typeof container === 'object' && container.length) {\n            // Although not documented, the container may also be an array-like list of\n            // elements such as a NodeList or jQuery collection, is returnCollection is true\n\n            elements = container;\n        } else {\n            throw new Error(mixitup.messages.errorFactoryInvalidContainer());\n        }\n\n        if (elements.length < 1) {\n            throw new Error(mixitup.messages.errorFactoryContainerNotFound());\n        }\n\n        for (i = 0; el = elements[i]; i++) {\n            if (i > 0 && !returnCollection) break;\n\n            if (!el.id) {\n                id = 'MixItUp' + h.randomHex();\n\n                el.id = id;\n            } else {\n                id = el.id;\n            }\n\n            if (mixitup.instances[id] instanceof mixitup.Mixer) {\n                instance = mixitup.instances[id];\n\n                if (!config || (config && config.debug && config.debug.showWarnings !== false)) {\n                    console.warn(mixitup.messages.warningFactoryPreexistingInstance());\n                }\n            } else {\n                instance = new mixitup.Mixer();\n\n                instance.attach(el, doc, id, config);\n\n                mixitup.instances[id] = instance;\n            }\n\n            facade = new mixitup.Facade(instance);\n\n            if (config && config.debug && config.debug.enable) {\n                instances.push(instance);\n            } else {\n                instances.push(facade);\n            }\n        }\n\n        if (returnCollection) {\n            output = new mixitup.Collection(instances);\n        } else {\n            // Return the first instance regardless\n\n            output = instances[0];\n        }\n\n        return output;\n    };\n\n    /**\n     * The `.use()` static method is used to extend the functionality of mixitup with compatible\n     * extensions and libraries in an environment with modular scoping e.g. ES2015, CommonJS, or RequireJS.\n     *\n     * You need only call the `.use()` function once per project, per extension, as module loaders\n     * will cache a single reference to MixItUp inclusive of all changes made.\n     *\n     * @example\n     * mixitup.use(extension)\n     *\n     * @example <caption>Example 1: Extending MixItUp with the Pagination Extension</caption>\n     *\n     * import mixitup from 'mixitup';\n     * import mixitupPagination from 'mixitup-pagination';\n     *\n     * mixitup.use(mixitupPagination);\n     *\n     * // All mixers created by the factory function in all modules will now\n     * // have pagination functionality\n     *\n     * var mixer = mixitup('.container');\n     *\n     * @public\n     * @name     use\n     * @memberof mixitup\n     * @kind     function\n     * @static\n     * @since    3.0.0\n     * @param    {*}  extension   A reference to the extension or library to be used.\n     * @return   {void}\n     */\n\n    mixitup.use = function (extension) {\n        mixitup.Base.prototype.callActions.call(mixitup, 'beforeUse', arguments);\n\n        // Call the extension's factory function, passing\n        // the mixitup factory as a paramater\n\n        if (typeof extension === 'function' && extension.TYPE === 'mixitup-extension') {\n            // Mixitup extension\n\n            if (typeof mixitup.extensions[extension.NAME] === 'undefined') {\n                extension(mixitup);\n\n                mixitup.extensions[extension.NAME] = extension;\n            }\n        } else if (extension.fn && extension.fn.jquery) {\n            // jQuery\n\n            mixitup.libraries.$ = extension;\n        }\n\n        mixitup.Base.prototype.callActions.call(mixitup, 'afterUse', arguments);\n    };\n\n    mixitup.instances = {};\n    mixitup.extensions = {};\n    mixitup.libraries = {};\n\n    /**\n     * @private\n     */\n\n    h = {\n\n        /**\n         * @private\n         * @param   {HTMLElement}   el\n         * @param   {string}        cls\n         * @return  {boolean}\n         */\n\n        hasClass: function (el, cls) {\n            return !!el.className.match(new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)'));\n        },\n\n        /**\n         * @private\n         * @param   {HTMLElement}   el\n         * @param   {string}        cls\n         * @return  {void}\n         */\n\n        addClass: function (el, cls) {\n            if (!this.hasClass(el, cls)) el.className += el.className ? ' ' + cls : cls;\n        },\n\n        /**\n         * @private\n         * @param   {HTMLElement}   el\n         * @param   {string}        cls\n         * @return  {void}\n         */\n\n        removeClass: function (el, cls) {\n            if (this.hasClass(el, cls)) {\n                var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n\n                el.className = el.className.replace(reg, ' ').trim();\n            }\n        },\n\n        /**\n         * Merges the properties of the source object onto the\n         * target object. Alters the target object.\n         *\n         * @private\n         * @param   {object}    destination\n         * @param   {object}    source\n         * @param   {boolean}   [deep=false]\n         * @param   {boolean}   [handleErrors=false]\n         * @return  {void}\n         */\n\n        extend: function (destination, source, deep, handleErrors) {\n            var sourceKeys = [],\n                key = '',\n                i = -1;\n\n            deep = deep || false;\n            handleErrors = handleErrors || false;\n\n            try {\n                if (Array.isArray(source)) {\n                    for (i = 0; i < source.length; i++) {\n                        sourceKeys.push(i);\n                    }\n                } else if (source) {\n                    sourceKeys = Object.keys(source);\n                }\n\n                for (i = 0; i < sourceKeys.length; i++) {\n                    key = sourceKeys[i];\n\n                    if (!deep || typeof source[key] !== 'object' || this.isElement(source[key])) {\n                        // All non-object properties, or all properties if shallow extend\n\n                        destination[key] = source[key];\n                    } else if (Array.isArray(source[key])) {\n                        // Arrays\n\n                        if (!destination[key]) {\n                            destination[key] = [];\n                        }\n\n                        this.extend(destination[key], source[key], deep, handleErrors);\n                    } else {\n                        // Objects\n\n                        if (!destination[key]) {\n                            destination[key] = {};\n                        }\n\n                        this.extend(destination[key], source[key], deep, handleErrors);\n                    }\n                }\n            } catch (err) {\n                if (handleErrors) {\n                    this.handleExtendError(err, destination);\n                } else {\n                    throw err;\n                }\n            }\n\n            return destination;\n        },\n\n        /**\n         * @private\n         * @param   {Error}  err\n         * @param   {object} destination\n         * @return  {void}\n         */\n\n        handleExtendError: function (err, destination) {\n            var re = /property \"?(\\w*)\"?[,:] object/i,\n                matches = null,\n                erroneous = '',\n                message = '',\n                suggestion = '',\n                probableMatch = '',\n                key = '',\n                mostMatchingChars = -1,\n                i = -1;\n\n            if (err instanceof TypeError && (matches = re.exec(err.message))) {\n                erroneous = matches[1];\n\n                for (key in destination) {\n                    i = 0;\n\n                    while (i < erroneous.length && erroneous.charAt(i) === key.charAt(i)) {\n                        i++;\n                    }\n\n                    if (i > mostMatchingChars) {\n                        mostMatchingChars = i;\n                        probableMatch = key;\n                    }\n                }\n\n                if (mostMatchingChars > 1) {\n                    suggestion = mixitup.messages.errorConfigInvalidPropertySuggestion({\n                        probableMatch: probableMatch\n                    });\n                }\n\n                message = mixitup.messages.errorConfigInvalidProperty({\n                    erroneous: erroneous,\n                    suggestion: suggestion\n                });\n\n                throw new TypeError(message);\n            }\n\n            throw err;\n        },\n\n        /**\n         * @private\n         * @param   {string} str\n         * @return  {function}\n         */\n\n        template: function (str) {\n            var re = /\\${([\\w]*)}/g,\n                dynamics = {},\n                matches = null;\n\n            while ((matches = re.exec(str))) {\n                dynamics[matches[1]] = new RegExp('\\\\${' + matches[1] + '}', 'g');\n            }\n\n            return function (data) {\n                var key = '',\n                    output = str;\n\n                data = data || {};\n\n                for (key in dynamics) {\n                    output = output.replace(dynamics[key], typeof data[key] !== 'undefined' ? data[key] : '');\n                }\n\n                return output;\n            };\n        },\n\n        /**\n         * @private\n         * @param   {HTMLElement}   el\n         * @param   {string}        type\n         * @param   {function}      fn\n         * @param   {boolean}       useCapture\n         * @return  {void}\n         */\n\n        on: function (el, type, fn, useCapture) {\n            if (!el) return;\n\n            if (el.addEventListener) {\n                el.addEventListener(type, fn, useCapture);\n            } else if (el.attachEvent) {\n                el['e' + type + fn] = fn;\n\n                el[type + fn] = function () {\n                    el['e' + type + fn](window.event);\n                };\n\n                el.attachEvent('on' + type, el[type + fn]);\n            }\n        },\n\n        /**\n         * @private\n         * @param   {HTMLElement}   el\n         * @param   {string}        type\n         * @param   {function}      fn\n         * @return  {void}\n         */\n\n        off: function (el, type, fn) {\n            if (!el) return;\n\n            if (el.removeEventListener) {\n                el.removeEventListener(type, fn, false);\n            } else if (el.detachEvent) {\n                el.detachEvent('on' + type, el[type + fn]);\n                el[type + fn] = null;\n            }\n        },\n\n        /**\n         * @private\n         * @param   {string}      eventType\n         * @param   {object}      detail\n         * @param   {Document}    [doc]\n         * @return  {CustomEvent}\n         */\n\n        getCustomEvent: function (eventType, detail, doc) {\n            var event = null;\n\n            doc = doc || window.document;\n\n            if (typeof window.CustomEvent === 'function') {\n                event = new window.CustomEvent(eventType, {\n                    detail: detail,\n                    bubbles: true,\n                    cancelable: true\n                });\n            } else if (typeof doc.createEvent === 'function') {\n                event = doc.createEvent('CustomEvent');\n                event.initCustomEvent(eventType, true, true, detail);\n            } else {\n                event = doc.createEventObject(),\n                    event.type = eventType;\n\n                event.returnValue = false;\n                event.cancelBubble = false;\n                event.detail = detail;\n            }\n\n            return event;\n        },\n\n        /**\n         * @private\n         * @param   {Event} e\n         * @return  {Event}\n         */\n\n        getOriginalEvent: function (e) {\n            if (e.touches && e.touches.length) {\n                return e.touches[0];\n            } else if (e.changedTouches && e.changedTouches.length) {\n                return e.changedTouches[0];\n            } else {\n                return e;\n            }\n        },\n\n        /**\n         * @private\n         * @param   {HTMLElement}   el\n         * @param   {string}        selector\n         * @return  {Number}\n         */\n\n        index: function (el, selector) {\n            var i = 0;\n\n            while ((el = el.previousElementSibling) !== null) {\n                if (!selector || el.matches(selector)) {\n                    ++i;\n                }\n            }\n\n            return i;\n        },\n\n        /**\n         * Converts a dash or snake-case string to camel case.\n         *\n         * @private\n         * @param   {string}    str\n         * @param   {boolean}   [isPascal]\n         * @return  {string}\n         */\n\n        camelCase: function (str) {\n            return str.toLowerCase().replace(/([_-][a-z])/g, function ($1) {\n                return $1.toUpperCase().replace(/[_-]/, '');\n            });\n        },\n\n        /**\n         * Converts a dash or snake-case string to pascal case.\n         *\n         * @private\n         * @param   {string}    str\n         * @param   {boolean}   [isPascal]\n         * @return  {string}\n         */\n\n        pascalCase: function (str) {\n            return (str = this.camelCase(str)).charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Converts a camel or pascal-case string to dash case.\n         *\n         * @private\n         * @param   {string}    str\n         * @return  {string}\n         */\n\n        dashCase: function (str) {\n            return str.replace(/([A-Z])/g, '-$1').replace(/^-/, '').toLowerCase();\n        },\n\n        /**\n         * @private\n         * @param   {HTMLElement}       el\n         * @param   {HTMLHtmlElement}   [doc]\n         * @return  {boolean}\n         */\n\n        isElement: function (el, doc) {\n            doc = doc || window.document;\n\n            if (\n                window.HTMLElement &&\n                el instanceof window.HTMLElement\n            ) {\n                return true;\n            } else if (\n                doc.defaultView &&\n                doc.defaultView.HTMLElement &&\n                el instanceof doc.defaultView.HTMLElement\n            ) {\n                return true;\n            } else {\n                return (\n                    el !== null &&\n                    el.nodeType === 1 &&\n                    typeof el.nodeName === 'string'\n                );\n            }\n        },\n\n        /**\n         * @private\n         * @param   {string}            htmlString\n         * @param   {HTMLHtmlElement}   [doc]\n         * @return  {DocumentFragment}\n         */\n\n        createElement: function (htmlString, doc) {\n            var frag = null,\n                temp = null;\n\n            doc = doc || window.document;\n\n            frag = doc.createDocumentFragment();\n            temp = doc.createElement('div');\n\n            temp.innerHTML = htmlString.trim();\n\n            while (temp.firstChild) {\n                frag.appendChild(temp.firstChild);\n            }\n\n            return frag;\n        },\n\n        /**\n         * @private\n         * @param   {Node} node\n         * @return  {void}\n         */\n\n        removeWhitespace: function (node) {\n            var deleting;\n\n            while (node && node.nodeName === '#text') {\n                deleting = node;\n\n                node = node.previousSibling;\n\n                deleting.parentElement && deleting.parentElement.removeChild(deleting);\n            }\n        },\n\n        /**\n         * @private\n         * @param   {Array<*>}  a\n         * @param   {Array<*>}  b\n         * @return  {boolean}\n         */\n\n        isEqualArray: function (a, b) {\n            var i = a.length;\n\n            if (i !== b.length) return false;\n\n            while (i--) {\n                if (a[i] !== b[i]) return false;\n            }\n\n            return true;\n        },\n\n        /**\n         * @private\n         * @param   {object}  a\n         * @param   {object}  b\n         * @return  {boolean}\n         */\n\n        deepEquals: function (a, b) {\n            var key;\n\n            if (typeof a === 'object' && a && typeof b === 'object' && b) {\n                if (Object.keys(a).length !== Object.keys(b).length) return false;\n\n                for (key in a) {\n                    if (!b.hasOwnProperty(key) || !this.deepEquals(a[key], b[key])) return false;\n                }\n            } else if (a !== b) {\n                return false;\n            }\n\n            return true;\n        },\n\n        /**\n         * @private\n         * @param   {Array<*>}  oldArray\n         * @return  {Array<*>}\n         */\n\n        arrayShuffle: function (oldArray) {\n            var newArray = oldArray.slice(),\n                len = newArray.length,\n                i = len,\n                p = -1,\n                t = [];\n\n            while (i--) {\n                p = ~~(Math.random() * len);\n                t = newArray[i];\n\n                newArray[i] = newArray[p];\n                newArray[p] = t;\n            }\n\n            return newArray;\n        },\n\n        /**\n         * @private\n         * @param   {object}    list\n         */\n\n        arrayFromList: function (list) {\n            var output, i;\n\n            try {\n                return Array.prototype.slice.call(list);\n            } catch (err) {\n                output = [];\n\n                for (i = 0; i < list.length; i++) {\n                    output.push(list[i]);\n                }\n\n                return output;\n            }\n        },\n\n        /**\n         * @private\n         * @param   {function}  func\n         * @param   {Number}    wait\n         * @param   {boolean}   immediate\n         * @return  {function}\n         */\n\n        debounce: function (func, wait, immediate) {\n            var timeout;\n\n            return function () {\n                var self = this,\n                    args = arguments,\n                    callNow = immediate && !timeout,\n                    later = null;\n\n                later = function () {\n                    timeout = null;\n\n                    if (!immediate) {\n                        func.apply(self, args);\n                    }\n                };\n\n                clearTimeout(timeout);\n\n                timeout = setTimeout(later, wait);\n\n                if (callNow) func.apply(self, args);\n            };\n        },\n\n        /**\n         * @private\n         * @param   {HTMLElement}   element\n         * @return  {object}\n         */\n\n        position: function (element) {\n            var xPosition = 0,\n                yPosition = 0,\n                offsetParent = element;\n\n            while (element) {\n                xPosition -= element.scrollLeft;\n                yPosition -= element.scrollTop;\n\n                if (element === offsetParent) {\n                    xPosition += element.offsetLeft;\n                    yPosition += element.offsetTop;\n\n                    offsetParent = element.offsetParent;\n                }\n\n                element = element.parentElement;\n            }\n\n            return {\n                x: xPosition,\n                y: yPosition\n            };\n        },\n\n        /**\n         * @private\n         * @param   {object}    node1\n         * @param   {object}    node2\n         * @return  {Number}\n         */\n\n        getHypotenuse: function (node1, node2) {\n            var distanceX = node1.x - node2.x,\n                distanceY = node1.y - node2.y;\n\n            distanceX = distanceX < 0 ? distanceX * -1 : distanceX,\n                distanceY = distanceY < 0 ? distanceY * -1 : distanceY;\n\n            return Math.sqrt(Math.pow(distanceX, 2) + Math.pow(distanceY, 2));\n        },\n\n        /**\n         * Calcuates the area of intersection between two rectangles and expresses it as\n         * a ratio in comparison to the area of the first rectangle.\n         *\n         * @private\n         * @param   {Rect}  box1\n         * @param   {Rect}  box2\n         * @return  {number}\n         */\n\n        getIntersectionRatio: function (box1, box2) {\n            var controlArea = box1.width * box1.height,\n                intersectionX = -1,\n                intersectionY = -1,\n                intersectionArea = -1,\n                ratio = -1;\n\n            intersectionX =\n                Math.max(0, Math.min(box1.left + box1.width, box2.left + box2.width) - Math.max(box1.left, box2.left));\n\n            intersectionY =\n                Math.max(0, Math.min(box1.top + box1.height, box2.top + box2.height) - Math.max(box1.top, box2.top));\n\n            intersectionArea = intersectionY * intersectionX;\n\n            ratio = intersectionArea / controlArea;\n\n            return ratio;\n        },\n\n        /**\n         * @private\n         * @param   {object}            el\n         * @param   {string}            selector\n         * @param   {boolean}           [includeSelf]\n         * @param   {HTMLHtmlElement}   [doc]\n         * @return  {Element|null}\n         */\n\n        closestParent: function (el, selector, includeSelf, doc) {\n            var parent = el.parentNode;\n\n            doc = doc || window.document;\n\n            if (includeSelf && el.matches(selector)) {\n                return el;\n            }\n\n            while (parent && parent != doc.body) {\n                if (parent.matches && parent.matches(selector)) {\n                    return parent;\n                } else if (parent.parentNode) {\n                    parent = parent.parentNode;\n                } else {\n                    return null;\n                }\n            }\n\n            return null;\n        },\n\n        /**\n         * @private\n         * @param   {HTMLElement}       el\n         * @param   {string}            selector\n         * @param   {HTMLHtmlElement}   [doc]\n         * @return  {NodeList}\n         */\n\n        children: function (el, selector, doc) {\n            var children = [],\n                tempId = '';\n\n            doc = doc || window.doc;\n\n            if (el) {\n                if (!el.id) {\n                    tempId = 'Temp' + this.randomHexKey();\n\n                    el.id = tempId;\n                }\n\n                children = doc.querySelectorAll('#' + el.id + ' > ' + selector);\n\n                if (tempId) {\n                    el.removeAttribute('id');\n                }\n            }\n\n            return children;\n        },\n\n        /**\n         * Creates a clone of a provided array, with any empty strings removed.\n         *\n         * @private\n         * @param   {Array<*>} originalArray\n         * @return  {Array<*>}\n         */\n\n        clean: function (originalArray) {\n            var cleanArray = [],\n                i = -1;\n\n            for (i = 0; i < originalArray.length; i++) {\n                if (originalArray[i] !== '') {\n                    cleanArray.push(originalArray[i]);\n                }\n            }\n\n            return cleanArray;\n        },\n\n        /**\n         * Abstracts an ES6 promise into a q-like deferred interface for storage and deferred resolution.\n         *\n         * @private\n         * @param  {object} libraries\n         * @return {h.Deferred}\n         */\n\n        defer: function (libraries) {\n            var deferred = null,\n                promiseWrapper = null,\n                $ = null;\n\n            promiseWrapper = new this.Deferred();\n\n            if (mixitup.features.has.promises) {\n                // ES6 native promise or polyfill\n\n                promiseWrapper.promise = new Promise(function (resolve, reject) {\n                    promiseWrapper.resolve = resolve;\n                    promiseWrapper.reject = reject;\n                });\n            } else if (($ = (window.jQuery || libraries.$)) && typeof $.Deferred === 'function') {\n                // jQuery\n\n                deferred = $.Deferred();\n\n                promiseWrapper.promise = deferred.promise();\n                promiseWrapper.resolve = deferred.resolve;\n                promiseWrapper.reject = deferred.reject;\n            } else if (window.console) {\n                // No implementation\n\n                console.warn(mixitup.messages.warningNoPromiseImplementation());\n            }\n\n            return promiseWrapper;\n        },\n\n        /**\n         * @private\n         * @param   {Array<Promise>}    tasks\n         * @param   {object}            libraries\n         * @return  {Promise<Array>}\n         */\n\n        all: function (tasks, libraries) {\n            var $ = null;\n\n            if (mixitup.features.has.promises) {\n                return Promise.all(tasks);\n            } else if (($ = (window.jQuery || libraries.$)) && typeof $.when === 'function') {\n                return $.when.apply($, tasks)\n                    .done(function () {\n                        // jQuery when returns spread arguments rather than an array or resolutions\n\n                        return arguments;\n                    });\n            }\n\n            // No implementation\n\n            if (window.console) {\n                console.warn(mixitup.messages.warningNoPromiseImplementation());\n            }\n\n            return [];\n        },\n\n        /**\n         * @private\n         * @param   {HTMLElement}   el\n         * @param   {string}        property\n         * @param   {Array<string>} vendors\n         * @return  {string}\n         */\n\n        getPrefix: function (el, property, vendors) {\n            var i = -1,\n                prefix = '';\n\n            if (h.dashCase(property) in el.style) return '';\n\n            for (i = 0; prefix = vendors[i]; i++) {\n                if (prefix + property in el.style) {\n                    return prefix.toLowerCase();\n                }\n            }\n\n            return 'unsupported';\n        },\n\n        /**\n         * @private\n         * @return  {string}\n         */\n\n        randomHex: function () {\n            return ('00000' + (Math.random() * 16777216 << 0).toString(16)).substr(-6).toUpperCase();\n        },\n\n        /**\n         * @private\n         * @param   {HTMLDocument}  [doc]\n         * @return  {object}\n         */\n\n        getDocumentState: function (doc) {\n            doc = typeof doc.body === 'object' ? doc : window.document;\n\n            return {\n                scrollTop: window.pageYOffset,\n                scrollLeft: window.pageXOffset,\n                docHeight: doc.documentElement.scrollHeight,\n                docWidth: doc.documentElement.scrollWidth,\n                viewportHeight: doc.documentElement.clientHeight,\n                viewportWidth: doc.documentElement.clientWidth\n            };\n        },\n\n        /**\n         * @private\n         * @param   {object}    obj\n         * @param   {function}  fn\n         * @return  {function}\n         */\n\n        bind: function (obj, fn) {\n            return function () {\n                return fn.apply(obj, arguments);\n            };\n        },\n\n        /**\n         * @private\n         * @param   {HTMLElement}   el\n         * @return  {boolean}\n         */\n\n        isVisible: function (el) {\n            var styles = null;\n\n            if (el.offsetParent) return true;\n\n            styles = window.getComputedStyle(el);\n\n            if (\n                styles.position === 'fixed' &&\n                styles.visibility !== 'hidden' &&\n                styles.opacity !== '0'\n            ) {\n                // Fixed elements report no offsetParent,\n                // but may still be invisible\n\n                return true;\n            }\n\n            return false;\n        },\n\n        /**\n         * @private\n         * @param   {object}    obj\n         */\n\n        seal: function (obj) {\n            if (typeof Object.seal === 'function') {\n                Object.seal(obj);\n            }\n        },\n\n        /**\n         * @private\n         * @param   {object}    obj\n         */\n\n        freeze: function (obj) {\n            if (typeof Object.freeze === 'function') {\n                Object.freeze(obj);\n            }\n        },\n\n        /**\n         * @private\n         * @param   {string}    control\n         * @param   {string}    specimen\n         * @return  {boolean}\n         */\n\n        compareVersions: function (control, specimen) {\n            var controlParts = control.split('.'),\n                specimenParts = specimen.split('.'),\n                controlPart = -1,\n                specimenPart = -1,\n                i = -1;\n\n            for (i = 0; i < controlParts.length; i++) {\n                controlPart = parseInt(controlParts[i].replace(/[^\\d.]/g, ''));\n                specimenPart = parseInt(specimenParts[i].replace(/[^\\d.]/g, '') || 0);\n\n                if (specimenPart < controlPart) {\n                    return false;\n                } else if (specimenPart > controlPart) {\n                    return true;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * @private\n         * @constructor\n         */\n\n        Deferred: function () {\n            this.promise = null;\n            this.resolve = null;\n            this.reject = null;\n            this.id = h.randomHex();\n        },\n\n        /**\n         * @private\n         * @param   {object}  obj\n         * @return  {boolean}\n         */\n\n        isEmptyObject: function (obj) {\n            var key = '';\n\n            if (typeof Object.keys === 'function') {\n                return Object.keys(obj).length === 0;\n            }\n\n            for (key in obj) {\n                if (obj.hasOwnProperty(key)) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * @param   {mixitup.Config.ClassNames}   classNames\n         * @param   {string}                      elementName\n         * @param   {string}                      [modifier]\n         * @return  {string}\n         */\n\n        getClassname: function (classNames, elementName, modifier) {\n            var classname = '';\n\n            classname += classNames.block;\n\n            if (classname.length) {\n                classname += classNames.delineatorElement;\n            }\n\n            classname += classNames['element' + this.pascalCase(elementName)];\n\n            if (!modifier) return classname;\n\n            if (classname.length) {\n                classname += classNames.delineatorModifier;\n            }\n\n            classname += modifier;\n\n            return classname;\n        },\n\n        /**\n         * Returns the value of a property on a given object via its string key.\n         *\n         * @param   {object}    obj\n         * @param   {string}    stringKey\n         * @return  {*} value\n         */\n\n        getProperty: function (obj, stringKey) {\n            var parts = stringKey.split('.'),\n                returnCurrent = null,\n                current = '',\n                i = 0;\n\n            if (!stringKey) {\n                return obj;\n            }\n\n            returnCurrent = function (obj) {\n                if (!obj) {\n                    return null;\n                } else {\n                    return obj[current];\n                }\n            };\n\n            while (i < parts.length) {\n                current = parts[i];\n\n                obj = returnCurrent(obj);\n\n                i++;\n            }\n\n            if (typeof obj !== 'undefined') {\n                return obj;\n            } else {\n                return null;\n            }\n        }\n    };\n\n    mixitup.h = h;\n\n    /**\n     * The Base class adds instance methods to all other extensible MixItUp classes,\n     * enabling the calling of any registered hooks.\n     *\n     * @constructor\n     * @namespace\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.Base = function () { };\n\n    mixitup.Base.prototype = {\n        constructor: mixitup.Base,\n\n        /**\n         * Calls any registered hooks for the provided action.\n         *\n         * @memberof    mixitup.Base\n         * @private\n         * @instance\n         * @since       2.0.0\n         * @param       {string}    actionName\n         * @param       {Array<*>}  args\n         * @return      {void}\n         */\n\n        callActions: function (actionName, args) {\n            var self = this,\n                hooks = self.constructor.actions[actionName],\n                extensionName = '';\n\n            if (!hooks || h.isEmptyObject(hooks)) return;\n\n            for (extensionName in hooks) {\n                hooks[extensionName].apply(self, args);\n            }\n        },\n\n        /**\n         * Calls any registered hooks for the provided filter.\n         *\n         * @memberof    mixitup.Base\n         * @private\n         * @instance\n         * @since       2.0.0\n         * @param       {string}    filterName\n         * @param       {*}         input\n         * @param       {Array<*>}  args\n         * @return      {*}\n         */\n\n        callFilters: function (filterName, input, args) {\n            var self = this,\n                hooks = self.constructor.filters[filterName],\n                output = input,\n                extensionName = '';\n\n            if (!hooks || h.isEmptyObject(hooks)) return output;\n\n            args = args || [];\n\n            for (extensionName in hooks) {\n                args = h.arrayFromList(args);\n\n                args.unshift(output);\n\n                output = hooks[extensionName].apply(self, args);\n            }\n\n            return output;\n        }\n    };\n\n    /**\n     * The BaseStatic class holds a set of static methods which are then added to all other\n     * extensible MixItUp classes as a means of integrating extensions via the addition of new\n     * methods and/or actions and hooks.\n     *\n     * @constructor\n     * @namespace\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.BaseStatic = function () {\n        this.actions = {};\n        this.filters = {};\n\n        /**\n         * Performs a shallow extend on the class's prototype, adding one or more new members to\n         * the class in a single operation.\n         *\n         * @memberof    mixitup.BaseStatic\n         * @public\n         * @static\n         * @since       2.1.0\n         * @param       {object} extension\n         * @return      {void}\n         */\n\n        this.extend = function (extension) {\n            h.extend(this.prototype, extension);\n        };\n\n        /**\n         * Registers a function to be called on the action hook of the provided name.\n         *\n         * @memberof    mixitup.BaseStatic\n         * @public\n         * @static\n         * @since       2.1.0\n         * @param       {string}    hookName\n         * @param       {string}    extensionName\n         * @param       {function}  func\n         * @return      {void}\n         */\n\n        this.registerAction = function (hookName, extensionName, func) {\n            (this.actions[hookName] = this.actions[hookName] || {})[extensionName] = func;\n        };\n\n        /**\n         * Registers a function to be called on the filter of the provided name.\n         *\n         * @memberof    mixitup.BaseStatic\n         * @public\n         * @static\n         * @since       2.1.0\n         * @param       {string}    hookName\n         * @param       {string}    extensionName\n         * @param       {function}  func\n         * @return      {void}\n         */\n\n        this.registerFilter = function (hookName, extensionName, func) {\n            (this.filters[hookName] = this.filters[hookName] || {})[extensionName] = func;\n        };\n    };\n\n    /**\n     * The `mixitup.Features` class performs all feature and CSS prefix detection\n     * neccessary for MixItUp to function correctly, as well as storing various\n     * string and array constants. All feature decection is on evaluation of the\n     * library and stored in a singleton instance for use by other internal classes.\n     *\n     * @constructor\n     * @namespace\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.Features = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.boxSizingPrefix = '';\n        this.transformPrefix = '';\n        this.transitionPrefix = '';\n\n        this.boxSizingPrefix = '';\n        this.transformProp = '';\n        this.transformRule = '';\n        this.transitionProp = '';\n        this.perspectiveProp = '';\n        this.perspectiveOriginProp = '';\n\n        this.has = new mixitup.Has();\n\n        this.canary = null;\n\n        this.BOX_SIZING_PROP = 'boxSizing';\n        this.TRANSITION_PROP = 'transition';\n        this.TRANSFORM_PROP = 'transform';\n        this.PERSPECTIVE_PROP = 'perspective';\n        this.PERSPECTIVE_ORIGIN_PROP = 'perspectiveOrigin';\n        this.VENDORS = ['Webkit', 'moz', 'O', 'ms'];\n\n        this.TWEENABLE = [\n            'opacity',\n            'width', 'height',\n            'marginRight', 'marginBottom',\n            'x', 'y',\n            'scale',\n            'translateX', 'translateY', 'translateZ',\n            'rotateX', 'rotateY', 'rotateZ'\n        ];\n\n        this.callActions('afterConstruct');\n    };\n\n    mixitup.BaseStatic.call(mixitup.Features);\n\n    mixitup.Features.prototype = Object.create(mixitup.Base.prototype);\n\n    h.extend(mixitup.Features.prototype,\n        /** @lends mixitup.Features */\n        {\n            constructor: mixitup.Features,\n\n            /**\n             * @private\n             * @return  {void}\n             */\n\n            init: function () {\n                var self = this;\n\n                self.callActions('beforeInit', arguments);\n\n                self.canary = document.createElement('div');\n\n                self.setPrefixes();\n                self.runTests();\n\n                self.callActions('beforeInit', arguments);\n            },\n\n            /**\n             * @private\n             * @return  {void}\n             */\n\n            runTests: function () {\n                var self = this;\n\n                self.callActions('beforeRunTests', arguments);\n\n                self.has.promises = typeof window.Promise === 'function';\n                self.has.transitions = self.transitionPrefix !== 'unsupported';\n\n                self.callActions('afterRunTests', arguments);\n\n                h.freeze(self.has);\n            },\n\n            /**\n             * @private\n             * @return  {void}\n             */\n\n            setPrefixes: function () {\n                var self = this;\n\n                self.callActions('beforeSetPrefixes', arguments);\n\n                self.transitionPrefix = h.getPrefix(self.canary, 'Transition', self.VENDORS);\n                self.transformPrefix = h.getPrefix(self.canary, 'Transform', self.VENDORS);\n                self.boxSizingPrefix = h.getPrefix(self.canary, 'BoxSizing', self.VENDORS);\n\n                self.boxSizingProp = self.boxSizingPrefix ?\n                    self.boxSizingPrefix + h.pascalCase(self.BOX_SIZING_PROP) : self.BOX_SIZING_PROP;\n\n                self.transitionProp = self.transitionPrefix ?\n                    self.transitionPrefix + h.pascalCase(self.TRANSITION_PROP) : self.TRANSITION_PROP;\n\n                self.transformProp = self.transformPrefix ?\n                    self.transformPrefix + h.pascalCase(self.TRANSFORM_PROP) : self.TRANSFORM_PROP;\n\n                self.transformRule = self.transformPrefix ?\n                    '-' + self.transformPrefix + '-' + self.TRANSFORM_PROP : self.TRANSFORM_PROP;\n\n                self.perspectiveProp = self.transformPrefix ?\n                    self.transformPrefix + h.pascalCase(self.PERSPECTIVE_PROP) : self.PERSPECTIVE_PROP;\n\n                self.perspectiveOriginProp = self.transformPrefix ?\n                    self.transformPrefix + h.pascalCase(self.PERSPECTIVE_ORIGIN_PROP) :\n                    self.PERSPECTIVE_ORIGIN_PROP;\n\n                self.callActions('afterSetPrefixes', arguments);\n            }\n        });\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.Has = function () {\n        this.transitions = false;\n        this.promises = false;\n\n        h.seal(this);\n    };\n\n    // Assign a singleton instance to `mixitup.features` and initialise:\n\n    mixitup.features = new mixitup.Features();\n\n    mixitup.features.init();\n\n    /**\n     * A group of properties defining the mixer's animation and effects settings.\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        animation\n     * @namespace\n     * @public\n     * @since       2.0.0\n     */\n\n    mixitup.ConfigAnimation = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A boolean dictating whether or not animation should be enabled for the MixItUp instance.\n         * If `false`, all operations will occur instantly and syncronously, although callback\n         * functions and any returned promises will still be fulfilled.\n         *\n         * @example <caption>Example: Create a mixer with all animations disabled</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         enable: false\n         *     }\n         * });\n         *\n         * @name        enable\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {boolean}\n         * @default     true\n         */\n\n        this.enable = true;\n\n        /**\n         * A string of one or more space-seperated properties to which transitions will be\n         * applied for all filtering animations.\n         *\n         * Properties can be listed any order or combination, although they will be applied in a specific\n         * predefined order to produce consistent results.\n         *\n         * To learn more about available effects, experiment with our <a href=\"https://www.kunkalabs.com/mixitup/\">\n         * sandbox demo</a> and try out the \"Export config\" button in the Animation options drop down.\n         *\n         * @example <caption>Example: Apply \"fade\" and \"translateZ\" effects to all animations</caption>\n         * // As targets are filtered in and out, they will fade between\n         * // opacity 1 and 0 and transform between translateZ(-100px) and\n         * // translateZ(0).\n         *\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         effects: 'fade translateZ(-100px)'\n         *     }\n         * });\n         *\n         * @name        effects\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {string}\n         * @default     'fade scale'\n         */\n\n        this.effects = 'fade scale';\n\n        /**\n         * A string of one or more space-seperated effects to be applied only to filter-in\n         * animations, overriding `config.animation.effects` if set.\n         *\n         * @example <caption>Example: Apply downwards vertical translate to targets being filtered in</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         effectsIn: 'fade translateY(-100%)'\n         *     }\n         * });\n         *\n         * @name        effectsIn\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {string}\n         * @default     ''\n         */\n\n        this.effectsIn = '';\n\n        /**\n         * A string of one or more space-seperated effects to be applied only to filter-out\n         * animations, overriding `config.animation.effects` if set.\n         *\n         * @example <caption>Example: Apply upwards vertical translate to targets being filtered out</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         effectsOut: 'fade translateY(-100%)'\n         *     }\n         * });\n         *\n         * @name        effectsOut\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {string}\n         * @default     ''\n         */\n\n        this.effectsOut = '';\n\n        /**\n         * An integer dictating the duration of all MixItUp animations in milliseconds, not\n         * including any additional delay apllied via the `'stagger'` effect.\n         *\n         * @example <caption>Example: Apply an animation duration of 200ms to all mixitup animations</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         duration: 200\n         *     }\n         * });\n         *\n         * @name        duration\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {number}\n         * @default     600\n         */\n\n        this.duration = 600;\n\n        /**\n         * A valid CSS3 transition-timing function or shorthand. For a full list of accepted\n         * values, visit <a href=\"http://easings.net\" target=\"_blank\">easings.net</a>.\n         *\n         * @example <caption>Example 1: Apply \"ease-in-out\" easing to all animations</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         easing: 'ease-in-out'\n         *     }\n         * });\n         *\n         * @example <caption>Example 2: Apply a custom \"cubic-bezier\" easing function to all animations</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         easing: 'cubic-bezier(0.645, 0.045, 0.355, 1)'\n         *     }\n         * });\n         *\n         * @name        easing\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {string}\n         * @default     'ease'\n         */\n\n        this.easing = 'ease';\n\n        /**\n         * A boolean dictating whether or not to apply perspective to the MixItUp container\n         * during animations. By default, perspective is always applied and creates the\n         * illusion of three-dimensional space for effects such as `translateZ`, `rotateX`,\n         * and `rotateY`.\n         *\n         * You may wish to disable this and define your own perspective settings via CSS.\n         *\n         * @example <caption>Example: Prevent perspective from being applied to any 3D transforms</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         applyPerspective: false\n         *     }\n         * });\n         *\n         * @name        applyPerspective\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {bolean}\n         * @default     true\n         */\n\n        this.applyPerspective = true;\n\n        /**\n         * The perspective distance value to be applied to the container during animations,\n         * affecting any 3D-transform-based effects.\n         *\n         * @example <caption>Example: Set a perspective distance of 2000px</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         effects: 'rotateY(-25deg)',\n         *         perspectiveDistance: '2000px'\n         *     }\n         * });\n         *\n         * @name        perspectiveDistance\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {string}\n         * @default     '3000px'\n         */\n\n        this.perspectiveDistance = '3000px';\n\n        /**\n         * The perspective-origin value to be applied to the container during animations,\n         * affecting any 3D-transform-based effects.\n         *\n         * @example <caption>Example: Set a perspective origin in the top-right of the container</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         effects: 'transateZ(-200px)',\n         *         perspectiveOrigin: '100% 0'\n         *     }\n         * });\n         *\n         * @name        perspectiveOrigin\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {string}\n         * @default     '50% 50%'\n         */\n\n        this.perspectiveOrigin = '50% 50%';\n\n        /**\n         * A boolean dictating whether or not to enable the queuing of operations.\n         *\n         * If `true` (default), and a control is clicked or an API call is made while another\n         * operation is progress, the operation will go into the queue and will be automatically exectuted\n         * when the previous operaitons is finished.\n         *\n         * If `false`, any requested operations will be ignored, and the `onMixBusy` callback and `mixBusy`\n         * event will be fired. If `debug.showWarnings` is enabled, a console warning will also occur.\n         *\n         * @example <caption>Example: Disable queuing</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         queue: false\n         *     }\n         * });\n         *\n         * @name        queue\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {boolean}\n         * @default     true\n         */\n\n        this.queue = true;\n\n        /**\n         * An integer dictacting the maximum number of operations allowed in the queue at\n         * any time, when queuing is enabled.\n         *\n         * @example <caption>Example: Allow a maximum of 5 operations in the queue at any time</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         queueLimit: 5\n         *     }\n         * });\n         *\n         * @name        queueLimit\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {number}\n         * @default     3\n         */\n\n        this.queueLimit = 3;\n\n        /**\n         * A boolean dictating whether or not to transition the height and width of the\n         * container as elements are filtered in and out. If disabled, the container height\n         * will change abruptly.\n         *\n         * It may be desirable to disable this on mobile devices as the CSS `height` and\n         * `width` properties do not receive GPU-acceleration and can therefore cause stuttering.\n         *\n         * @example <caption>Example 1: Disable the transitioning of the container height and/or width</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         animateResizeContainer: false\n         *     }\n         * });\n         *\n         * @example <caption>Example 2: Disable the transitioning of the container height and/or width for mobile devices only</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         animateResizeContainer: myFeatureTests.isMobile ? false : true\n         *     }\n         * });\n         *\n         * @name        animateResizeContainer\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {boolean}\n         * @default     true\n         */\n\n        this.animateResizeContainer = true;\n\n        /**\n         * A boolean dictating whether or not to transition the height and width of target\n         * elements as they change throughout the course of an animation.\n         *\n         * This is often a must for flex-box grid layouts where the size of target elements may change\n         * depending on final their position in relation to their siblings, or for `.changeLayout()`\n         * operations where the size of targets change between layouts.\n         *\n         * NB: This feature requires additional calculations and manipulation to non-hardware-accelerated\n         * properties which may adversely affect performance on slower devices, and is therefore\n         * disabled by default.\n         *\n         * @example <caption>Example: Enable the transitioning of target widths and heights</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         animateResizeTargets: true\n         *     }\n         * });\n         *\n         * @name        animateResizeTargets\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {boolean}\n         * @default     false\n         */\n\n        this.animateResizeTargets = false;\n\n        /**\n         * A custom function used to manipulate the order in which the stagger delay is\n         * incremented when using the \u2018stagger\u2019 effect.\n         *\n         * When using the 'stagger' effect, the delay applied to each target element is incremented\n         * based on its index. You may create a custom function to manipulate the order in which the\n         * delay is incremented and create engaging non-linear stagger effects.\n         *\n         * The function receives the index of the target element as a parameter, and must\n         * return an integer which serves as the multiplier for the stagger delay.\n         *\n         * @example <caption>Example 1: Stagger target elements by column in a 3-column grid</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         effects: 'fade stagger(100ms)',\n         *         staggerSequence: function(i) {\n         *             return i % 3;\n         *         }\n         *     }\n         * });\n         *\n         * @example <caption>Example 2: Using an algorithm to produce a more complex sequence</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         effects: 'fade stagger(100ms)',\n         *         staggerSequence: function(i) {\n         *             return (2*i) - (5*((i/3) - ((1/3) * (i%3))));\n         *         }\n         *     }\n         * });\n         *\n         * @name        staggerSequence\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {function}\n         * @default     null\n         */\n\n        this.staggerSequence = null;\n\n        /**\n         * A boolean dictating whether or not to reverse the direction of `translate`\n         * and `rotate` transforms for elements being filtered out.\n         *\n         * It can be used to create carousel-like animations where elements enter and exit\n         * from opposite directions. If enabled, the effect `translateX(-100%)` for elements\n         * being filtered in would become `translateX(100%)` for targets being filtered out.\n         *\n         * This functionality can also be achieved by providing seperate effects\n         * strings for `config.animation.effectsIn` and `config.animation.effectsOut`.\n         *\n         * @example <caption>Example: Reverse the desired direction on any translate/rotate effect for targets being filtered out</caption>\n         * // Elements being filtered in will be translated from '100%' to '0' while\n         * // elements being filtered out will be translated from 0 to '-100%'\n         *\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         effects: 'fade translateX(100%)',\n         *         reverseOut: true,\n         *         nudge: false // Disable nudging to create a carousel-like effect\n         *     }\n         * });\n         *\n         * @name        reverseOut\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {boolean}\n         * @default     false\n         */\n\n        this.reverseOut = false;\n\n        /**\n         * A boolean dictating whether or not to \"nudge\" the animation path of targets\n         * when they are being filtered in and out simulatenously.\n         *\n         * This has been the default behavior of MixItUp since version 1, but it\n         * may be desirable to disable this effect when filtering directly from\n         * one exclusive set of targets to a different exclusive set of targets,\n         * to create a carousel-like effect, or a generally more subtle animation.\n         *\n         * @example <caption>Example: Disable the \"nudging\" of targets being filtered in and out simulatenously</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         nudge: false\n         *     }\n         * });\n         *\n         * @name        nudge\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {boolean}\n         * @default     true\n         */\n\n        this.nudge = true;\n\n        /**\n         * A boolean dictating whether or not to clamp the height of the container while MixItUp's\n         * geometry tests are carried out before an operation.\n         *\n         * To prevent scroll-bar flicker, clamping is turned on by default. But in the case where the\n         * height of the container might affect its vertical positioning in the viewport\n         * (e.g. a vertically-centered container), this should be turned off to ensure accurate\n         * test results and a smooth animation.\n         *\n         * @example <caption>Example: Disable container height-clamping</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         clampHeight: false\n         *     }\n         * });\n         *\n         * @name        clampHeight\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {boolean}\n         * @default     true\n         */\n\n        this.clampHeight = true;\n\n        /**\n         * A boolean dictating whether or not to clamp the width of the container while MixItUp's\n         * geometry tests are carried out before an operation.\n         *\n         * To prevent scroll-bar flicker, clamping is turned on by default. But in the case where the\n         * width of the container might affect its horitzontal positioning in the viewport\n         * (e.g. a horizontall-centered container), this should be turned off to ensure accurate\n         * test results and a smooth animation.\n         *\n         * @example <caption>Example: Disable container width-clamping</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         clampWidth: false\n         *     }\n         * });\n         *\n         * @name        clampWidth\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {boolean}\n         * @default     true\n         */\n\n        this.clampWidth = true;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigAnimation);\n\n    mixitup.ConfigAnimation.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigAnimation.prototype.constructor = mixitup.ConfigAnimation;\n\n    /**\n     * A group of properties relating to the behavior of the Mixer.\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        behavior\n     * @namespace\n     * @public\n     * @since       3.1.12\n     */\n\n    mixitup.ConfigBehavior = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A boolean dictating whether to allow \"live\" sorting of the mixer.\n         *\n         * Because of the expensive nature of sorting, MixItUp makes use of several\n         * internal optimizations to skip redundant sorting operations, such as when\n         * the newly requested sort command is the same as the active one. The caveat\n         * to this optimization is that \"live\" edits to the value of a target's sorting\n         * attribute will be ignored when requesting a re-sort by the same attribute.\n         *\n         * By setting to `behavior.liveSort` to `true`, the mixer will always re-sort\n         * regardless of whether or not the sorting attribute and order have changed.\n         *\n         * @example <caption>Example: Enabling `liveSort` to allow for re-sorting</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     behavior: {\n         *         liveSort: true\n         *     },\n         *     load: {\n         *         sort: 'edited:desc'\n         *     }\n         * });\n         *\n         * var target = containerEl.children[3];\n         *\n         * console.log(target.getAttribute('data-edited')); // '2015-04-24'\n         *\n         * target.setAttribute('data-edited', '2017-08-10'); // Update the target's edited date\n         *\n         * mixer.sort('edited:desc')\n         *     .then(function(state) {\n         *         // The target is now at the top of the list\n         *\n         *         console.log(state.targets[0] === target); // true\n         *     });\n         *\n         * @name        liveSort\n         * @memberof    mixitup.Config.behavior\n         * @instance\n         * @type        {boolean}\n         * @default     false\n         */\n\n        this.liveSort = false;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigBehavior);\n\n    mixitup.ConfigBehavior.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigBehavior.prototype.constructor = mixitup.ConfigBehavior;\n\n    /**\n     * A group of optional callback functions to be invoked at various\n     * points within the lifecycle of a mixer operation.\n     *\n     * Each function is analogous to an event of the same name triggered from the\n     * container element, and is invoked immediately after it.\n     *\n     * All callback functions receive the current `state` object as their first\n     * argument, as well as other more specific arguments described below.\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        callbacks\n     * @namespace\n     * @public\n     * @since       2.0.0\n     */\n\n    mixitup.ConfigCallbacks = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A callback function invoked immediately after any MixItUp operation is requested\n         * and before animations have begun.\n         *\n         * A second `futureState` argument is passed to the function which represents the final\n         * state of the mixer once the requested operation has completed.\n         *\n         * @example <caption>Example: Adding an `onMixStart` callback function</caption>\n         * var mixer = mixitup(containerEl, {\n         *     callbacks: {\n         *         onMixStart: function(state, futureState) {\n         *              console.log('Starting operation...');\n         *         }\n         *     }\n         * });\n         *\n         * @name        onMixStart\n         * @memberof    mixitup.Config.callbacks\n         * @instance\n         * @type        {function}\n         * @default     null\n         */\n\n        this.onMixStart = null;\n\n        /**\n         * A callback function invoked when a MixItUp operation is requested while another\n         * operation is in progress, and the animation queue is full, or queueing\n         * is disabled.\n         *\n         * @example <caption>Example: Adding an `onMixBusy` callback function</caption>\n         * var mixer = mixitup(containerEl, {\n         *     callbacks: {\n         *         onMixBusy: function(state) {\n         *              console.log('Mixer busy');\n         *         }\n         *     }\n         * });\n         *\n         * @name        onMixBusy\n         * @memberof    mixitup.Config.callbacks\n         * @instance\n         * @type        {function}\n         * @default     null\n         */\n\n        this.onMixBusy = null;\n\n        /**\n         * A callback function invoked after any MixItUp operation has completed, and the\n         * state has been updated.\n         *\n         * @example <caption>Example: Adding an `onMixEnd` callback function</caption>\n         * var mixer = mixitup(containerEl, {\n         *     callbacks: {\n         *         onMixEnd: function(state) {\n         *              console.log('Operation complete');\n         *         }\n         *     }\n         * });\n         *\n         * @name        onMixEnd\n         * @memberof    mixitup.Config.callbacks\n         * @instance\n         * @type        {function}\n         * @default     null\n         */\n\n        this.onMixEnd = null;\n\n        /**\n         * A callback function invoked whenever an operation \"fails\", i.e. no targets\n         * could be found matching the requested filter.\n         *\n         * @example <caption>Example: Adding an `onMixFail` callback function</caption>\n         * var mixer = mixitup(containerEl, {\n         *     callbacks: {\n         *         onMixFail: function(state) {\n         *              console.log('No items could be found matching the requested filter');\n         *         }\n         *     }\n         * });\n         *\n         * @name        onMixFail\n         * @memberof    mixitup.Config.callbacks\n         * @instance\n         * @type        {function}\n         * @default     null\n         */\n\n        this.onMixFail = null;\n\n        /**\n         * A callback function invoked whenever a MixItUp control is clicked, and before its\n         * respective operation is requested.\n         *\n         * The clicked element is assigned to the `this` keyword within the function. The original\n         * click event is passed to the function as the second argument, which can be useful if\n         * using `<a>` tags as controls where the default behavior needs to be prevented.\n         *\n         * Returning `false` from the callback will prevent the control click from triggering\n         * an operation.\n         *\n         * @example <caption>Example 1: Adding an `onMixClick` callback function</caption>\n         * var mixer = mixitup(containerEl, {\n         *     callbacks: {\n         *         onMixClick: function(state, originalEvent) {\n         *              console.log('The control \"' + this.innerText + '\" was clicked');\n         *         }\n         *     }\n         * });\n         *\n         * @example <caption>Example 2: Using `onMixClick` to manipulate the original click event</caption>\n         * var mixer = mixitup(containerEl, {\n         *     callbacks: {\n         *         onMixClick: function(state, originalEvent) {\n         *              // Prevent original click event from bubbling up:\n         *              originalEvent.stopPropagation();\n         *\n         *              // Prevent default behavior of clicked element:\n         *              originalEvent.preventDefault();\n         *         }\n         *     }\n         * });\n         *\n         * @example <caption>Example 3: Using `onMixClick` to conditionally cancel operations</caption>\n         * var mixer = mixitup(containerEl, {\n         *     callbacks: {\n         *         onMixClick: function(state, originalEvent) {\n         *              // Perform some conditional check:\n         *\n         *              if (myApp.isLoading) {\n         *                  // By returning false, we can prevent the control click from triggering an operation.\n         *\n         *                  return false;\n         *              }\n         *         }\n         *     }\n         * });\n         *\n         * @name        onMixClick\n         * @memberof    mixitup.Config.callbacks\n         * @instance\n         * @type        {function}\n         * @default     null\n         */\n\n        this.onMixClick = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigCallbacks);\n\n    mixitup.ConfigCallbacks.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigCallbacks.prototype.constructor = mixitup.ConfigCallbacks;\n\n    /**\n     * A group of properties relating to clickable control elements.\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        controls\n     * @namespace\n     * @public\n     * @since       2.0.0\n     */\n\n    mixitup.ConfigControls = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A boolean dictating whether or not controls should be enabled for the mixer instance.\n         *\n         * If `true` (default behavior), MixItUp will search the DOM for any clickable elements with\n         * `data-filter`, `data-sort` or `data-toggle` attributes, and bind them for click events.\n         *\n         * If `false`, no click handlers will be bound, and all functionality must therefore be performed\n         * via the mixer's API methods.\n         *\n         * If you do not intend to use the default controls, setting this property to `false` will\n         * marginally improve the startup time of your mixer instance, and will also prevent any other active\n         * mixer instances in the DOM which are bound to controls from controlling the instance.\n         *\n         * @example <caption>Example: Disabling controls</caption>\n         * var mixer = mixitup(containerEl, {\n         *     controls: {\n         *         enable: false\n         *     }\n         * });\n         *\n         * // With the default controls disabled, we can only control\n         * // the mixer via its API methods, e.g.:\n         *\n         * mixer.filter('.cat-1');\n         *\n         * @name        enable\n         * @memberof    mixitup.Config.controls\n         * @instance\n         * @type        {boolean}\n         * @default     true\n         */\n\n        this.enable = true;\n\n        /**\n         * A boolean dictating whether or not to use event delegation when binding click events\n         * to the default controls.\n         *\n         * If `false` (default behavior), each control button in the DOM will be found and\n         * individually bound when a mixer is instantiated, with their corresponding actions\n         * cached for performance.\n         *\n         * If `true`, a single click handler will be applied to the `window` (or container element - see\n         * `config.controls.scope`), and any click events triggered by elements with `data-filter`,\n         * `data-sort` or `data-toggle` attributes present will be handled as they propagate upwards.\n         *\n         * If you require a user interface where control buttons may be added, removed, or changed during the\n         * lifetime of a mixer, `controls.live` should be set to `true`. There is a marginal but unavoidable\n         * performance deficit when using live controls, as the value of each control button must be read\n         * from the DOM in real time once the click event has propagated.\n         *\n         * @example <caption>Example: Setting live controls</caption>\n         * var mixer = mixitup(containerEl, {\n         *     controls: {\n         *         live: true\n         *     }\n         * });\n         *\n         * // Control buttons can now be added, remove and changed without breaking\n         * // the mixer's UI\n         *\n         * @name        live\n         * @memberof    mixitup.Config.controls\n         * @instance\n         * @type        {boolean}\n         * @default     true\n         */\n\n        this.live = false;\n\n        /**\n         * A string dictating the \"scope\" to use when binding or querying the default controls. The available\n         * values are `'global'` or `'local'`.\n         *\n         * When set to `'global'` (default behavior), MixItUp will query the entire document for control buttons\n         * to bind, or delegate click events from (see `config.controls.live`).\n         *\n         * When set to `'local'`, MixItUp will only query (or bind click events to) its own container element.\n         * This may be desireable if you require multiple active mixer instances within the same document, with\n         * controls that would otherwise intefere with each other if scoped globally.\n         *\n         * Conversely, if you wish to control multiple instances with a single UI, you would create one\n         * set of controls and keep the controls scope of each mixer set to `global`.\n         *\n         * @example <caption>Example: Setting 'local' scoped controls</caption>\n         * var mixerOne = mixitup(containerOne, {\n         *     controls: {\n         *         scope: 'local'\n         *     }\n         * });\n         *\n         * var mixerTwo = mixitup(containerTwo, {\n         *     controls: {\n         *         scope: 'local'\n         *     }\n         * });\n         *\n         * // Both mixers can now exist within the same document with\n         * // isolated controls placed within their container elements.\n         *\n         * @name        scope\n         * @memberof    mixitup.Config.controls\n         * @instance\n         * @type        {string}\n         * @default     'global'\n         */\n\n        this.scope = 'global'; // enum: ['local' ,'global']\n\n        /**\n         * A string dictating the type of logic to apply when concatenating the filter selectors of\n         * active toggle buttons (i.e. any clickable element with a `data-toggle` attribute).\n         *\n         * If set to `'or'` (default behavior), selectors will be concatenated together as\n         * a comma-seperated list. For example:\n         *\n         * `'.cat-1, .cat-2'` (shows any elements matching `'.cat-1'` OR `'.cat-2'`)\n         *\n         * If set to `'and'`, selectors will be directly concatenated together. For example:\n         *\n         * `'.cat-1.cat-2'` (shows any elements which match both `'.cat-1'` AND `'.cat-2'`)\n         *\n         * @example <caption>Example: Setting \"and\" toggle logic</caption>\n         * var mixer = mixitup(containerEl, {\n         *     controls: {\n         *         toggleLogic: 'and'\n         *     }\n         * });\n         *\n         * @name        toggleLogic\n         * @memberof    mixitup.Config.controls\n         * @instance\n         * @type        {string}\n         * @default     'or'\n         */\n\n        this.toggleLogic = 'or'; // enum: ['or', 'and']\n\n        /**\n         * A string dictating the filter behavior when all toggles are inactive.\n         *\n         * When set to `'all'` (default behavior), *all* targets will be shown by default\n         * when no toggles are active, or at the moment all active toggles are toggled off.\n         *\n         * When set to `'none'`, no targets will be shown by default when no toggles are\n         * active, or at the moment all active toggles are toggled off.\n         *\n         * @example <caption>Example 1: Setting the default toggle behavior to `'all'`</caption>\n         * var mixer = mixitup(containerEl, {\n         *     controls: {\n         *         toggleDefault: 'all'\n         *     }\n         * });\n         *\n         * mixer.toggleOn('.cat-2')\n         *     .then(function() {\n         *         // Deactivate all active toggles\n         *\n         *         return mixer.toggleOff('.cat-2')\n         *     })\n         *     .then(function(state) {\n         *          console.log(state.activeFilter.selector); // 'all'\n         *          console.log(state.totalShow); // 12\n         *     });\n         *\n         * @example <caption>Example 2: Setting the default toggle behavior to `'none'`</caption>\n         * var mixer = mixitup(containerEl, {\n         *     controls: {\n         *         toggleDefault: 'none'\n         *     }\n         * });\n         *\n         * mixer.toggleOn('.cat-2')\n         *     .then(function() {\n         *         // Deactivate all active toggles\n         *\n         *         return mixer.toggleOff('.cat-2')\n         *     })\n         *     .then(function(state) {\n         *          console.log(state.activeFilter.selector); // 'none'\n         *          console.log(state.totalShow); // 0\n         *     });\n         *\n         * @name        toggleDefault\n         * @memberof    mixitup.Config.controls\n         * @instance\n         * @type        {string}\n         * @default     'all'\n         */\n\n        this.toggleDefault = 'all'; // enum: ['all', 'none']\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigControls);\n\n    mixitup.ConfigControls.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigControls.prototype.constructor = mixitup.ConfigControls;\n\n    /**\n     * A group of properties defining the output and structure of class names programmatically\n     * added to controls and containers to reflect the state of the mixer.\n     *\n     * Most commonly, class names are added to controls by MixItUp to indicate that\n     * the control is active so that it can be styled accordingly - `'mixitup-control-active'` by default.\n     *\n     * Using a \"BEM\" like structure, each classname is broken into the three parts:\n     * a block namespace (`'mixitup'`), an element name (e.g. `'control'`), and an optional modifier\n     * name (e.g. `'active'`) reflecting the state of the element.\n     *\n     * By default, each part of the classname is concatenated together using single hyphens as\n     * delineators, but this can be easily customised to match the naming convention and style of\n     * your project.\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        classNames\n     * @namespace\n     * @public\n     * @since       3.0.0\n     */\n\n    mixitup.ConfigClassNames = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * The \"block\" portion, or top-level namespace added to the start of any class names created by MixItUp.\n         *\n         * @example <caption>Example 1: changing the `config.classNames.block` value</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         block: 'portfolio'\n         *     }\n         * });\n         *\n         * // Active control output: \"portfolio-control-active\"\n         *\n         * @example <caption>Example 2: Removing `config.classNames.block`</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         block: ''\n         *     }\n         * });\n         *\n         * // Active control output: \"control-active\"\n         *\n         * @name        block\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     'mixitup'\n         */\n\n        this.block = 'mixitup';\n\n        /**\n         * The \"element\" portion of the class name added to container.\n         *\n         * @name        elementContainer\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     'container'\n         */\n\n        this.elementContainer = 'container';\n\n        /**\n         * The \"element\" portion of the class name added to filter controls.\n         *\n         * By default, all filter, sort, multimix and toggle controls take the same element value of `'control'`, but\n         * each type's element value can be individually overwritten to match the unique classNames of your controls as needed.\n         *\n         * @example <caption>Example 1: changing the `config.classNames.elementFilter` value</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         elementFilter: 'filter'\n         *     }\n         * });\n         *\n         * // Active filter output: \"mixitup-filter-active\"\n         *\n         * @example <caption>Example 2: changing the `config.classNames.block` and `config.classNames.elementFilter` values</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         block: 'portfolio',\n         *         elementFilter: 'filter'\n         *     }\n         * });\n         *\n         * // Active filter output: \"portfolio-filter-active\"\n         *\n         * @name        elementFilter\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     'control'\n         */\n\n        this.elementFilter = 'control';\n\n        /**\n         * The \"element\" portion of the class name added to sort controls.\n         *\n         * By default, all filter, sort, multimix and toggle controls take the same element value of `'control'`, but\n         * each type's element value can be individually overwritten to match the unique classNames of your controls as needed.\n         *\n         * @example <caption>Example 1: changing the `config.classNames.elementSort` value</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         elementSort: 'sort'\n         *     }\n         * });\n         *\n         * // Active sort output: \"mixitup-sort-active\"\n         *\n         * @example <caption>Example 2: changing the `config.classNames.block` and `config.classNames.elementSort` values</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         block: 'portfolio',\n         *         elementSort: 'sort'\n         *     }\n         * });\n         *\n         * // Active sort output: \"portfolio-sort-active\"\n         *\n         * @name        elementSort\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     'control'\n         */\n\n        this.elementSort = 'control';\n\n        /**\n         * The \"element\" portion of the class name added to multimix controls.\n         *\n         * By default, all filter, sort, multimix and toggle controls take the same element value of `'control'`, but\n         * each type's element value can be individually overwritten to match the unique classNames of your controls as needed.\n         *\n         * @example <caption>Example 1: changing the `config.classNames.elementMultimix` value</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         elementMultimix: 'multimix'\n         *     }\n         * });\n         *\n         * // Active multimix output: \"mixitup-multimix-active\"\n         *\n         * @example <caption>Example 2: changing the `config.classNames.block` and `config.classNames.elementMultimix` values</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         block: 'portfolio',\n         *         elementSort: 'multimix'\n         *     }\n         * });\n         *\n         * // Active multimix output: \"portfolio-multimix-active\"\n         *\n         * @name        elementMultimix\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     'control'\n         */\n\n        this.elementMultimix = 'control';\n\n        /**\n         * The \"element\" portion of the class name added to toggle controls.\n         *\n         * By default, all filter, sort, multimix and toggle controls take the same element value of `'control'`, but\n         * each type's element value can be individually overwritten to match the unique classNames of your controls as needed.\n         *\n         * @example <caption>Example 1: changing the `config.classNames.elementToggle` value</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         elementToggle: 'toggle'\n         *     }\n         * });\n         *\n         * // Active toggle output: \"mixitup-toggle-active\"\n         *\n         * @example <caption>Example 2: changing the `config.classNames.block` and `config.classNames.elementToggle` values</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         block: 'portfolio',\n         *         elementToggle: 'toggle'\n         *     }\n         * });\n         *\n         * // Active toggle output: \"portfolio-toggle-active\"\n         *\n         * @name        elementToggle\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     'control'\n         */\n\n        this.elementToggle = 'control';\n\n        /**\n         * The \"modifier\" portion of the class name added to active controls.\n         * @name        modifierActive\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     'active'\n         */\n\n        this.modifierActive = 'active';\n\n        /**\n         * The \"modifier\" portion of the class name added to disabled controls.\n         *\n         * @name        modifierDisabled\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     'disabled'\n         */\n\n        this.modifierDisabled = 'disabled';\n\n        /**\n         * The \"modifier\" portion of the class name added to the container when in a \"failed\" state.\n         *\n         * @name        modifierFailed\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     'failed'\n         */\n\n        this.modifierFailed = 'failed';\n\n        /**\n         * The delineator used between the \"block\" and \"element\" portions of any class name added by MixItUp.\n         *\n         * If the block portion is ommited by setting it to an empty string, no delineator will be added.\n         *\n         * @example <caption>Example: changing the delineator to match BEM convention</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         delineatorElement: '__'\n         *     }\n         * });\n         *\n         * // example active control output: \"mixitup__control-active\"\n         *\n         * @name        delineatorElement\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     '-'\n         */\n\n        this.delineatorElement = '-';\n\n        /**\n         * The delineator used between the \"element\" and \"modifier\" portions of any class name added by MixItUp.\n         *\n         * If the element portion is ommited by setting it to an empty string, no delineator will be added.\n         *\n         * @example <caption>Example: changing both delineators to match BEM convention</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         delineatorElement: '__'\n         *         delineatorModifier: '--'\n         *     }\n         * });\n         *\n         * // Active control output: \"mixitup__control--active\"\n         *\n         * @name        delineatorModifier\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     '-'\n         */\n\n        this.delineatorModifier = '-';\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigClassNames);\n\n    mixitup.ConfigClassNames.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigClassNames.prototype.constructor = mixitup.ConfigClassNames;\n\n    /**\n     * A group of properties relating to MixItUp's dataset API.\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        data\n     * @namespace\n     * @public\n     * @since       3.0.0\n     */\n\n    mixitup.ConfigData = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A string specifying the name of the key containing your data model's unique\n         * identifier (UID). To use the dataset API, a UID key must be specified and\n         * be present and unique on all objects in the dataset you provide to MixItUp.\n         *\n         * For example, if your dataset is made up of MongoDB documents, the UID\n         * key would be `'id'` or `'_id'`.\n         *\n         * @example <caption>Example: Setting the UID to `'id'`</caption>\n         * var mixer = mixitup(containerEl, {\n         *     data: {\n         *         uidKey: 'id'\n         *     }\n         * });\n         *\n         * @name        uidKey\n         * @memberof    mixitup.Config.data\n         * @instance\n         * @type        {string}\n         * @default     ''\n         */\n\n        this.uidKey = '';\n\n        /**\n         * A boolean dictating whether or not MixItUp should \"dirty check\" each object in\n         * your dataset for changes whenever `.dataset()` is called, and re-render any targets\n         * for which a change is found.\n         *\n         * Depending on the complexity of your data model, dirty checking can be expensive\n         * and is therefore disabled by default.\n         *\n         * NB: For changes to be detected, a new immutable instance of the edited model must be\n         * provided to mixitup, rather than manipulating properties on the existing instance.\n         * If your changes are a result of a DB write and read, you will most likely be calling\n         * `.dataset()` with a clean set of objects each time, so this will not be an issue.\n         *\n         * @example <caption>Example: Enabling dirty checking</caption>\n         *\n         * var myDataset = [\n         *     {\n         *         id: 0,\n         *         title: \"Blog Post Title 0\"\n         *         ...\n         *     },\n         *     {\n         *         id: 1,\n         *         title: \"Blog Post Title 1\"\n         *         ...\n         *     }\n         * ];\n         *\n         * // Instantiate a mixer with a pre-loaded dataset, and a target renderer\n         * // function defined\n         *\n         * var mixer = mixitup(containerEl, {\n         *     data: {\n         *         uidKey: 'id',\n         *         dirtyCheck: true\n         *     },\n         *     load: {\n         *         dataset: myDataset\n         *     },\n         *     render: {\n         *         target: function() { ... }\n         *     }\n         * });\n         *\n         * // For illustration, we will clone and edit the second object in the dataset.\n         * // NB: this would typically be done server-side in response to a DB update,\n         * and then re-queried via an API.\n         *\n         * myDataset[1] = Object.assign({}, myDataset[1]);\n         *\n         * myDataset[1].title = 'Blog Post Title 11';\n         *\n         * mixer.dataset(myDataset)\n         *    .then(function() {\n         *        // the target with ID \"1\", will be re-rendered reflecting its new title\n         *    });\n         *\n         * @name        dirtyCheck\n         * @memberof    mixitup.Config.data\n         * @instance\n         * @type        {boolean}\n         * @default     false\n         */\n\n        this.dirtyCheck = false;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigData);\n\n    mixitup.ConfigData.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigData.prototype.constructor = mixitup.ConfigData;\n\n    /**\n     * A group of properties allowing the toggling of various debug features.\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        debug\n     * @namespace\n     * @public\n     * @since       3.0.0\n     */\n\n    mixitup.ConfigDebug = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A boolean dictating whether or not the mixer instance returned by the\n         * `mixitup()` factory function should expose private properties and methods.\n         *\n         * By default, mixer instances only expose their public API, but enabling\n         * debug mode will give you access to various mixer internals which may aid\n         * in debugging, or the authoring of extensions.\n         *\n         * @example <caption>Example: Enabling debug mode</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     debug: {\n         *         enable: true\n         *     }\n         * });\n         *\n         * // Private properties and methods will now be visible on the mixer instance:\n         *\n         * console.log(mixer);\n         *\n         * @name        enable\n         * @memberof    mixitup.Config.debug\n         * @instance\n         * @type        {boolean}\n         * @default     false\n         */\n\n        this.enable = false;\n\n        /**\n         * A boolean dictating whether or not warnings should be shown when various\n         * common gotchas occur.\n         *\n         * Warnings are intended to provide insights during development when something\n         * occurs that is not a fatal, but may indicate an issue with your integration,\n         * and are therefore turned on by default. However, you may wish to disable\n         * them in production.\n         *\n         * @example <caption>Example 1: Disabling warnings</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     debug: {\n         *         showWarnings: false\n         *     }\n         * });\n         *\n         * @example <caption>Example 2: Disabling warnings based on environment</caption>\n         *\n         * var showWarnings = myAppConfig.environment === 'development' ? true : false;\n         *\n         * var mixer = mixitup(containerEl, {\n         *     debug: {\n         *         showWarnings: showWarnings\n         *     }\n         * });\n         *\n         * @name        showWarnings\n         * @memberof    mixitup.Config.debug\n         * @instance\n         * @type        {boolean}\n         * @default     true\n         */\n\n        this.showWarnings = true;\n\n        /**\n         * Used for server-side testing only.\n         *\n         * @private\n         * @name        fauxAsync\n         * @memberof    mixitup.Config.debug\n         * @instance\n         * @type        {boolean}\n         * @default     false\n         */\n\n        this.fauxAsync = false;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigDebug);\n\n    mixitup.ConfigDebug.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigDebug.prototype.constructor = mixitup.ConfigDebug;\n\n    /**\n     * A group of properties relating to the layout of the container.\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        layout\n     * @namespace\n     * @public\n     * @since       3.0.0\n     */\n\n    mixitup.ConfigLayout = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A boolean dictating whether or not mixitup should query all descendants\n         * of the container for targets, or only immediate children.\n         *\n         * By default, mixitup will query all descendants matching the\n         * `selectors.target` selector when indexing targets upon instantiation.\n         * This allows for targets to be nested inside a sub-container which is\n         * useful when ring-fencing targets from locally scoped controls in your\n         * markup (see `controls.scope`).\n         *\n         * However, if you are building a more complex UI requiring the nesting\n         * of mixers within mixers, you will most likely want to limit targets to\n         * immediate children of the container by setting this property to `false`.\n         *\n         * @example <caption>Example: Restricting targets to immediate children</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     layout: {\n         *         allowNestedTargets: false\n         *     }\n         * });\n         *\n         * @name        allowNestedTargets\n         * @memberof    mixitup.Config.layout\n         * @instance\n         * @type        {boolean}\n         * @default     true\n         */\n\n        this.allowNestedTargets = true;\n\n        /**\n         * A string specifying an optional class name to apply to the container when in\n         * its default state.\n         *\n         * By changing this class name or adding a class name to the container via the\n         * `.changeLayout()` API method, the CSS layout of the container can be changed,\n         * and MixItUp will attemp to gracefully animate the container and its targets\n         * between states.\n         *\n         * @example <caption>Example 1: Specifying a container class name</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     layout: {\n         *         containerClassName: 'grid'\n         *     }\n         * });\n         *\n         * @example <caption>Example 2: Changing the default class name with `.changeLayout()`</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     layout: {\n         *         containerClassName: 'grid'\n         *     }\n         * });\n         *\n         * mixer.changeLayout('list')\n         *     .then(function(state) {\n         *          console.log(state.activeContainerClass); // \"list\"\n         *     });\n         *\n         * @name        containerClassName\n         * @memberof    mixitup.Config.layout\n         * @instance\n         * @type        {string}\n         * @default     ''\n         */\n\n        this.containerClassName = '';\n\n        /**\n         * A reference to a non-target sibling element after which to insert targets\n         * when there are no targets in the container.\n         *\n         * @example <caption>Example: Setting a `siblingBefore` reference element</caption>\n         *\n         * var addButton = containerEl.querySelector('button');\n         *\n         * var mixer = mixitup(containerEl, {\n         *     layout: {\n         *         siblingBefore: addButton\n         *     }\n         * });\n         *\n         * @name        siblingBefore\n         * @memberof    mixitup.Config.layout\n         * @instance\n         * @type        {HTMLElement}\n         * @default     null\n         */\n\n        this.siblingBefore = null;\n\n        /**\n         * A reference to a non-target sibling element before which to insert targets\n         * when there are no targets in the container.\n         *\n         * @example <caption>Example: Setting an `siblingAfter` reference element</caption>\n         *\n         * var gap = containerEl.querySelector('.gap');\n         *\n         * var mixer = mixitup(containerEl, {\n         *     layout: {\n         *         siblingAfter: gap\n         *     }\n         * });\n         *\n         * @name        siblingAfter\n         * @memberof    mixitup.Config.layout\n         * @instance\n         * @type        {HTMLElement}\n         * @default     null\n         */\n\n        this.siblingAfter = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigLayout);\n\n    mixitup.ConfigLayout.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigLayout.prototype.constructor = mixitup.ConfigLayout;\n\n    /**\n     * A group of properties defining the initial state of the mixer on load (instantiation).\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        load\n     * @namespace\n     * @public\n     * @since       2.0.0\n     */\n\n    mixitup.ConfigLoad = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A string defining any filtering to be statically applied to the mixer on load.\n         * As per the `.filter()` API, this can be any valid selector string, or the\n         * values `'all'` or `'none'`.\n         *\n         * @example <caption>Example 1: Defining an initial filter selector to be applied on load</caption>\n         *\n         * // The mixer will show only those targets matching '.category-a' on load.\n         *\n         * var mixer = mixitup(containerEl, {\n         *     load: {\n         *         filter: '.category-a'\n         *     }\n         * });\n         *\n         * @example <caption>Example 2: Hiding all targets on load</caption>\n         *\n         * // The mixer will show hide all targets on load.\n         *\n         * var mixer = mixitup(containerEl, {\n         *     load: {\n         *         filter: 'none'\n         *     }\n         * });\n         *\n         * @name        filter\n         * @memberof    mixitup.Config.load\n         * @instance\n         * @type        {string}\n         * @default     'all'\n         */\n\n        this.filter = 'all';\n\n        /**\n         * A string defining any sorting to be statically applied to the mixer on load.\n         * As per the `.sort()` API, this should be a valid \"sort string\" made up of\n         * an attribute to sort by (or `'default'`) followed by an optional sorting\n         * order, or the value `'random'`;\n         *\n         * @example <caption>Example: Defining sorting to be applied on load</caption>\n         *\n         * // The mixer will sort the container by the value of the `data-published-date`\n         * // attribute, in descending order.\n         *\n         * var mixer = mixitup(containerEl, {\n         *     load: {\n         *         sort: 'published-date:desc'\n         *     }\n         * });\n         *\n         * @name        sort\n         * @memberof    mixitup.Config.load\n         * @instance\n         * @type        {string}\n         * @default     'default:asc'\n         */\n\n        this.sort = 'default:asc';\n\n        /**\n         * An array of objects representing the underlying data of any pre-rendered targets,\n         * when using the `.dataset()` API.\n         *\n         * NB: If targets are pre-rendered when the mixer is instantiated, this must be set.\n         *\n         * @example <caption>Example: Defining the initial underyling dataset</caption>\n         *\n         * var myDataset = [\n         *     {\n         *         id: 0,\n         *         title: \"Blog Post Title 0\",\n         *         ...\n         *     },\n         *     {\n         *         id: 1,\n         *         title: \"Blog Post Title 1\",\n         *         ...\n         *     }\n         * ];\n         *\n         * var mixer = mixitup(containerEl, {\n         *     data: {\n         *         uidKey: 'id'\n         *     },\n         *     load: {\n         *         dataset: myDataset\n         *     }\n         * });\n         *\n         * @name        dataset\n         * @memberof    mixitup.Config.load\n         * @instance\n         * @type        {Array.<object>}\n         * @default     null\n         */\n\n        this.dataset = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigLoad);\n\n    mixitup.ConfigLoad.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigLoad.prototype.constructor = mixitup.ConfigLoad;\n\n    /**\n     * A group of properties defining the selectors used to query elements within a mixitup container.\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        selectors\n     * @namespace\n     * @public\n     * @since       3.0.0\n     */\n\n    mixitup.ConfigSelectors = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A selector string used to query and index target elements within the container.\n         *\n         * By default, the class selector `'.mix'` is used, but this can be changed to an\n         * attribute or element selector to match the style of your project.\n         *\n         * @example <caption>Example 1: Changing the target selector</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     selectors: {\n         *         target: '.portfolio-item'\n         *     }\n         * });\n         *\n         * @example <caption>Example 2: Using an attribute selector as a target selector</caption>\n         *\n         * // The mixer will search for any children with the attribute `data-ref=\"mix\"`\n         *\n         * var mixer = mixitup(containerEl, {\n         *     selectors: {\n         *         target: '[data-ref=\"mix\"]'\n         *     }\n         * });\n         *\n         * @name        target\n         * @memberof    mixitup.Config.selectors\n         * @instance\n         * @type        {string}\n         * @default     '.mix'\n         */\n\n        this.target = '.mix';\n\n        /**\n         * A optional selector string used to add further specificity to the querying of control elements,\n         * in addition to their mandatory data attribute (e.g. `data-filter`, `data-toggle`, `data-sort`).\n         *\n         * This can be used if other elements in your document must contain the above attributes\n         * (e.g. for use in third-party scripts), and would otherwise interfere with MixItUp. Adding\n         * an additional `control` selector of your choice allows MixItUp to restrict event handling\n         * to only those elements matching the defined selector.\n         *\n         * @name        control\n         * @memberof    mixitup.Config.selectors\n         * @instance\n         * @type        {string}\n         * @default     ''\n         *\n         * @example <caption>Example 1: Adding a `selectors.control` selector</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     selectors: {\n         *         control: '.mixitup-control'\n         *     }\n         * });\n         *\n         * // Will not be handled:\n         * // <button data-filter=\".category-a\"></button>\n         *\n         * // Will be handled:\n         * // <button class=\"mixitup-control\" data-filter=\".category-a\"></button>\n         */\n\n        this.control = '';\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigSelectors);\n\n    mixitup.ConfigSelectors.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigSelectors.prototype.constructor = mixitup.ConfigSelectors;\n\n    /**\n     * A group of optional render functions for creating and updating elements.\n     *\n     * All render functions receive a data object, and should return a valid HTML string.\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        render\n     * @namespace\n     * @public\n     * @since       3.0.0\n     */\n\n    mixitup.ConfigRender = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A function returning an HTML string representing a target element, or a reference to a\n         * single DOM element.\n         *\n         * The function is invoked as part of the `.dataset()` API, whenever a new item is added\n         * to the dataset, or an item in the dataset changes (if `dataset.dirtyCheck` is enabled).\n         *\n         * The function receives the relevant dataset item as its first parameter.\n         *\n         * @example <caption>Example 1: Using string concatenation</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     render: {\n         *         target: function(item) {\n         *             return (\n         *                 '&lt;div class=\"mix\"&gt;' +\n         *                     '&lt;h2&gt;' + item.title + '&lt;/h2&gt;' +\n         *                 '&lt;/div&gt;'\n         *             );\n         *         }\n         *     }\n         * });\n         *\n         * @example <caption>Example 2: Using an ES2015 template literal</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     render: {\n         *         target: function(item) {\n         *             return (\n         *                 `&lt;div class=\"mix\"&gt;\n         *                     &lt;h2&gt;${item.title}&lt;/h2&gt;\n         *                  &lt;/div&gt;`\n         *             );\n         *         }\n         *     }\n         * });\n         *\n         * @example <caption>Example 3: Using a Handlebars template</caption>\n         *\n         * var targetTemplate = Handlebars.compile('&lt;div class=\"mix\"&gt;&lt;h2&gt;{{title}}&lt;/h2&gt;&lt;/div&gt;');\n         *\n         * var mixer = mixitup(containerEl, {\n         *     render: {\n         *         target: targetTemplate\n         *     }\n         * });\n         *\n         * @example <caption>Example 4: Returning a DOM element</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     render: {\n         *         target: function(item) {\n         *              // Create a single element using your framework's built-in renderer\n         *\n         *              var el = ...\n         *\n         *              return el;\n         *         }\n         *     }\n         * });\n         *\n         * @name        target\n         * @memberof    mixitup.Config.render\n         * @instance\n         * @type        {function}\n         * @default     'null'\n         */\n\n        this.target = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigRender);\n\n    mixitup.ConfigRender.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigRender.prototype.constructor = mixitup.ConfigRender;\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.ConfigTemplates = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigTemplates);\n\n    mixitup.ConfigTemplates.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigTemplates.prototype.constructor = mixitup.ConfigTemplates;\n\n    /**\n     * `mixitup.Config` is an interface used for customising the functionality of a\n     * mixer instance. It is organised into several semantically distinct sub-objects,\n     * each one pertaining to a particular aspect of MixItUp functionality.\n     *\n     * An object literal containing any or all of the available properies,\n     * known as the \"configuration object\", can be passed as the second parameter to\n     * the `mixitup` factory function when creating a mixer instance to customise its\n     * functionality as needed.\n     *\n     * If no configuration object is passed, the mixer instance will take on the default\n     * configuration values detailed below.\n     *\n     * @example <caption>Example 1: Creating and passing the configuration object</caption>\n     * // Create a configuration object with desired values\n     *\n     * var config = {\n     *     animation: {\n     *         enable: false\n     *     },\n     *     selectors: {\n     *         target: '.item'\n     *     }\n     * };\n     *\n     * // Pass the configuration object to the mixitup factory function\n     *\n     * var mixer = mixitup(containerEl, config);\n     *\n     * @example <caption>Example 2: Passing the configuration object inline</caption>\n     * // Typically, the configuration object is passed inline for brevity.\n     *\n     * var mixer = mixitup(containerEl, {\n     *     controls: {\n     *         live: true,\n     *         toggleLogic: 'and'\n     *     }\n     * });\n     *\n     *\n     * @constructor\n     * @memberof    mixitup\n     * @namespace\n     * @public\n     * @since       2.0.0\n     */\n\n    mixitup.Config = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.animation = new mixitup.ConfigAnimation();\n        this.behavior = new mixitup.ConfigBehavior();\n        this.callbacks = new mixitup.ConfigCallbacks();\n        this.controls = new mixitup.ConfigControls();\n        this.classNames = new mixitup.ConfigClassNames();\n        this.data = new mixitup.ConfigData();\n        this.debug = new mixitup.ConfigDebug();\n        this.layout = new mixitup.ConfigLayout();\n        this.load = new mixitup.ConfigLoad();\n        this.selectors = new mixitup.ConfigSelectors();\n        this.render = new mixitup.ConfigRender();\n        this.templates = new mixitup.ConfigTemplates();\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.Config);\n\n    mixitup.Config.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.Config.prototype.constructor = mixitup.Config;\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.MixerDom = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.document = null;\n        this.body = null;\n        this.container = null;\n        this.parent = null;\n        this.targets = [];\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.MixerDom);\n\n    mixitup.MixerDom.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.MixerDom.prototype.constructor = mixitup.MixerDom;\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.UiClassNames = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.base = '';\n        this.active = '';\n        this.disabled = '';\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.UiClassNames);\n\n    mixitup.UiClassNames.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.UiClassNames.prototype.constructor = mixitup.UiClassNames;\n\n    /**\n     * An object into which all arbitrary arguments sent to '.dataset()' are mapped.\n     *\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.CommandDataset = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.dataset = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.CommandDataset);\n\n    mixitup.CommandDataset.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.CommandDataset.prototype.constructor = mixitup.CommandDataset;\n\n    /**\n     * An object into which all arbitrary arguments sent to '.multimix()' are mapped.\n     *\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.CommandMultimix = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.filter = null;\n        this.sort = null;\n        this.insert = null;\n        this.remove = null;\n        this.changeLayout = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.CommandMultimix);\n\n    mixitup.CommandMultimix.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.CommandMultimix.prototype.constructor = mixitup.CommandMultimix;\n\n    /**\n     * An object into which all arbitrary arguments sent to '.filter()' are mapped.\n     *\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.CommandFilter = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.selector = '';\n        this.collection = null;\n        this.action = 'show'; // enum: ['show', 'hide']\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.CommandFilter);\n\n    mixitup.CommandFilter.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.CommandFilter.prototype.constructor = mixitup.CommandFilter;\n\n    /**\n     * An object into which all arbitrary arguments sent to '.sort()' are mapped.\n     *\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.CommandSort = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.sortString = '';\n        this.attribute = '';\n        this.order = 'asc';\n        this.collection = null;\n        this.next = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.CommandSort);\n\n    mixitup.CommandSort.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.CommandSort.prototype.constructor = mixitup.CommandSort;\n\n    /**\n     * An object into which all arbitrary arguments sent to '.insert()' are mapped.\n     *\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.CommandInsert = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.index = 0;\n        this.collection = [];\n        this.position = 'before'; // enum: ['before', 'after']\n        this.sibling = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.CommandInsert);\n\n    mixitup.CommandInsert.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.CommandInsert.prototype.constructor = mixitup.CommandInsert;\n\n    /**\n     * An object into which all arbitrary arguments sent to '.remove()' are mapped.\n     *\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.CommandRemove = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.targets = [];\n        this.collection = [];\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.CommandRemove);\n\n    mixitup.CommandRemove.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.CommandRemove.prototype.constructor = mixitup.CommandRemove;\n\n    /**\n     * An object into which all arbitrary arguments sent to '.changeLayout()' are mapped.\n     *\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.CommandChangeLayout = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.containerClassName = '';\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.CommandChangeLayout);\n\n    mixitup.CommandChangeLayout.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.CommandChangeLayout.prototype.constructor = mixitup.CommandChangeLayout;\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     * @param       {string}        type\n     * @param       {string}        selector\n     * @param       {boolean}       [live]\n     * @param       {string}        [parent]\n     *     An optional string representing the name of the mixer.dom property containing a reference to a parent element.\n     */\n\n    mixitup.ControlDefinition = function (type, selector, live, parent) {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.type = type;\n        this.selector = selector;\n        this.live = live || false;\n        this.parent = parent || '';\n\n        this.callActions('afterConstruct');\n\n        h.freeze(this);\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ControlDefinition);\n\n    mixitup.ControlDefinition.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ControlDefinition.prototype.constructor = mixitup.ControlDefinition;\n\n    mixitup.controlDefinitions = [];\n\n    mixitup.controlDefinitions.push(new mixitup.ControlDefinition('multimix', '[data-filter][data-sort]'));\n    mixitup.controlDefinitions.push(new mixitup.ControlDefinition('filter', '[data-filter]'));\n    mixitup.controlDefinitions.push(new mixitup.ControlDefinition('sort', '[data-sort]'));\n    mixitup.controlDefinitions.push(new mixitup.ControlDefinition('toggle', '[data-toggle]'));\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.Control = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.el = null;\n        this.selector = '';\n        this.bound = [];\n        this.pending = -1;\n        this.type = '';\n        this.status = 'inactive'; // enum: ['inactive', 'active', 'disabled', 'live']\n        this.filter = '';\n        this.sort = '';\n        this.canDisable = false;\n        this.handler = null;\n        this.classNames = new mixitup.UiClassNames();\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.Control);\n\n    mixitup.Control.prototype = Object.create(mixitup.Base.prototype);\n\n    h.extend(mixitup.Control.prototype,\n        /** @lends mixitup.Control */\n        {\n            constructor: mixitup.Control,\n\n            /**\n             * @private\n             * @param {HTMLElement} el\n             * @param {string}      type\n             * @param {string}      selector\n             */\n\n            init: function (el, type, selector) {\n                var self = this;\n\n                this.callActions('beforeInit', arguments);\n\n                self.el = el;\n                self.type = type;\n                self.selector = selector;\n\n                if (self.selector) {\n                    self.status = 'live';\n                } else {\n                    self.canDisable = typeof self.el.disable === 'boolean';\n\n                    switch (self.type) {\n                        case 'filter':\n                            self.filter = self.el.getAttribute('data-filter');\n\n                            break;\n                        case 'toggle':\n                            self.filter = self.el.getAttribute('data-toggle');\n\n                            break;\n                        case 'sort':\n                            self.sort = self.el.getAttribute('data-sort');\n\n                            break;\n                        case 'multimix':\n                            self.filter = self.el.getAttribute('data-filter');\n                            self.sort = self.el.getAttribute('data-sort');\n\n                            break;\n                    }\n                }\n\n                self.bindClick();\n\n                mixitup.controls.push(self);\n\n                this.callActions('afterInit', arguments);\n            },\n\n            /**\n             * @private\n             * @param  {mixitup.Mixer} mixer\n             * @return {boolean}\n             */\n\n            isBound: function (mixer) {\n                var self = this,\n                    isBound = false;\n\n                this.callActions('beforeIsBound', arguments);\n\n                isBound = self.bound.indexOf(mixer) > -1;\n\n                return self.callFilters('afterIsBound', isBound, arguments);\n            },\n\n            /**\n             * @private\n             * @param  {mixitup.Mixer} mixer\n             * @return {void}\n             */\n\n            addBinding: function (mixer) {\n                var self = this;\n\n                this.callActions('beforeAddBinding', arguments);\n\n                if (!self.isBound()) {\n                    self.bound.push(mixer);\n                }\n\n                this.callActions('afterAddBinding', arguments);\n            },\n\n            /**\n             * @private\n             * @param  {mixitup.Mixer} mixer\n             * @return {void}\n             */\n\n            removeBinding: function (mixer) {\n                var self = this,\n                    removeIndex = -1;\n\n                this.callActions('beforeRemoveBinding', arguments);\n\n                if ((removeIndex = self.bound.indexOf(mixer)) > -1) {\n                    self.bound.splice(removeIndex, 1);\n                }\n\n                if (self.bound.length < 1) {\n                    // No bindings exist, unbind event click handlers\n\n                    self.unbindClick();\n\n                    // Remove from `mixitup.controls` list\n\n                    removeIndex = mixitup.controls.indexOf(self);\n\n                    mixitup.controls.splice(removeIndex, 1);\n\n                    if (self.status === 'active') {\n                        self.renderStatus(self.el, 'inactive');\n                    }\n                }\n\n                this.callActions('afterRemoveBinding', arguments);\n            },\n\n            /**\n             * @private\n             * @return {void}\n             */\n\n            bindClick: function () {\n                var self = this;\n\n                this.callActions('beforeBindClick', arguments);\n\n                self.handler = function (e) {\n                    self.handleClick(e);\n                };\n\n                h.on(self.el, 'click', self.handler);\n\n                this.callActions('afterBindClick', arguments);\n            },\n\n            /**\n             * @private\n             * @return {void}\n             */\n\n            unbindClick: function () {\n                var self = this;\n\n                this.callActions('beforeUnbindClick', arguments);\n\n                h.off(self.el, 'click', self.handler);\n\n                self.handler = null;\n\n                this.callActions('afterUnbindClick', arguments);\n            },\n\n            /**\n             * @private\n             * @param   {MouseEvent} e\n             * @return  {void}\n             */\n\n            handleClick: function (e) {\n                var self = this,\n                    button = null,\n                    mixer = null,\n                    isActive = false,\n                    returnValue = void (0),\n                    command = {},\n                    clone = null,\n                    commands = [],\n                    i = -1;\n\n                this.callActions('beforeHandleClick', arguments);\n\n                this.pending = 0;\n\n                mixer = self.bound[0];\n\n                if (!self.selector) {\n                    button = self.el;\n                } else {\n                    button = h.closestParent(e.target, mixer.config.selectors.control + self.selector, true, mixer.dom.document);\n                }\n\n                if (!button) {\n                    self.callActions('afterHandleClick', arguments);\n\n                    return;\n                }\n\n                switch (self.type) {\n                    case 'filter':\n                        command.filter = self.filter || button.getAttribute('data-filter');\n\n                        break;\n                    case 'sort':\n                        command.sort = self.sort || button.getAttribute('data-sort');\n\n                        break;\n                    case 'multimix':\n                        command.filter = self.filter || button.getAttribute('data-filter');\n                        command.sort = self.sort || button.getAttribute('data-sort');\n\n                        break;\n                    case 'toggle':\n                        command.filter = self.filter || button.getAttribute('data-toggle');\n\n                        if (self.status === 'live') {\n                            isActive = h.hasClass(button, self.classNames.active);\n                        } else {\n                            isActive = self.status === 'active';\n                        }\n\n                        break;\n                }\n\n                for (i = 0; i < self.bound.length; i++) {\n                    // Create a clone of the command for each bound mixer instance\n\n                    clone = new mixitup.CommandMultimix();\n\n                    h.extend(clone, command);\n\n                    commands.push(clone);\n                }\n\n                commands = self.callFilters('commandsHandleClick', commands, arguments);\n\n                self.pending = self.bound.length;\n\n                for (i = 0; mixer = self.bound[i]; i++) {\n                    command = commands[i];\n\n                    if (!command) {\n                        // An extension may set a command null to indicate that the click should not be handled\n\n                        continue;\n                    }\n\n                    if (!mixer.lastClicked) {\n                        mixer.lastClicked = button;\n                    }\n\n                    mixitup.events.fire('mixClick', mixer.dom.container, {\n                        state: mixer.state,\n                        instance: mixer,\n                        originalEvent: e,\n                        control: mixer.lastClicked\n                    }, mixer.dom.document);\n\n                    if (typeof mixer.config.callbacks.onMixClick === 'function') {\n                        returnValue = mixer.config.callbacks.onMixClick.call(mixer.lastClicked, mixer.state, e, mixer);\n\n                        if (returnValue === false) {\n                            // User has returned `false` from the callback, so do not handle click\n\n                            continue;\n                        }\n                    }\n\n                    if (self.type === 'toggle') {\n                        isActive ? mixer.toggleOff(command.filter) : mixer.toggleOn(command.filter);\n                    } else {\n                        mixer.multimix(command);\n                    }\n                }\n\n                this.callActions('afterHandleClick', arguments);\n            },\n\n            /**\n             * @param   {object}          command\n             * @param   {Array<string>}   toggleArray\n             * @return  {void}\n             */\n\n            update: function (command, toggleArray) {\n                var self = this,\n                    actions = new mixitup.CommandMultimix();\n\n                self.callActions('beforeUpdate', arguments);\n\n                self.pending--;\n\n                self.pending = Math.max(0, self.pending);\n\n                if (self.pending > 0) return;\n\n                if (self.status === 'live') {\n                    // Live control (status unknown)\n\n                    self.updateLive(command, toggleArray);\n                } else {\n                    // Static control\n\n                    actions.sort = self.sort;\n                    actions.filter = self.filter;\n\n                    self.callFilters('actionsUpdate', actions, arguments);\n\n                    self.parseStatusChange(self.el, command, actions, toggleArray);\n                }\n\n                self.callActions('afterUpdate', arguments);\n            },\n\n            /**\n             * @param   {mixitup.CommandMultimix} command\n             * @param   {Array<string>}           toggleArray\n             * @return  {void}\n             */\n\n            updateLive: function (command, toggleArray) {\n                var self = this,\n                    controlButtons = null,\n                    actions = null,\n                    button = null,\n                    i = -1;\n\n                self.callActions('beforeUpdateLive', arguments);\n\n                if (!self.el) return;\n\n                controlButtons = self.el.querySelectorAll(self.selector);\n\n                for (i = 0; button = controlButtons[i]; i++) {\n                    actions = new mixitup.CommandMultimix();\n\n                    switch (self.type) {\n                        case 'filter':\n                            actions.filter = button.getAttribute('data-filter');\n\n                            break;\n                        case 'sort':\n                            actions.sort = button.getAttribute('data-sort');\n\n                            break;\n                        case 'multimix':\n                            actions.filter = button.getAttribute('data-filter');\n                            actions.sort = button.getAttribute('data-sort');\n\n                            break;\n                        case 'toggle':\n                            actions.filter = button.getAttribute('data-toggle');\n\n                            break;\n                    }\n\n                    actions = self.callFilters('actionsUpdateLive', actions, arguments);\n\n                    self.parseStatusChange(button, command, actions, toggleArray);\n                }\n\n                self.callActions('afterUpdateLive', arguments);\n            },\n\n            /**\n             * @param   {HTMLElement}             button\n             * @param   {mixitup.CommandMultimix} command\n             * @param   {mixitup.CommandMultimix} actions\n             * @param   {Array<string>}           toggleArray\n             * @return  {void}\n             */\n\n            parseStatusChange: function (button, command, actions, toggleArray) {\n                var self = this,\n                    alias = '',\n                    toggle = '',\n                    i = -1;\n\n                self.callActions('beforeParseStatusChange', arguments);\n\n                switch (self.type) {\n                    case 'filter':\n                        if (command.filter === actions.filter) {\n                            self.renderStatus(button, 'active');\n                        } else {\n                            self.renderStatus(button, 'inactive');\n                        }\n\n                        break;\n                    case 'multimix':\n                        if (command.sort === actions.sort && command.filter === actions.filter) {\n                            self.renderStatus(button, 'active');\n                        } else {\n                            self.renderStatus(button, 'inactive');\n                        }\n\n                        break;\n                    case 'sort':\n                        if (command.sort.match(/:asc/g)) {\n                            alias = command.sort.replace(/:asc/g, '');\n                        }\n\n                        if (command.sort === actions.sort || alias === actions.sort) {\n                            self.renderStatus(button, 'active');\n                        } else {\n                            self.renderStatus(button, 'inactive');\n                        }\n\n                        break;\n                    case 'toggle':\n                        if (toggleArray.length < 1) self.renderStatus(button, 'inactive');\n\n                        if (command.filter === actions.filter) {\n                            self.renderStatus(button, 'active');\n                        }\n\n                        for (i = 0; i < toggleArray.length; i++) {\n                            toggle = toggleArray[i];\n\n                            if (toggle === actions.filter) {\n                                // Button matches one active toggle\n\n                                self.renderStatus(button, 'active');\n\n                                break;\n                            }\n\n                            self.renderStatus(button, 'inactive');\n                        }\n\n                        break;\n                }\n\n                self.callActions('afterParseStatusChange', arguments);\n            },\n\n            /**\n             * @param   {HTMLElement}   button\n             * @param   {string}        status\n             * @return  {void}\n             */\n\n            renderStatus: function (button, status) {\n                var self = this;\n\n                self.callActions('beforeRenderStatus', arguments);\n\n                switch (status) {\n                    case 'active':\n                        h.addClass(button, self.classNames.active);\n                        h.removeClass(button, self.classNames.disabled);\n\n                        if (self.canDisable) self.el.disabled = false;\n\n                        break;\n                    case 'inactive':\n                        h.removeClass(button, self.classNames.active);\n                        h.removeClass(button, self.classNames.disabled);\n\n                        if (self.canDisable) self.el.disabled = false;\n\n                        break;\n                    case 'disabled':\n                        if (self.canDisable) self.el.disabled = true;\n\n                        h.addClass(button, self.classNames.disabled);\n                        h.removeClass(button, self.classNames.active);\n\n                        break;\n                }\n\n                if (self.status !== 'live') {\n                    // Update the control's status propery if not live\n\n                    self.status = status;\n                }\n\n                self.callActions('afterRenderStatus', arguments);\n            }\n        });\n\n    mixitup.controls = [];\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.StyleData = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.x = 0;\n        this.y = 0;\n        this.top = 0;\n        this.right = 0;\n        this.bottom = 0;\n        this.left = 0;\n        this.width = 0;\n        this.height = 0;\n        this.marginRight = 0;\n        this.marginBottom = 0;\n        this.opacity = 0;\n        this.scale = new mixitup.TransformData();\n        this.translateX = new mixitup.TransformData();\n        this.translateY = new mixitup.TransformData();\n        this.translateZ = new mixitup.TransformData();\n        this.rotateX = new mixitup.TransformData();\n        this.rotateY = new mixitup.TransformData();\n        this.rotateZ = new mixitup.TransformData();\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.StyleData);\n\n    mixitup.StyleData.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.StyleData.prototype.constructor = mixitup.StyleData;\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.TransformData = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.value = 0;\n        this.unit = '';\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.TransformData);\n\n    mixitup.TransformData.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.TransformData.prototype.constructor = mixitup.TransformData;\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.TransformDefaults = function () {\n        mixitup.StyleData.apply(this);\n\n        this.callActions('beforeConstruct');\n\n        this.scale.value = 0.01;\n        this.scale.unit = '';\n\n        this.translateX.value = 20;\n        this.translateX.unit = 'px';\n\n        this.translateY.value = 20;\n        this.translateY.unit = 'px';\n\n        this.translateZ.value = 20;\n        this.translateZ.unit = 'px';\n\n        this.rotateX.value = 90;\n        this.rotateX.unit = 'deg';\n\n        this.rotateY.value = 90;\n        this.rotateY.unit = 'deg';\n\n        this.rotateX.value = 90;\n        this.rotateX.unit = 'deg';\n\n        this.rotateZ.value = 180;\n        this.rotateZ.unit = 'deg';\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.TransformDefaults);\n\n    mixitup.TransformDefaults.prototype = Object.create(mixitup.StyleData.prototype);\n\n    mixitup.TransformDefaults.prototype.constructor = mixitup.TransformDefaults;\n\n    /**\n     * @private\n     * @static\n     * @since   3.0.0\n     * @type    {mixitup.TransformDefaults}\n     */\n\n    mixitup.transformDefaults = new mixitup.TransformDefaults();\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.EventDetail = function () {\n        this.state = null;\n        this.futureState = null;\n        this.instance = null;\n        this.originalEvent = null;\n    };\n\n    /**\n     * The `mixitup.Events` class contains all custom events dispatched by MixItUp at various\n     * points within the lifecycle of a mixer operation.\n     *\n     * Each event is analogous to the callback function of the same name defined in\n     * the `callbacks` configuration object, and is triggered immediately before it.\n     *\n     * Events are always triggered from the container element on which MixItUp is instantiated\n     * upon.\n     *\n     * As with any event, registered event handlers receive the event object as a parameter\n     * which includes a `detail` property containting references to the current `state`,\n     * the `mixer` instance, and other event-specific properties described below.\n     *\n     * @constructor\n     * @namespace\n     * @memberof    mixitup\n     * @public\n     * @since       3.0.0\n     */\n\n    mixitup.Events = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A custom event triggered immediately after any MixItUp operation is requested\n         * and before animations have begun.\n         *\n         * The `mixStart` event also exposes a `futureState` property via the\n         * `event.detail` object, which represents the final state of the mixer once\n         * the requested operation has completed.\n         *\n         * @name        mixStart\n         * @memberof    mixitup.Events\n         * @static\n         * @type        {CustomEvent}\n         */\n\n        this.mixStart = null;\n\n        /**\n         * A custom event triggered when a MixItUp operation is requested while another\n         * operation is in progress, and the animation queue is full, or queueing\n         * is disabled.\n         *\n         * @name        mixBusy\n         * @memberof    mixitup.Events\n         * @static\n         * @type        {CustomEvent}\n         */\n\n        this.mixBusy = null;\n\n        /**\n         * A custom event triggered after any MixItUp operation has completed, and the\n         * state has been updated.\n         *\n         * @name        mixEnd\n         * @memberof    mixitup.Events\n         * @static\n         * @type        {CustomEvent}\n         */\n\n        this.mixEnd = null;\n\n        /**\n         * A custom event triggered whenever a filter operation \"fails\", i.e. no targets\n         * could be found matching the requested filter.\n         *\n         * @name        mixFail\n         * @memberof    mixitup.Events\n         * @static\n         * @type        {CustomEvent}\n         */\n\n        this.mixFail = null;\n\n        /**\n         * A custom event triggered whenever a MixItUp control is clicked, and before its\n         * respective operation is requested.\n         *\n         * This event also exposes an `originalEvent` property via the `event.detail`\n         * object, which holds a reference to the original click event.\n         *\n         * @name        mixClick\n         * @memberof    mixitup.Events\n         * @static\n         * @type        {CustomEvent}\n         */\n\n        this.mixClick = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.Events);\n\n    mixitup.Events.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.Events.prototype.constructor = mixitup.Events;\n\n    /**\n     * @private\n     * @param   {string}      eventType\n     * @param   {Element}     el\n     * @param   {object}      detail\n     * @param   {Document}    [doc]\n     */\n\n    mixitup.Events.prototype.fire = function (eventType, el, detail, doc) {\n        var self = this,\n            event = null,\n            eventDetail = new mixitup.EventDetail();\n\n        self.callActions('beforeFire', arguments);\n\n        if (typeof self[eventType] === 'undefined') {\n            throw new Error('Event type \"' + eventType + '\" not found.');\n        }\n\n        eventDetail.state = new mixitup.State();\n\n        h.extend(eventDetail.state, detail.state);\n\n        if (detail.futureState) {\n            eventDetail.futureState = new mixitup.State();\n\n            h.extend(eventDetail.futureState, detail.futureState);\n        }\n\n        eventDetail.instance = detail.instance;\n\n        if (detail.originalEvent) {\n            eventDetail.originalEvent = detail.originalEvent;\n        }\n\n        event = h.getCustomEvent(eventType, eventDetail, doc);\n\n        self.callFilters('eventFire', event, arguments);\n\n        el.dispatchEvent(event);\n    };\n\n    // Asign a singleton instance to `mixitup.events`:\n\n    mixitup.events = new mixitup.Events();\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.QueueItem = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.args = [];\n        this.instruction = null;\n        this.triggerElement = null;\n        this.deferred = null;\n        this.isToggling = false;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.QueueItem);\n\n    mixitup.QueueItem.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.QueueItem.prototype.constructor = mixitup.QueueItem;\n\n    /**\n     * The `mixitup.Mixer` class is used to hold discreet, user-configured\n     * instances of MixItUp on a provided container element.\n     *\n     * Mixer instances are returned whenever the `mixitup()` factory function is called,\n     * which expose a range of methods enabling API-based filtering, sorting,\n     * insertion, removal and more.\n     *\n     * @constructor\n     * @namespace\n     * @memberof    mixitup\n     * @public\n     * @since       3.0.0\n     */\n\n    mixitup.Mixer = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.config = new mixitup.Config();\n\n        this.id = '';\n\n        this.isBusy = false;\n        this.isToggling = false;\n        this.incPadding = true;\n\n        this.controls = [];\n        this.targets = [];\n        this.origOrder = [];\n        this.cache = {};\n\n        this.toggleArray = [];\n\n        this.targetsMoved = 0;\n        this.targetsImmovable = 0;\n        this.targetsBound = 0;\n        this.targetsDone = 0;\n\n        this.staggerDuration = 0;\n        this.effectsIn = null;\n        this.effectsOut = null;\n        this.transformIn = [];\n        this.transformOut = [];\n        this.queue = [];\n\n        this.state = null;\n        this.lastOperation = null;\n        this.lastClicked = null;\n        this.userCallback = null;\n        this.userDeferred = null;\n\n        this.dom = new mixitup.MixerDom();\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.Mixer);\n\n    mixitup.Mixer.prototype = Object.create(mixitup.Base.prototype);\n\n    h.extend(mixitup.Mixer.prototype,\n        /** @lends mixitup.Mixer */\n        {\n            constructor: mixitup.Mixer,\n\n            /**\n             * @private\n             * @instance\n             * @since 3.0.0\n             * @param {HTMLElement} container\n             * @param {HTMLElement} document\n             * @param {string}      id\n             * @param {object}      [config]\n             */\n\n            attach: function (container, document, id, config) {\n                var self = this,\n                    target = null,\n                    i = -1;\n\n                self.callActions('beforeAttach', arguments);\n\n                self.id = id;\n\n                if (config) {\n                    h.extend(self.config, config, true, true);\n                }\n\n                self.sanitizeConfig();\n\n                self.cacheDom(container, document);\n\n                if (self.config.layout.containerClassName) {\n                    h.addClass(self.dom.container, self.config.layout.containerClassName);\n                }\n\n                if (!mixitup.features.has.transitions) {\n                    self.config.animation.enable = false;\n                }\n\n                if (typeof window.console === 'undefined') {\n                    self.config.debug.showWarnings = false;\n                }\n\n                if (self.config.data.uidKey) {\n                    // If the dataset API is in use, force disable controls\n\n                    self.config.controls.enable = false;\n                }\n\n                self.indexTargets();\n\n                self.state = self.getInitialState();\n\n                for (i = 0; target = self.lastOperation.toHide[i]; i++) {\n                    target.hide();\n                }\n\n                if (self.config.controls.enable) {\n                    self.initControls();\n\n                    self.buildToggleArray(null, self.state);\n\n                    self.updateControls({\n                        filter: self.state.activeFilter,\n                        sort: self.state.activeSort\n                    });\n                }\n\n                self.parseEffects();\n\n                self.callActions('afterAttach', arguments);\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since 3.0.0\n             * @return {void}\n             */\n\n            sanitizeConfig: function () {\n                var self = this;\n\n                self.callActions('beforeSanitizeConfig', arguments);\n\n                // Sanitize enum/string config options\n\n                self.config.controls.scope = self.config.controls.scope.toLowerCase().trim();\n                self.config.controls.toggleLogic = self.config.controls.toggleLogic.toLowerCase().trim();\n                self.config.controls.toggleDefault = self.config.controls.toggleDefault.toLowerCase().trim();\n\n                self.config.animation.effects = self.config.animation.effects.trim();\n\n                self.callActions('afterSanitizeConfig', arguments);\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since   3.0.0\n             * @return  {mixitup.State}\n             */\n\n            getInitialState: function () {\n                var self = this,\n                    state = new mixitup.State(),\n                    operation = new mixitup.Operation();\n\n                self.callActions('beforeGetInitialState', arguments);\n\n                // Map initial values into a mock state object in order to construct an operation\n\n                state.activeContainerClassName = self.config.layout.containerClassName;\n\n                if (self.config.load.dataset) {\n                    // Dataset API\n\n                    if (!self.config.data.uidKey || typeof self.config.data.uidKey !== 'string') {\n                        throw new TypeError(mixitup.messages.errorConfigDataUidKeyNotSet());\n                    }\n\n                    operation.startDataset = operation.newDataset = state.activeDataset = self.config.load.dataset.slice();\n                    operation.startContainerClassName = operation.newContainerClassName = state.activeContainerClassName;\n                    operation.show = self.targets.slice();\n\n                    state = self.callFilters('stateGetInitialState', state, arguments);\n                } else {\n                    // DOM API\n\n                    state.activeFilter = self.parseFilterArgs([self.config.load.filter]).command;\n                    state.activeSort = self.parseSortArgs([self.config.load.sort]).command;\n                    state.totalTargets = self.targets.length;\n\n                    state = self.callFilters('stateGetInitialState', state, arguments);\n\n                    if (\n                        state.activeSort.collection || state.activeSort.attribute ||\n                        state.activeSort.order === 'random' || state.activeSort.order === 'desc'\n                    ) {\n                        // Sorting on load\n\n                        operation.newSort = state.activeSort;\n\n                        self.sortOperation(operation);\n\n                        self.printSort(false, operation);\n\n                        self.targets = operation.newOrder;\n                    } else {\n                        operation.startOrder = operation.newOrder = self.targets;\n                    }\n\n                    operation.startFilter = operation.newFilter = state.activeFilter;\n                    operation.startSort = operation.newSort = state.activeSort;\n                    operation.startContainerClassName = operation.newContainerClassName = state.activeContainerClassName;\n\n                    if (operation.newFilter.selector === 'all') {\n                        operation.newFilter.selector = self.config.selectors.target;\n                    } else if (operation.newFilter.selector === 'none') {\n                        operation.newFilter.selector = '';\n                    }\n                }\n\n                operation = self.callFilters('operationGetInitialState', operation, [state]);\n\n                self.lastOperation = operation;\n\n                if (operation.newFilter) {\n                    self.filterOperation(operation);\n                }\n\n                state = self.buildState(operation);\n\n                return state;\n            },\n\n            /**\n             * Caches references of DOM elements neccessary for the mixer's functionality.\n             *\n             * @private\n             * @instance\n             * @since   3.0.0\n             * @param   {HTMLElement}       el\n             * @param   {HTMLHtmlElement}   document\n             * @return  {void}\n             */\n\n            cacheDom: function (el, document) {\n                var self = this;\n\n                self.callActions('beforeCacheDom', arguments);\n\n                self.dom.document = document;\n                self.dom.body = self.dom.document.querySelector('body');\n                self.dom.container = el;\n                self.dom.parent = el;\n\n                self.callActions('afterCacheDom', arguments);\n            },\n\n            /**\n             * Indexes all child elements of the mixer matching the `selectors.target`\n             * selector, instantiating a mixitup.Target for each one.\n             *\n             * @private\n             * @instance\n             * @since   3.0.0\n             * @return  {void}\n             */\n\n            indexTargets: function () {\n                var self = this,\n                    target = null,\n                    el = null,\n                    dataset = null,\n                    i = -1;\n\n                self.callActions('beforeIndexTargets', arguments);\n\n                self.dom.targets = self.config.layout.allowNestedTargets ?\n                    self.dom.container.querySelectorAll(self.config.selectors.target) :\n                    h.children(self.dom.container, self.config.selectors.target, self.dom.document);\n\n                self.dom.targets = h.arrayFromList(self.dom.targets);\n\n                self.targets = [];\n\n                if ((dataset = self.config.load.dataset) && dataset.length !== self.dom.targets.length) {\n                    throw new Error(mixitup.messages.errorDatasetPrerenderedMismatch());\n                }\n\n                if (self.dom.targets.length) {\n                    for (i = 0; el = self.dom.targets[i]; i++) {\n                        target = new mixitup.Target();\n\n                        target.init(el, self, dataset ? dataset[i] : void (0));\n\n                        target.isInDom = true;\n\n                        self.targets.push(target);\n                    }\n\n                    self.dom.parent = self.dom.targets[0].parentElement === self.dom.container ?\n                        self.dom.container :\n                        self.dom.targets[0].parentElement;\n                }\n\n                self.origOrder = self.targets;\n\n                self.callActions('afterIndexTargets', arguments);\n            },\n\n            initControls: function () {\n                var self = this,\n                    definition = '',\n                    controlElements = null,\n                    el = null,\n                    parent = null,\n                    delagators = null,\n                    control = null,\n                    i = -1,\n                    j = -1;\n\n                self.callActions('beforeInitControls', arguments);\n\n                switch (self.config.controls.scope) {\n                    case 'local':\n                        parent = self.dom.container;\n\n                        break;\n                    case 'global':\n                        parent = self.dom.document;\n\n                        break;\n                    default:\n                        throw new Error(mixitup.messages.errorConfigInvalidControlsScope());\n                }\n\n                for (i = 0; definition = mixitup.controlDefinitions[i]; i++) {\n                    if (self.config.controls.live || definition.live) {\n                        if (definition.parent) {\n                            delagators = self.dom[definition.parent];\n\n                            if (!delagators || delagators.length < 0) continue;\n\n                            if (typeof delagators.length !== 'number') {\n                                delagators = [delagators];\n                            }\n                        } else {\n                            delagators = [parent];\n                        }\n\n                        for (j = 0; (el = delagators[j]); j++) {\n                            control = self.getControl(el, definition.type, definition.selector);\n\n                            self.controls.push(control);\n                        }\n                    } else {\n                        controlElements = parent.querySelectorAll(self.config.selectors.control + definition.selector);\n\n                        for (j = 0; (el = controlElements[j]); j++) {\n                            control = self.getControl(el, definition.type, '');\n\n                            if (!control) continue;\n\n                            self.controls.push(control);\n                        }\n                    }\n                }\n\n                self.callActions('afterInitControls', arguments);\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since   3.0.0\n             * @param   {HTMLElement} el\n             * @param   {string}      type\n             * @param   {string}      selector\n             * @return  {mixitup.Control|null}\n             */\n\n            getControl: function (el, type, selector) {\n                var self = this,\n                    control = null,\n                    i = -1;\n\n                self.callActions('beforeGetControl', arguments);\n\n                if (!selector) {\n                    // Static controls only\n\n                    for (i = 0; control = mixitup.controls[i]; i++) {\n                        if (control.el === el && control.isBound(self)) {\n                            // Control already bound to this mixer (as another type).\n\n                            // NB: This prevents duplicate controls from being registered where a selector\n                            // might collide, eg: \"[data-filter]\" and \"[data-filter][data-sort]\"\n\n                            return self.callFilters('controlGetControl', null, arguments);\n                        } else if (control.el === el && control.type === type && control.selector === selector) {\n                            // Another mixer is already using this control, add this mixer as a binding\n\n                            control.addBinding(self);\n\n                            return self.callFilters('controlGetControl', control, arguments);\n                        }\n                    }\n                }\n\n                // Create new control\n\n                control = new mixitup.Control();\n\n                control.init(el, type, selector);\n\n                control.classNames.base = h.getClassname(self.config.classNames, type);\n                control.classNames.active = h.getClassname(self.config.classNames, type, self.config.classNames.modifierActive);\n                control.classNames.disabled = h.getClassname(self.config.classNames, type, self.config.classNames.modifierDisabled);\n\n                // Add a reference to this mixer as a binding\n\n                control.addBinding(self);\n\n                return self.callFilters('controlGetControl', control, arguments);\n            },\n\n            /**\n             * Creates a compound selector by joining the `toggleArray` value as per the\n             * defined toggle logic.\n             *\n             * @private\n             * @instance\n             * @since   3.0.0\n             * @return  {string}\n             */\n\n            getToggleSelector: function () {\n                var self = this,\n                    delineator = self.config.controls.toggleLogic === 'or' ? ', ' : '',\n                    toggleSelector = '';\n\n                self.callActions('beforeGetToggleSelector', arguments);\n\n                self.toggleArray = h.clean(self.toggleArray);\n\n                toggleSelector = self.toggleArray.join(delineator);\n\n                if (toggleSelector === '') {\n                    toggleSelector = self.config.controls.toggleDefault;\n                }\n\n                return self.callFilters('selectorGetToggleSelector', toggleSelector, arguments);\n            },\n\n            /**\n             * Breaks compound selector strings in an array of discreet selectors,\n             * as per the active `controls.toggleLogic` configuration option. Accepts\n             * either a dynamic command object, or a state object.\n             *\n             * @private\n             * @instance\n             * @since   2.0.0\n             * @param   {object}        [command]\n             * @param   {mixitup.State} [state]\n             * @return  {void}\n             */\n\n            buildToggleArray: function (command, state) {\n                var self = this,\n                    activeFilterSelector = '';\n\n                self.callActions('beforeBuildToggleArray', arguments);\n\n                if (command && command.filter) {\n                    activeFilterSelector = command.filter.selector.replace(/\\s/g, '');\n                } else if (state) {\n                    activeFilterSelector = state.activeFilter.selector.replace(/\\s/g, '');\n                } else {\n                    return;\n                }\n\n                if (activeFilterSelector === self.config.selectors.target || activeFilterSelector === 'all') {\n                    activeFilterSelector = '';\n                }\n\n                if (self.config.controls.toggleLogic === 'or') {\n                    self.toggleArray = activeFilterSelector.split(',');\n                } else {\n                    self.toggleArray = self.splitCompoundSelector(activeFilterSelector);\n                }\n\n                self.toggleArray = h.clean(self.toggleArray);\n\n                self.callActions('afterBuildToggleArray', arguments);\n            },\n\n            /**\n             * Takes a compound selector (e.g. `.cat-1.cat-2`, `[data-cat=\"1\"][data-cat=\"2\"]`)\n             * and breaks into its individual selectors.\n             *\n             * @private\n             * @instance\n             * @since   3.0.0\n             * @param   {string} compoundSelector\n             * @return  {string[]}\n             */\n\n            splitCompoundSelector: function (compoundSelector) {\n                // Break at a `.` or `[`, capturing the delineator\n\n                var partials = compoundSelector.split(/([\\.\\[])/g),\n                    toggleArray = [],\n                    selector = '',\n                    i = -1;\n\n                if (partials[0] === '') {\n                    partials.shift();\n                }\n\n                for (i = 0; i < partials.length; i++) {\n                    if (i % 2 === 0) {\n                        selector = '';\n                    }\n\n                    selector += partials[i];\n\n                    if (i % 2 !== 0) {\n                        toggleArray.push(selector);\n                    }\n                }\n\n                return toggleArray;\n            },\n\n            /**\n             * Updates controls to their active/inactive state based on the command or\n             * current state of the mixer.\n             *\n             * @private\n             * @instance\n             * @since   2.0.0\n             * @param   {object} command\n             * @return  {void}\n             */\n\n            updateControls: function (command) {\n                var self = this,\n                    control = null,\n                    output = new mixitup.CommandMultimix(),\n                    i = -1;\n\n                self.callActions('beforeUpdateControls', arguments);\n\n                // Sanitise to defaults\n\n                if (command.filter) {\n                    output.filter = command.filter.selector;\n                } else {\n                    output.filter = self.state.activeFilter.selector;\n                }\n\n                if (command.sort) {\n                    output.sort = self.buildSortString(command.sort);\n                } else {\n                    output.sort = self.buildSortString(self.state.activeSort);\n                }\n\n                if (output.filter === self.config.selectors.target) {\n                    output.filter = 'all';\n                }\n\n                if (output.filter === '') {\n                    output.filter = 'none';\n                }\n\n                h.freeze(output);\n\n                for (i = 0; control = self.controls[i]; i++) {\n                    control.update(output, self.toggleArray);\n                }\n\n                self.callActions('afterUpdateControls', arguments);\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since   3.0.0\n             * @param   {mixitup.CommandSort}   command\n             * @return  {string}\n             */\n\n            buildSortString: function (command) {\n                var self = this;\n                var output = '';\n\n                output += command.sortString;\n\n                if (command.next) {\n                    output += ' ' + self.buildSortString(command.next);\n                }\n\n                return output;\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since   3.0.0\n             * @param   {object}        command\n             * @param   {Operation}     operation\n             * @return  {Promise.<mixitup.State>}\n             */\n\n            insertTargets: function (command, operation) {\n                var self = this,\n                    nextSibling = null,\n                    insertionIndex = -1,\n                    frag = null,\n                    target = null,\n                    el = null,\n                    i = -1;\n\n                self.callActions('beforeInsertTargets', arguments);\n\n                if (typeof command.index === 'undefined') command.index = 0;\n\n                nextSibling = self.getNextSibling(command.index, command.sibling, command.position);\n                frag = self.dom.document.createDocumentFragment();\n\n                if (nextSibling) {\n                    insertionIndex = h.index(nextSibling, self.config.selectors.target);\n                } else {\n                    insertionIndex = self.targets.length;\n                }\n\n                if (command.collection) {\n                    for (i = 0; el = command.collection[i]; i++) {\n                        if (self.dom.targets.indexOf(el) > -1) {\n                            throw new Error(mixitup.messages.errorInsertPreexistingElement());\n                        }\n\n                        // Ensure elements are hidden when they are added to the DOM, so they can\n                        // be animated in gracefully\n\n                        el.style.display = 'none';\n\n                        frag.appendChild(el);\n                        frag.appendChild(self.dom.document.createTextNode(' '));\n\n                        if (!h.isElement(el, self.dom.document) || !el.matches(self.config.selectors.target)) continue;\n\n                        target = new mixitup.Target();\n\n                        target.init(el, self);\n\n                        target.isInDom = true;\n\n                        self.targets.splice(insertionIndex, 0, target);\n\n                        insertionIndex++;\n                    }\n\n                    self.dom.parent.insertBefore(frag, nextSibling);\n                }\n\n                // Since targets have been added, the original order must be updated\n\n                operation.startOrder = self.origOrder = self.targets;\n\n                self.callActions('afterInsertTargets', arguments);\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since   3.0.0\n             * @param   {Number}      [index]\n             * @param   {Element}     [sibling]\n             * @param   {string}      [position]\n             * @return  {Element}\n             */\n\n            getNextSibling: function (index, sibling, position) {\n                var self = this,\n                    element = null;\n\n                index = Math.max(index, 0);\n\n                if (sibling && position === 'before') {\n                    // Explicit sibling\n\n                    element = sibling;\n                } else if (sibling && position === 'after') {\n                    // Explicit sibling\n\n                    element = sibling.nextElementSibling || null;\n                } else if (self.targets.length > 0 && typeof index !== 'undefined') {\n                    // Index and targets exist\n\n                    element = (index < self.targets.length || !self.targets.length) ?\n                        self.targets[index].dom.el :\n                        self.targets[self.targets.length - 1].dom.el.nextElementSibling;\n                } else if (self.targets.length === 0 && self.dom.parent.children.length > 0) {\n                    // No targets but other siblings\n\n                    if (self.config.layout.siblingAfter) {\n                        element = self.config.layout.siblingAfter;\n                    } else if (self.config.layout.siblingBefore) {\n                        element = self.config.layout.siblingBefore.nextElementSibling;\n                    } else {\n                        self.dom.parent.children[0];\n                    }\n                } else {\n                    element === null;\n                }\n\n                return self.callFilters('elementGetNextSibling', element, arguments);\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since   2.0.0\n             * @param   {Operation}     operation\n             * @return  {void}\n             */\n\n            filterOperation: function (operation) {\n                var self = this,\n                    testResult = false,\n                    index = -1,\n                    action = '',\n                    target = null,\n                    i = -1;\n\n                self.callActions('beforeFilterOperation', arguments);\n\n                action = operation.newFilter.action;\n\n                for (i = 0; target = operation.newOrder[i]; i++) {\n                    if (operation.newFilter.collection) {\n                        // show via collection\n\n                        testResult = operation.newFilter.collection.indexOf(target.dom.el) > -1;\n                    } else {\n                        // show via selector\n\n                        if (operation.newFilter.selector === '') {\n                            testResult = false;\n                        } else {\n                            testResult = target.dom.el.matches(operation.newFilter.selector);\n                        }\n                    }\n\n                    self.evaluateHideShow(testResult, target, action, operation);\n                }\n\n                if (operation.toRemove.length) {\n                    for (i = 0; target = operation.show[i]; i++) {\n                        if (operation.toRemove.indexOf(target) > -1) {\n                            // If any shown targets should be removed, move them into the toHide array\n\n                            operation.show.splice(i, 1);\n\n                            if ((index = operation.toShow.indexOf(target)) > -1) {\n                                operation.toShow.splice(index, 1);\n                            }\n\n                            operation.toHide.push(target);\n                            operation.hide.push(target);\n\n                            i--;\n                        }\n                    }\n                }\n\n                operation.matching = operation.show.slice();\n\n                if (operation.show.length === 0 && operation.newFilter.selector !== '' && self.targets.length !== 0) {\n                    operation.hasFailed = true;\n                }\n\n                self.callActions('afterFilterOperation', arguments);\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since   3.0.0\n             * @param   {boolean}   testResult\n             * @param   {Element}   target\n             * @param   {string}    action\n             * @param   {Operation} operation\n             * @return  {void}\n             */\n\n            evaluateHideShow: function (testResult, target, action, operation) {\n                var self = this,\n                    filteredTestResult = false,\n                    args = Array.prototype.slice.call(arguments, 1);\n\n                filteredTestResult = self.callFilters('testResultEvaluateHideShow', testResult, args);\n\n                self.callActions('beforeEvaluateHideShow', arguments);\n\n                if (\n                    filteredTestResult === true && action === 'show' ||\n                    filteredTestResult === false && action === 'hide'\n                ) {\n                    operation.show.push(target);\n\n                    !target.isShown && operation.toShow.push(target);\n                } else {\n                    operation.hide.push(target);\n\n                    target.isShown && operation.toHide.push(target);\n                }\n\n                self.callActions('afterEvaluateHideShow', arguments);\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since   2.0.0\n             * @param   {Operation}     operation\n             * @return  {void}\n             */\n\n            sortOperation: function (operation) {\n                var self = this,\n                    newOrder = [],\n                    target = null,\n                    el = null,\n                    i = -1;\n\n                self.callActions('beforeSortOperation', arguments);\n\n                operation.startOrder = self.targets;\n\n                if (operation.newSort.collection) {\n                    // Sort by collection\n\n                    newOrder = [];\n\n                    for (i = 0; (el = operation.newSort.collection[i]); i++) {\n                        if (self.dom.targets.indexOf(el) < 0) {\n                            throw new Error(mixitup.messages.errorSortNonExistentElement());\n                        }\n\n                        target = new mixitup.Target();\n\n                        target.init(el, self);\n\n                        target.isInDom = true;\n\n                        newOrder.push(target);\n                    }\n\n                    operation.newOrder = newOrder;\n                } else if (operation.newSort.order === 'random') {\n                    // Sort random\n\n                    operation.newOrder = h.arrayShuffle(operation.startOrder);\n                } else if (operation.newSort.attribute === '') {\n                    // Sort by default\n\n                    operation.newOrder = self.origOrder.slice();\n\n                    if (operation.newSort.order === 'desc') {\n                        operation.newOrder.reverse();\n                    }\n                } else {\n                    // Sort by attribute\n\n                    operation.newOrder = operation.startOrder.slice();\n\n                    operation.newOrder.sort(function (a, b) {\n                        return self.compare(a, b, operation.newSort);\n                    });\n                }\n\n                if (h.isEqualArray(operation.newOrder, operation.startOrder)) {\n                    operation.willSort = false;\n                }\n\n                self.callActions('afterSortOperation', arguments);\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since   2.0.0\n             * @param   {mixitup.Target}        a\n             * @param   {mixitup.Target}        b\n             * @param   {mixitup.CommandSort}   command\n             * @return  {Number}\n             */\n\n            compare: function (a, b, command) {\n                var self = this,\n                    order = command.order,\n                    attrA = self.getAttributeValue(a, command.attribute),\n                    attrB = self.getAttributeValue(b, command.attribute);\n\n                if (isNaN(attrA * 1) || isNaN(attrB * 1)) {\n                    attrA = attrA.toLowerCase();\n                    attrB = attrB.toLowerCase();\n                } else {\n                    attrA = attrA * 1;\n                    attrB = attrB * 1;\n                }\n\n                if (attrA < attrB) {\n                    return order === 'asc' ? -1 : 1;\n                }\n\n                if (attrA > attrB) {\n                    return order === 'asc' ? 1 : -1;\n                }\n\n                if (attrA === attrB && command.next) {\n                    return self.compare(a, b, command.next);\n                }\n\n                return 0;\n            },\n\n            /**\n             * Reads the values of any data attributes present the provided target element\n             * which match the current sort command.\n             *\n             * @private\n             * @instance\n             * @since   3.0.0\n             * @param   {mixitup.Target}    target\n             * @param   {string}            [attribute]\n             * @return  {(String|Number)}\n             */\n\n            getAttributeValue: function (target, attribute) {\n                var self = this,\n                    value = '';\n\n                value = target.dom.el.getAttribute('data-' + attribute);\n\n                if (value === null) {\n                    if (self.config.debug.showWarnings) {\n                        // Encourage users to assign values to all targets to avoid erroneous sorting\n                        // when types are mixed\n\n                        console.warn(mixitup.messages.warningInconsistentSortingAttributes({\n                            attribute: 'data-' + attribute\n                        }));\n                    }\n                }\n\n                // If an attribute is not present, return 0 as a safety value\n\n                return self.callFilters('valueGetAttributeValue', value || 0, arguments);\n            },\n\n            /**\n             * Inserts elements into the DOM in the appropriate\n             * order using a document fragment for minimal\n             * DOM thrashing\n             *\n             * @private\n             * @instance\n             * @since   2.0.0\n             * @param   {boolean}   isResetting\n             * @param   {Operation} operation\n             * @return  {void}\n             */\n\n            printSort: function (isResetting, operation) {\n                var self = this,\n                    startOrder = isResetting ? operation.newOrder : operation.startOrder,\n                    newOrder = isResetting ? operation.startOrder : operation.newOrder,\n                    nextSibling = startOrder.length ? startOrder[startOrder.length - 1].dom.el.nextElementSibling : null,\n                    frag = window.document.createDocumentFragment(),\n                    whitespace = null,\n                    target = null,\n                    el = null,\n                    i = -1;\n\n                self.callActions('beforePrintSort', arguments);\n\n                // Empty the container\n\n                for (i = 0; target = startOrder[i]; i++) {\n                    el = target.dom.el;\n\n                    if (el.style.position === 'absolute') continue;\n\n                    h.removeWhitespace(el.previousSibling);\n\n                    el.parentElement.removeChild(el);\n                }\n\n                whitespace = nextSibling ? nextSibling.previousSibling : self.dom.parent.lastChild;\n\n                if (whitespace && whitespace.nodeName === '#text') {\n                    h.removeWhitespace(whitespace);\n                }\n\n                for (i = 0; target = newOrder[i]; i++) {\n                    // Add targets into a document fragment\n\n                    el = target.dom.el;\n\n                    if (h.isElement(frag.lastChild)) {\n                        frag.appendChild(window.document.createTextNode(' '));\n                    }\n\n                    frag.appendChild(el);\n                }\n\n                // Insert the document fragment into the container\n                // before any other non-target elements\n\n                if (self.dom.parent.firstChild && self.dom.parent.firstChild !== nextSibling) {\n                    frag.insertBefore(window.document.createTextNode(' '), frag.childNodes[0]);\n                }\n\n                if (nextSibling) {\n                    frag.appendChild(window.document.createTextNode(' '));\n\n                    self.dom.parent.insertBefore(frag, nextSibling);\n                } else {\n                    self.dom.parent.appendChild(frag);\n                }\n\n                self.callActions('afterPrintSort', arguments);\n            },\n\n            /**\n             * Parses user-defined sort strings (i.e. `default:asc`) into sort commands objects.\n             *\n             * @private\n             * @instance\n             * @since   3.0.0\n             * @param   {string}                sortString\n             * @param   {mixitup.CommandSort}   command\n             * @return  {mixitup.CommandSort}\n             */\n\n            parseSortString: function (sortString, command) {\n                var self = this,\n                    rules = sortString.split(' '),\n                    current = command,\n                    rule = [],\n                    i = -1;\n\n                // command.sortString = sortString;\n\n                for (i = 0; i < rules.length; i++) {\n                    rule = rules[i].split(':');\n\n                    current.sortString = rules[i];\n                    current.attribute = h.dashCase(rule[0]);\n                    current.order = rule[1] || 'asc';\n\n                    switch (current.attribute) {\n                        case 'default':\n                            // treat \"default\" as sorting by no attribute\n\n                            current.attribute = '';\n\n                            break;\n                        case 'random':\n                            // treat \"random\" as an order not an attribute\n\n                            current.attribute = '';\n                            current.order = 'random';\n\n                            break;\n                    }\n\n                    if (!current.attribute || current.order === 'random') break;\n\n                    if (i < rules.length - 1) {\n                        // Embed reference to the next command\n\n                        current.next = new mixitup.CommandSort();\n\n                        h.freeze(current);\n\n                        current = current.next;\n                    }\n                }\n\n                return self.callFilters('commandsParseSort', command, arguments);\n            },\n\n            /**\n             * Parses all effects out of the user-defined `animation.effects` string into\n             * their respective properties and units.\n             *\n             * @private\n             * @instance\n             * @since   2.0.0\n             * @return  {void}\n             */\n\n            parseEffects: function () {\n                var self = this,\n                    transformName = '',\n                    effectsIn = self.config.animation.effectsIn || self.config.animation.effects,\n                    effectsOut = self.config.animation.effectsOut || self.config.animation.effects;\n\n                self.callActions('beforeParseEffects', arguments);\n\n                self.effectsIn = new mixitup.StyleData();\n                self.effectsOut = new mixitup.StyleData();\n                self.transformIn = [];\n                self.transformOut = [];\n\n                self.effectsIn.opacity = self.effectsOut.opacity = 1;\n\n                self.parseEffect('fade', effectsIn, self.effectsIn, self.transformIn);\n                self.parseEffect('fade', effectsOut, self.effectsOut, self.transformOut, true);\n\n                for (transformName in mixitup.transformDefaults) {\n                    if (!(mixitup.transformDefaults[transformName] instanceof mixitup.TransformData)) {\n                        continue;\n                    }\n\n                    self.parseEffect(transformName, effectsIn, self.effectsIn, self.transformIn);\n                    self.parseEffect(transformName, effectsOut, self.effectsOut, self.transformOut, true);\n                }\n\n                self.parseEffect('stagger', effectsIn, self.effectsIn, self.transformIn);\n                self.parseEffect('stagger', effectsOut, self.effectsOut, self.transformOut, true);\n\n                self.callActions('afterParseEffects', arguments);\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since   2.0.0\n             * @param   {string}    effectName\n             * @param   {string}    effectString\n             * @param   {StyleData} effects\n             * @param   {String[]}  transform\n             * @param   {boolean}   [isOut]\n             */\n\n            parseEffect: function (effectName, effectString, effects, transform, isOut) {\n                var self = this,\n                    re = /\\(([^)]+)\\)/,\n                    propIndex = -1,\n                    str = '',\n                    match = [],\n                    val = '',\n                    units = ['%', 'px', 'em', 'rem', 'vh', 'vw', 'deg'],\n                    unit = '',\n                    i = -1;\n\n                self.callActions('beforeParseEffect', arguments);\n\n                if (typeof effectString !== 'string') {\n                    throw new TypeError(mixitup.messages.errorConfigInvalidAnimationEffects());\n                }\n\n                if (effectString.indexOf(effectName) < 0) {\n                    // The effect is not present in the effects string\n\n                    if (effectName === 'stagger') {\n                        // Reset stagger to 0\n\n                        self.staggerDuration = 0;\n                    }\n\n                    return;\n                }\n\n                // The effect is present\n\n                propIndex = effectString.indexOf(effectName + '(');\n\n                if (propIndex > -1) {\n                    // The effect has a user defined value in parentheses\n\n                    // Extract from the first parenthesis to the end of string\n\n                    str = effectString.substring(propIndex);\n\n                    // Match any number of characters between \"(\" and \")\"\n\n                    match = re.exec(str);\n\n                    val = match[1];\n                }\n\n                switch (effectName) {\n                    case 'fade':\n                        effects.opacity = val ? parseFloat(val) : 0;\n\n                        break;\n                    case 'stagger':\n                        self.staggerDuration = val ? parseFloat(val) : 100;\n\n                        // TODO: Currently stagger must be applied globally, but\n                        // if seperate values are specified for in/out, this should\n                        // be respected\n\n                        break;\n                    default:\n                        // All other effects are transforms following the same structure\n\n                        if (isOut && self.config.animation.reverseOut && effectName !== 'scale') {\n                            effects[effectName].value =\n                                (val ? parseFloat(val) : mixitup.transformDefaults[effectName].value) * -1;\n                        } else {\n                            effects[effectName].value =\n                                (val ? parseFloat(val) : mixitup.transformDefaults[effectName].value);\n                        }\n\n                        if (val) {\n                            for (i = 0; unit = units[i]; i++) {\n                                if (val.indexOf(unit) > -1) {\n                                    effects[effectName].unit = unit;\n\n                                    break;\n                                }\n                            }\n                        } else {\n                            effects[effectName].unit = mixitup.transformDefaults[effectName].unit;\n                        }\n\n                        transform.push(\n                            effectName +\n                            '(' +\n                            effects[effectName].value +\n                            effects[effectName].unit +\n                            ')'\n                        );\n                }\n\n                self.callActions('afterParseEffect', arguments);\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since   2.0.0\n             * @param   {Operation}     operation\n             * @return  {State}\n             */\n\n            buildState: function (operation) {\n                var self = this,\n                    state = new mixitup.State(),\n                    target = null,\n                    i = -1;\n\n                self.callActions('beforeBuildState', arguments);\n\n                // Map target elements into state arrays.\n                // the real target objects should never be exposed\n\n                for (i = 0; target = self.targets[i]; i++) {\n                    if (!operation.toRemove.length || operation.toRemove.indexOf(target) < 0) {\n                        state.targets.push(target.dom.el);\n                    }\n                }\n\n                for (i = 0; target = operation.matching[i]; i++) {\n                    state.matching.push(target.dom.el);\n                }\n\n                for (i = 0; target = operation.show[i]; i++) {\n                    state.show.push(target.dom.el);\n                }\n\n                for (i = 0; target = operation.hide[i]; i++) {\n                    if (!operation.toRemove.length || operation.toRemove.indexOf(target) < 0) {\n                        state.hide.push(target.dom.el);\n                    }\n                }\n\n                state.id = self.id;\n                state.container = self.dom.container;\n                state.activeFilter = operation.newFilter;\n                state.activeSort = operation.newSort;\n                state.activeDataset = operation.newDataset;\n                state.activeContainerClassName = operation.newContainerClassName;\n                state.hasFailed = operation.hasFailed;\n                state.totalTargets = self.targets.length;\n                state.totalShow = operation.show.length;\n                state.totalHide = operation.hide.length;\n                state.totalMatching = operation.matching.length;\n                state.triggerElement = operation.triggerElement;\n\n                return self.callFilters('stateBuildState', state, arguments);\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since   2.0.0\n             * @param   {boolean}   shouldAnimate\n             * @param   {Operation} operation\n             * @return  {void}\n             */\n\n            goMix: function (shouldAnimate, operation) {\n                var self = this,\n                    deferred = null;\n\n                self.callActions('beforeGoMix', arguments);\n\n                // If the animation duration is set to 0ms,\n                // or no effects specified,\n                // or the container is hidden\n                // then abort animation\n\n                if (\n                    !self.config.animation.duration || !self.config.animation.effects || !h.isVisible(self.dom.container)\n                ) {\n                    shouldAnimate = false;\n                }\n\n                if (\n                    !operation.toShow.length &&\n                    !operation.toHide.length &&\n                    !operation.willSort &&\n                    !operation.willChangeLayout\n                ) {\n                    // If nothing to show or hide, and not sorting or\n                    // changing layout\n\n                    shouldAnimate = false;\n                }\n\n                if (\n                    !operation.startState.show.length &&\n                    !operation.show.length\n                ) {\n                    // If nothing currently shown, nothing to show\n\n                    shouldAnimate = false;\n                }\n\n                mixitup.events.fire('mixStart', self.dom.container, {\n                    state: operation.startState,\n                    futureState: operation.newState,\n                    instance: self\n                }, self.dom.document);\n\n                if (typeof self.config.callbacks.onMixStart === 'function') {\n                    self.config.callbacks.onMixStart.call(\n                        self.dom.container,\n                        operation.startState,\n                        operation.newState,\n                        self\n                    );\n                }\n\n                h.removeClass(self.dom.container, h.getClassname(self.config.classNames, 'container', self.config.classNames.modifierFailed));\n\n                if (!self.userDeferred) {\n                    // Queue empty, no pending operations\n\n                    deferred = self.userDeferred = h.defer(mixitup.libraries);\n                } else {\n                    // Use existing deferred\n\n                    deferred = self.userDeferred;\n                }\n\n                self.isBusy = true;\n\n                if (!shouldAnimate || !mixitup.features.has.transitions) {\n                    // Abort\n\n                    if (self.config.debug.fauxAsync) {\n                        setTimeout(function () {\n                            self.cleanUp(operation);\n                        }, self.config.animation.duration);\n                    } else {\n                        self.cleanUp(operation);\n                    }\n\n                    return self.callFilters('promiseGoMix', deferred.promise, arguments);\n                }\n\n                // If we should animate and the platform supports transitions, go for it\n\n                if (window.pageYOffset !== operation.docState.scrollTop) {\n                    window.scrollTo(operation.docState.scrollLeft, operation.docState.scrollTop);\n                }\n\n                if (self.config.animation.applyPerspective) {\n                    self.dom.parent.style[mixitup.features.perspectiveProp] =\n                        self.config.animation.perspectiveDistance;\n\n                    self.dom.parent.style[mixitup.features.perspectiveOriginProp] =\n                        self.config.animation.perspectiveOrigin;\n                }\n\n                if (\n                    self.config.animation.animateResizeContainer &&\n                    operation.startHeight !== operation.newHeight &&\n                    operation.viewportDeltaY !== operation.startHeight - operation.newHeight\n                ) {\n                    self.dom.parent.style.height = operation.startHeight + 'px';\n                }\n\n                if (\n                    self.config.animation.animateResizeContainer &&\n                    operation.startWidth !== operation.newWidth &&\n                    operation.viewportDeltaX !== operation.startWidth - operation.newWidth\n                ) {\n                    self.dom.parent.style.width = operation.startWidth + 'px';\n                }\n\n                if (operation.startHeight === operation.newHeight) {\n                    self.dom.parent.style.height = operation.startHeight + 'px';\n                }\n\n                if (operation.startWidth === operation.newWidth) {\n                    self.dom.parent.style.width = operation.startWidth + 'px';\n                }\n\n                if (operation.startHeight === operation.newHeight && operation.startWidth === operation.newWidth) {\n                    self.dom.parent.style.overflow = 'hidden';\n                }\n\n                requestAnimationFrame(function () {\n                    self.moveTargets(operation);\n                });\n\n                return self.callFilters('promiseGoMix', deferred.promise, arguments);\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since   2.0.0\n             * @param   {Operation}     operation\n             * @return  {void}\n             */\n\n            getStartMixData: function (operation) {\n                var self = this,\n                    parentStyle = window.getComputedStyle(self.dom.parent),\n                    parentRect = self.dom.parent.getBoundingClientRect(),\n                    target = null,\n                    data = {},\n                    i = -1,\n                    boxSizing = parentStyle[mixitup.features.boxSizingProp];\n\n                self.incPadding = (boxSizing === 'border-box');\n\n                self.callActions('beforeGetStartMixData', arguments);\n\n                for (i = 0; target = operation.show[i]; i++) {\n                    data = target.getPosData();\n\n                    operation.showPosData[i] = {\n                        startPosData: data\n                    };\n                }\n\n                for (i = 0; target = operation.toHide[i]; i++) {\n                    data = target.getPosData();\n\n                    operation.toHidePosData[i] = {\n                        startPosData: data\n                    };\n                }\n\n                operation.startX = parentRect.left;\n                operation.startY = parentRect.top;\n\n                operation.startHeight = self.incPadding ?\n                    parentRect.height :\n                    parentRect.height -\n                    parseFloat(parentStyle.paddingTop) -\n                    parseFloat(parentStyle.paddingBottom) -\n                    parseFloat(parentStyle.borderTop) -\n                    parseFloat(parentStyle.borderBottom);\n\n                operation.startWidth = self.incPadding ?\n                    parentRect.width :\n                    parentRect.width -\n                    parseFloat(parentStyle.paddingLeft) -\n                    parseFloat(parentStyle.paddingRight) -\n                    parseFloat(parentStyle.borderLeft) -\n                    parseFloat(parentStyle.borderRight);\n\n                self.callActions('afterGetStartMixData', arguments);\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since   2.0.0\n             * @param   {Operation}     operation\n             * @return  {void}\n             */\n\n            setInter: function (operation) {\n                var self = this,\n                    target = null,\n                    i = -1;\n\n                self.callActions('beforeSetInter', arguments);\n\n                // Prevent scrollbar flicker on non-inertial scroll platforms by clamping height/width\n\n                if (self.config.animation.clampHeight) {\n                    self.dom.parent.style.height = operation.startHeight + 'px';\n                    self.dom.parent.style.overflow = 'hidden';\n                }\n\n                if (self.config.animation.clampWidth) {\n                    self.dom.parent.style.width = operation.startWidth + 'px';\n                    self.dom.parent.style.overflow = 'hidden';\n                }\n\n                for (i = 0; target = operation.toShow[i]; i++) {\n                    target.show();\n                }\n\n                if (operation.willChangeLayout) {\n                    h.removeClass(self.dom.container, operation.startContainerClassName);\n                    h.addClass(self.dom.container, operation.newContainerClassName);\n                }\n\n                self.callActions('afterSetInter', arguments);\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since   2.0.0\n             * @param   {Operation}     operation\n             * @return  {void}\n             */\n\n            getInterMixData: function (operation) {\n                var self = this,\n                    target = null,\n                    i = -1;\n\n                self.callActions('beforeGetInterMixData', arguments);\n\n                for (i = 0; target = operation.show[i]; i++) {\n                    operation.showPosData[i].interPosData = target.getPosData();\n                }\n\n                for (i = 0; target = operation.toHide[i]; i++) {\n                    operation.toHidePosData[i].interPosData = target.getPosData();\n                }\n\n                self.callActions('afterGetInterMixData', arguments);\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since   2.0.0\n             * @param   {Operation}     operation\n             * @return  {void}\n             */\n\n            setFinal: function (operation) {\n                var self = this,\n                    target = null,\n                    i = -1;\n\n                self.callActions('beforeSetFinal', arguments);\n\n                operation.willSort && self.printSort(false, operation);\n\n                for (i = 0; target = operation.toHide[i]; i++) {\n                    target.hide();\n                }\n\n                self.callActions('afterSetFinal', arguments);\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since   2.0.0\n             * @param   {Operation}     operation\n             * @return  {void}\n             */\n\n            getFinalMixData: function (operation) {\n                var self = this,\n                    parentStyle = null,\n                    parentRect = null,\n                    target = null,\n                    i = -1;\n\n                self.callActions('beforeGetFinalMixData', arguments);\n\n                for (i = 0; target = operation.show[i]; i++) {\n                    operation.showPosData[i].finalPosData = target.getPosData();\n                }\n\n                for (i = 0; target = operation.toHide[i]; i++) {\n                    operation.toHidePosData[i].finalPosData = target.getPosData();\n                }\n\n                // Remove clamping\n\n                if (self.config.animation.clampHeight || self.config.animation.clampWidth) {\n                    self.dom.parent.style.height =\n                        self.dom.parent.style.width =\n                        self.dom.parent.style.overflow = '';\n                }\n\n                if (!self.incPadding) {\n                    parentStyle = window.getComputedStyle(self.dom.parent);\n                }\n\n                parentRect = self.dom.parent.getBoundingClientRect();\n\n                operation.newX = parentRect.left;\n                operation.newY = parentRect.top;\n\n                operation.newHeight = self.incPadding ?\n                    parentRect.height :\n                    parentRect.height -\n                    parseFloat(parentStyle.paddingTop) -\n                    parseFloat(parentStyle.paddingBottom) -\n                    parseFloat(parentStyle.borderTop) -\n                    parseFloat(parentStyle.borderBottom);\n\n                operation.newWidth = self.incPadding ?\n                    parentRect.width :\n                    parentRect.width -\n                    parseFloat(parentStyle.paddingLeft) -\n                    parseFloat(parentStyle.paddingRight) -\n                    parseFloat(parentStyle.borderLeft) -\n                    parseFloat(parentStyle.borderRight);\n\n                operation.viewportDeltaX = operation.docState.viewportWidth - this.dom.document.documentElement.clientWidth;\n                operation.viewportDeltaY = operation.docState.viewportHeight - this.dom.document.documentElement.clientHeight;\n\n                if (operation.willSort) {\n                    self.printSort(true, operation);\n                }\n\n                for (i = 0; target = operation.toShow[i]; i++) {\n                    target.hide();\n                }\n\n                for (i = 0; target = operation.toHide[i]; i++) {\n                    target.show();\n                }\n\n                if (operation.willChangeLayout) {\n                    h.removeClass(self.dom.container, operation.newContainerClassName);\n                    h.addClass(self.dom.container, self.config.layout.containerClassName);\n                }\n\n                self.callActions('afterGetFinalMixData', arguments);\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since    3.0.0\n             * @param    {Operation}     operation\n             */\n\n            getTweenData: function (operation) {\n                var self = this,\n                    target = null,\n                    posData = null,\n                    effectNames = Object.getOwnPropertyNames(self.effectsIn),\n                    effectName = '',\n                    effect = null,\n                    widthChange = -1,\n                    heightChange = -1,\n                    i = -1,\n                    j = -1;\n\n                self.callActions('beforeGetTweenData', arguments);\n\n                for (i = 0; target = operation.show[i]; i++) {\n                    posData = operation.showPosData[i];\n                    posData.posIn = new mixitup.StyleData();\n                    posData.posOut = new mixitup.StyleData();\n                    posData.tweenData = new mixitup.StyleData();\n\n                    // Process x and y\n\n                    if (target.isShown) {\n                        posData.posIn.x = posData.startPosData.x - posData.interPosData.x;\n                        posData.posIn.y = posData.startPosData.y - posData.interPosData.y;\n                    } else {\n                        posData.posIn.x = posData.posIn.y = 0;\n                    }\n\n                    posData.posOut.x = posData.finalPosData.x - posData.interPosData.x;\n                    posData.posOut.y = posData.finalPosData.y - posData.interPosData.y;\n\n                    // Process opacity\n\n                    posData.posIn.opacity = target.isShown ? 1 : self.effectsIn.opacity;\n                    posData.posOut.opacity = 1;\n                    posData.tweenData.opacity = posData.posOut.opacity - posData.posIn.opacity;\n\n                    // Adjust x and y if not nudging\n\n                    if (!target.isShown && !self.config.animation.nudge) {\n                        posData.posIn.x = posData.posOut.x;\n                        posData.posIn.y = posData.posOut.y;\n                    }\n\n                    posData.tweenData.x = posData.posOut.x - posData.posIn.x;\n                    posData.tweenData.y = posData.posOut.y - posData.posIn.y;\n\n                    // Process width, height, and margins\n\n                    if (self.config.animation.animateResizeTargets) {\n                        posData.posIn.width = posData.startPosData.width;\n                        posData.posIn.height = posData.startPosData.height;\n\n                        // \"||\" Prevents width/height change from including 0 width/height if hiding or showing\n\n                        widthChange = (posData.startPosData.width || posData.finalPosData.width) - posData.interPosData.width;\n\n                        posData.posIn.marginRight = posData.startPosData.marginRight - widthChange;\n\n                        heightChange = (posData.startPosData.height || posData.finalPosData.height) - posData.interPosData.height;\n\n                        posData.posIn.marginBottom = posData.startPosData.marginBottom - heightChange;\n\n                        posData.posOut.width = posData.finalPosData.width;\n                        posData.posOut.height = posData.finalPosData.height;\n\n                        widthChange = (posData.finalPosData.width || posData.startPosData.width) - posData.interPosData.width;\n\n                        posData.posOut.marginRight = posData.finalPosData.marginRight - widthChange;\n\n                        heightChange = (posData.finalPosData.height || posData.startPosData.height) - posData.interPosData.height;\n\n                        posData.posOut.marginBottom = posData.finalPosData.marginBottom - heightChange;\n\n                        posData.tweenData.width = posData.posOut.width - posData.posIn.width;\n                        posData.tweenData.height = posData.posOut.height - posData.posIn.height;\n                        posData.tweenData.marginRight = posData.posOut.marginRight - posData.posIn.marginRight;\n                        posData.tweenData.marginBottom = posData.posOut.marginBottom - posData.posIn.marginBottom;\n                    }\n\n                    // Process transforms\n\n                    for (j = 0; effectName = effectNames[j]; j++) {\n                        effect = self.effectsIn[effectName];\n\n                        if (!(effect instanceof mixitup.TransformData) || !effect.value) continue;\n\n                        posData.posIn[effectName].value = effect.value;\n                        posData.posOut[effectName].value = 0;\n\n                        posData.tweenData[effectName].value =\n                            posData.posOut[effectName].value - posData.posIn[effectName].value;\n\n                        posData.posIn[effectName].unit =\n                            posData.posOut[effectName].unit =\n                            posData.tweenData[effectName].unit =\n                            effect.unit;\n                    }\n                }\n\n                for (i = 0; target = operation.toHide[i]; i++) {\n                    posData = operation.toHidePosData[i];\n                    posData.posIn = new mixitup.StyleData();\n                    posData.posOut = new mixitup.StyleData();\n                    posData.tweenData = new mixitup.StyleData();\n\n                    // Process x and y\n\n                    posData.posIn.x = target.isShown ? posData.startPosData.x - posData.interPosData.x : 0;\n                    posData.posIn.y = target.isShown ? posData.startPosData.y - posData.interPosData.y : 0;\n                    posData.posOut.x = self.config.animation.nudge ? 0 : posData.posIn.x;\n                    posData.posOut.y = self.config.animation.nudge ? 0 : posData.posIn.y;\n                    posData.tweenData.x = posData.posOut.x - posData.posIn.x;\n                    posData.tweenData.y = posData.posOut.y - posData.posIn.y;\n\n                    // Process width, height, and margins\n\n                    if (self.config.animation.animateResizeTargets) {\n                        posData.posIn.width = posData.startPosData.width;\n                        posData.posIn.height = posData.startPosData.height;\n\n                        widthChange = posData.startPosData.width - posData.interPosData.width;\n\n                        posData.posIn.marginRight = posData.startPosData.marginRight - widthChange;\n\n                        heightChange = posData.startPosData.height - posData.interPosData.height;\n\n                        posData.posIn.marginBottom = posData.startPosData.marginBottom - heightChange;\n                    }\n\n                    // Process opacity\n\n                    posData.posIn.opacity = 1;\n                    posData.posOut.opacity = self.effectsOut.opacity;\n                    posData.tweenData.opacity = posData.posOut.opacity - posData.posIn.opacity;\n\n                    // Process transforms\n\n                    for (j = 0; effectName = effectNames[j]; j++) {\n                        effect = self.effectsOut[effectName];\n\n                        if (!(effect instanceof mixitup.TransformData) || !effect.value) continue;\n\n                        posData.posIn[effectName].value = 0;\n                        posData.posOut[effectName].value = effect.value;\n\n                        posData.tweenData[effectName].value =\n                            posData.posOut[effectName].value - posData.posIn[effectName].value;\n\n                        posData.posIn[effectName].unit =\n                            posData.posOut[effectName].unit =\n                            posData.tweenData[effectName].unit =\n                            effect.unit;\n                    }\n                }\n\n                self.callActions('afterGetTweenData', arguments);\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since   3.0.0\n             * @param   {Operation}     operation\n             * @return  {void}\n             */\n\n            moveTargets: function (operation) {\n                var self = this,\n                    target = null,\n                    moveData = null,\n                    posData = null,\n                    statusChange = '',\n                    willTransition = false,\n                    staggerIndex = -1,\n                    i = -1,\n                    checkProgress = self.checkProgress.bind(self);\n\n                self.callActions('beforeMoveTargets', arguments);\n\n                // TODO: this is an extra loop in addition to the calcs\n                // done in getOperation, could some of this be done there?\n\n                for (i = 0; target = operation.show[i]; i++) {\n                    moveData = new mixitup.IMoveData();\n                    posData = operation.showPosData[i];\n\n                    statusChange = target.isShown ? 'none' : 'show';\n\n                    willTransition = self.willTransition(\n                        statusChange,\n                        operation.hasEffect,\n                        posData.posIn,\n                        posData.posOut\n                    );\n\n                    if (willTransition) {\n                        // Prevent non-transitioning targets from incrementing the staggerIndex\n\n                        staggerIndex++;\n                    }\n\n                    target.show();\n\n                    moveData.posIn = posData.posIn;\n                    moveData.posOut = posData.posOut;\n                    moveData.statusChange = statusChange;\n                    moveData.staggerIndex = staggerIndex;\n                    moveData.operation = operation;\n                    moveData.callback = willTransition ? checkProgress : null;\n\n                    target.move(moveData);\n                }\n\n                for (i = 0; target = operation.toHide[i]; i++) {\n                    posData = operation.toHidePosData[i];\n                    moveData = new mixitup.IMoveData();\n\n                    statusChange = 'hide';\n\n                    willTransition = self.willTransition(statusChange, posData.posIn, posData.posOut);\n\n                    moveData.posIn = posData.posIn;\n                    moveData.posOut = posData.posOut;\n                    moveData.statusChange = statusChange;\n                    moveData.staggerIndex = i;\n                    moveData.operation = operation;\n                    moveData.callback = willTransition ? checkProgress : null;\n\n                    target.move(moveData);\n                }\n\n                if (self.config.animation.animateResizeContainer) {\n                    self.dom.parent.style[mixitup.features.transitionProp] =\n                        'height ' + self.config.animation.duration + 'ms ease, ' +\n                        'width ' + self.config.animation.duration + 'ms ease ';\n\n                    requestAnimationFrame(function () {\n                        if (\n                            operation.startHeight !== operation.newHeight &&\n                            operation.viewportDeltaY !== operation.startHeight - operation.newHeight\n                        ) {\n                            self.dom.parent.style.height = operation.newHeight + 'px';\n                        }\n\n                        if (\n                            operation.startWidth !== operation.newWidth &&\n                            operation.viewportDeltaX !== operation.startWidth - operation.newWidth\n                        ) {\n                            self.dom.parent.style.width = operation.newWidth + 'px';\n                        }\n                    });\n                }\n\n                if (operation.willChangeLayout) {\n                    h.removeClass(self.dom.container, self.config.layout.ContainerClassName);\n                    h.addClass(self.dom.container, operation.newContainerClassName);\n                }\n\n                self.callActions('afterMoveTargets', arguments);\n            },\n\n            /**\n             * @private\n             * @instance\n             * @return  {boolean}\n             */\n\n            hasEffect: function () {\n                var self = this,\n                    EFFECTABLES = [\n                        'scale',\n                        'translateX', 'translateY', 'translateZ',\n                        'rotateX', 'rotateY', 'rotateZ'\n                    ],\n                    effectName = '',\n                    effect = null,\n                    result = false,\n                    value = -1,\n                    i = -1;\n\n                if (self.effectsIn.opacity !== 1) {\n                    return self.callFilters('resultHasEffect', true, arguments);\n                }\n\n                for (i = 0; effectName = EFFECTABLES[i]; i++) {\n                    effect = self.effectsIn[effectName];\n                    value = (typeof effect && effect.value !== 'undefined') ?\n                        effect.value : effect;\n\n                    if (value !== 0) {\n                        result = true;\n\n                        break;\n                    }\n                }\n\n                return self.callFilters('resultHasEffect', result, arguments);\n            },\n\n            /**\n             * Determines if a target element will transition in\n             * some fasion and therefore requires binding of\n             * transitionEnd\n             *\n             * @private\n             * @instance\n             * @since   3.0.0\n             * @param   {string}        statusChange\n             * @param   {boolean}       hasEffect\n             * @param   {StyleData}     posIn\n             * @param   {StyleData}     posOut\n             * @return  {boolean}\n             */\n\n            willTransition: function (statusChange, hasEffect, posIn, posOut) {\n                var self = this,\n                    result = false;\n\n                if (!h.isVisible(self.dom.container)) {\n                    // If the container is not visible, the transitionEnd\n                    // event will not occur and MixItUp will hang\n\n                    result = false;\n                } else if (\n                    (statusChange !== 'none' && hasEffect) ||\n                    posIn.x !== posOut.x ||\n                    posIn.y !== posOut.y\n                ) {\n                    // If opacity and/or translate will change\n\n                    result = true;\n                } else if (self.config.animation.animateResizeTargets) {\n                    // Check if width, height or margins will change\n\n                    result = (\n                        posIn.width !== posOut.width ||\n                        posIn.height !== posOut.height ||\n                        posIn.marginRight !== posOut.marginRight ||\n                        posIn.marginTop !== posOut.marginTop\n                    );\n                } else {\n                    result = false;\n                }\n\n                return self.callFilters('resultWillTransition', result, arguments);\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since   2.0.0\n             * @param   {Operation}     operation\n             * @return  {void}\n             */\n\n            checkProgress: function (operation) {\n                var self = this;\n\n                self.targetsDone++;\n\n                if (self.targetsBound === self.targetsDone) {\n                    self.cleanUp(operation);\n                }\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since   2.0.0\n             * @param   {Operation}     operation\n             * @return  {void}\n             */\n\n            cleanUp: function (operation) {\n                var self = this,\n                    target = null,\n                    whitespaceBefore = null,\n                    whitespaceAfter = null,\n                    nextInQueue = null,\n                    i = -1;\n\n                self.callActions('beforeCleanUp', arguments);\n\n                self.targetsMoved =\n                    self.targetsImmovable =\n                    self.targetsBound =\n                    self.targetsDone = 0;\n\n                for (i = 0; target = operation.show[i]; i++) {\n                    target.cleanUp();\n\n                    target.show();\n                }\n\n                for (i = 0; target = operation.toHide[i]; i++) {\n                    target.cleanUp();\n\n                    target.hide();\n                }\n\n                if (operation.willSort) {\n                    self.printSort(false, operation);\n                }\n\n                // Remove any styles applied to the parent container\n\n                self.dom.parent.style[mixitup.features.transitionProp] =\n                    self.dom.parent.style.height =\n                    self.dom.parent.style.width =\n                    self.dom.parent.style.overflow =\n                    self.dom.parent.style[mixitup.features.perspectiveProp] =\n                    self.dom.parent.style[mixitup.features.perspectiveOriginProp] = '';\n\n                if (operation.willChangeLayout) {\n                    h.removeClass(self.dom.container, operation.startContainerClassName);\n                    h.addClass(self.dom.container, operation.newContainerClassName);\n                }\n\n                if (operation.toRemove.length) {\n                    for (i = 0; target = self.targets[i]; i++) {\n                        if (operation.toRemove.indexOf(target) > -1) {\n                            if (\n                                (whitespaceBefore = target.dom.el.previousSibling) && whitespaceBefore.nodeName === '#text' &&\n                                (whitespaceAfter = target.dom.el.nextSibling) && whitespaceAfter.nodeName === '#text'\n                            ) {\n                                h.removeWhitespace(whitespaceBefore);\n                            }\n\n                            if (!operation.willSort) {\n                                // NB: Sorting will remove targets as a bi-product of `printSort()`\n\n                                self.dom.parent.removeChild(target.dom.el);\n                            }\n\n                            self.targets.splice(i, 1);\n\n                            target.isInDom = false;\n\n                            i--;\n                        }\n                    }\n\n                    // Since targets have been removed, the original order must be updated\n\n                    self.origOrder = self.targets;\n                }\n\n                if (operation.willSort) {\n                    self.targets = operation.newOrder;\n                }\n\n                self.state = operation.newState;\n                self.lastOperation = operation;\n\n                self.dom.targets = self.state.targets;\n\n                // mixEnd\n\n                mixitup.events.fire('mixEnd', self.dom.container, {\n                    state: self.state,\n                    instance: self\n                }, self.dom.document);\n\n                if (typeof self.config.callbacks.onMixEnd === 'function') {\n                    self.config.callbacks.onMixEnd.call(self.dom.container, self.state, self);\n                }\n\n                if (operation.hasFailed) {\n                    // mixFail\n\n                    mixitup.events.fire('mixFail', self.dom.container, {\n                        state: self.state,\n                        instance: self\n                    }, self.dom.document);\n\n                    if (typeof self.config.callbacks.onMixFail === 'function') {\n                        self.config.callbacks.onMixFail.call(self.dom.container, self.state, self);\n                    }\n\n                    h.addClass(self.dom.container, h.getClassname(self.config.classNames, 'container', self.config.classNames.modifierFailed));\n                }\n\n                // User-defined callback function\n\n                if (typeof self.userCallback === 'function') {\n                    self.userCallback.call(self.dom.container, self.state, self);\n                }\n\n                if (typeof self.userDeferred.resolve === 'function') {\n                    self.userDeferred.resolve(self.state);\n                }\n\n                self.userCallback = null;\n                self.userDeferred = null;\n                self.lastClicked = null;\n                self.isToggling = false;\n                self.isBusy = false;\n\n                if (self.queue.length) {\n                    self.callActions('beforeReadQueueCleanUp', arguments);\n\n                    nextInQueue = self.queue.shift();\n\n                    // Update non-public API properties stored in queue\n\n                    self.userDeferred = nextInQueue.deferred;\n                    self.isToggling = nextInQueue.isToggling;\n                    self.lastClicked = nextInQueue.triggerElement;\n\n                    if (nextInQueue.instruction.command instanceof mixitup.CommandMultimix) {\n                        self.multimix.apply(self, nextInQueue.args);\n                    } else {\n                        self.dataset.apply(self, nextInQueue.args);\n                    }\n                }\n\n                self.callActions('afterCleanUp', arguments);\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since   2.0.0\n             * @param   {Array<*>}  args\n             * @return  {mixitup.UserInstruction}\n             */\n\n            parseMultimixArgs: function (args) {\n                var self = this,\n                    instruction = new mixitup.UserInstruction(),\n                    arg = null,\n                    i = -1;\n\n                instruction.animate = self.config.animation.enable;\n                instruction.command = new mixitup.CommandMultimix();\n\n                for (i = 0; i < args.length; i++) {\n                    arg = args[i];\n\n                    if (arg === null) continue;\n\n                    if (typeof arg === 'object') {\n                        h.extend(instruction.command, arg);\n                    } else if (typeof arg === 'boolean') {\n                        instruction.animate = arg;\n                    } else if (typeof arg === 'function') {\n                        instruction.callback = arg;\n                    }\n                }\n\n                // Coerce arbitrary command arguments into typed command objects\n\n                if (instruction.command.insert && !(instruction.command.insert instanceof mixitup.CommandInsert)) {\n                    instruction.command.insert = self.parseInsertArgs([instruction.command.insert]).command;\n                }\n\n                if (instruction.command.remove && !(instruction.command.remove instanceof mixitup.CommandRemove)) {\n                    instruction.command.remove = self.parseRemoveArgs([instruction.command.remove]).command;\n                }\n\n                if (instruction.command.filter && !(instruction.command.filter instanceof mixitup.CommandFilter)) {\n                    instruction.command.filter = self.parseFilterArgs([instruction.command.filter]).command;\n                }\n\n                if (instruction.command.sort && !(instruction.command.sort instanceof mixitup.CommandSort)) {\n                    instruction.command.sort = self.parseSortArgs([instruction.command.sort]).command;\n                }\n\n                if (instruction.command.changeLayout && !(instruction.command.changeLayout instanceof mixitup.CommandChangeLayout)) {\n                    instruction.command.changeLayout = self.parseChangeLayoutArgs([instruction.command.changeLayout]).command;\n                }\n\n                instruction = self.callFilters('instructionParseMultimixArgs', instruction, arguments);\n\n                h.freeze(instruction);\n\n                return instruction;\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since   2.0.0\n             * @param   {Array<*>}  args\n             * @return  {mixitup.UserInstruction}\n             */\n\n            parseFilterArgs: function (args) {\n                var self = this,\n                    instruction = new mixitup.UserInstruction(),\n                    arg = null,\n                    i = -1;\n\n                instruction.animate = self.config.animation.enable;\n                instruction.command = new mixitup.CommandFilter();\n\n                for (i = 0; i < args.length; i++) {\n                    arg = args[i];\n\n                    if (typeof arg === 'string') {\n                        // Selector\n\n                        instruction.command.selector = arg;\n                    } else if (arg === null) {\n                        instruction.command.collection = [];\n                    } else if (typeof arg === 'object' && h.isElement(arg, self.dom.document)) {\n                        // Single element\n\n                        instruction.command.collection = [arg];\n                    } else if (typeof arg === 'object' && typeof arg.length !== 'undefined') {\n                        // Multiple elements in array, NodeList or jQuery collection\n\n                        instruction.command.collection = h.arrayFromList(arg);\n                    } else if (typeof arg === 'object') {\n                        // Filter command\n\n                        h.extend(instruction.command, arg);\n                    } else if (typeof arg === 'boolean') {\n                        instruction.animate = arg;\n                    } else if (typeof arg === 'function') {\n                        instruction.callback = arg;\n                    }\n                }\n\n                if (instruction.command.selector && instruction.command.collection) {\n                    throw new Error(mixitup.messages.errorFilterInvalidArguments());\n                }\n\n                instruction = self.callFilters('instructionParseFilterArgs', instruction, arguments);\n\n                h.freeze(instruction);\n\n                return instruction;\n            },\n\n            parseSortArgs: function (args) {\n                var self = this,\n                    instruction = new mixitup.UserInstruction(),\n                    arg = null,\n                    sortString = '',\n                    i = -1;\n\n                instruction.animate = self.config.animation.enable;\n                instruction.command = new mixitup.CommandSort();\n\n                for (i = 0; i < args.length; i++) {\n                    arg = args[i];\n\n                    if (arg === null) continue;\n\n                    switch (typeof arg) {\n                        case 'string':\n                            // Sort string\n\n                            sortString = arg;\n\n                            break;\n                        case 'object':\n                            // Array of element references\n\n                            if (arg.length) {\n                                instruction.command.collection = h.arrayFromList(arg);\n                            }\n\n                            break;\n                        case 'boolean':\n                            instruction.animate = arg;\n\n                            break;\n                        case 'function':\n                            instruction.callback = arg;\n\n                            break;\n                    }\n                }\n\n                if (sortString) {\n                    instruction.command = self.parseSortString(sortString, instruction.command);\n                }\n\n                instruction = self.callFilters('instructionParseSortArgs', instruction, arguments);\n\n                h.freeze(instruction);\n\n                return instruction;\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since   2.0.0\n             * @param   {Array<*>}  args\n             * @return  {mixitup.UserInstruction}\n             */\n\n            parseInsertArgs: function (args) {\n                var self = this,\n                    instruction = new mixitup.UserInstruction(),\n                    arg = null,\n                    i = -1;\n\n                instruction.animate = self.config.animation.enable;\n                instruction.command = new mixitup.CommandInsert();\n\n                for (i = 0; i < args.length; i++) {\n                    arg = args[i];\n\n                    if (arg === null) continue;\n\n                    if (typeof arg === 'number') {\n                        // Insert index\n\n                        instruction.command.index = arg;\n                    } else if (typeof arg === 'string' && ['before', 'after'].indexOf(arg) > -1) {\n                        // 'before'/'after'\n\n                        instruction.command.position = arg;\n                    } else if (typeof arg === 'string') {\n                        // Markup\n\n                        instruction.command.collection =\n                            h.arrayFromList(h.createElement(arg).childNodes);\n                    } else if (typeof arg === 'object' && h.isElement(arg, self.dom.document)) {\n                        // Single element\n\n                        !instruction.command.collection.length ?\n                            (instruction.command.collection = [arg]) :\n                            (instruction.command.sibling = arg);\n                    } else if (typeof arg === 'object' && arg.length) {\n                        // Multiple elements in array or jQuery collection\n\n                        !instruction.command.collection.length ?\n                            (instruction.command.collection = arg) :\n                            instruction.command.sibling = arg[0];\n                    } else if (typeof arg === 'object' && arg.childNodes && arg.childNodes.length) {\n                        // Document fragment\n\n                        !instruction.command.collection.length ?\n                            instruction.command.collection = h.arrayFromList(arg.childNodes) :\n                            instruction.command.sibling = arg.childNodes[0];\n                    } else if (typeof arg === 'object') {\n                        // Insert command\n\n                        h.extend(instruction.command, arg);\n                    } else if (typeof arg === 'boolean') {\n                        instruction.animate = arg;\n                    } else if (typeof arg === 'function') {\n                        instruction.callback = arg;\n                    }\n                }\n\n                if (instruction.command.index && instruction.command.sibling) {\n                    throw new Error(mixitup.messages.errorInsertInvalidArguments());\n                }\n\n                if (!instruction.command.collection.length && self.config.debug.showWarnings) {\n                    console.warn(mixitup.messages.warningInsertNoElements());\n                }\n\n                instruction = self.callFilters('instructionParseInsertArgs', instruction, arguments);\n\n                h.freeze(instruction);\n\n                return instruction;\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since   3.0.0\n             * @param   {Array<*>}  args\n             * @return  {mixitup.UserInstruction}\n             */\n\n            parseRemoveArgs: function (args) {\n                var self = this,\n                    instruction = new mixitup.UserInstruction(),\n                    target = null,\n                    arg = null,\n                    i = -1;\n\n                instruction.animate = self.config.animation.enable;\n                instruction.command = new mixitup.CommandRemove();\n\n                for (i = 0; i < args.length; i++) {\n                    arg = args[i];\n\n                    if (arg === null) continue;\n\n                    switch (typeof arg) {\n                        case 'number':\n                            if (self.targets[arg]) {\n                                instruction.command.targets[0] = self.targets[arg];\n                            }\n\n                            break;\n                        case 'string':\n                            instruction.command.collection = h.arrayFromList(self.dom.parent.querySelectorAll(arg));\n\n                            break;\n                        case 'object':\n                            if (arg && arg.length) {\n                                instruction.command.collection = arg;\n                            } else if (h.isElement(arg, self.dom.document)) {\n                                instruction.command.collection = [arg];\n                            } else {\n                                // Remove command\n\n                                h.extend(instruction.command, arg);\n                            }\n\n                            break;\n                        case 'boolean':\n                            instruction.animate = arg;\n\n                            break;\n                        case 'function':\n                            instruction.callback = arg;\n\n                            break;\n                    }\n                }\n\n                if (instruction.command.collection.length) {\n                    for (i = 0; target = self.targets[i]; i++) {\n                        if (instruction.command.collection.indexOf(target.dom.el) > -1) {\n                            instruction.command.targets.push(target);\n                        }\n                    }\n                }\n\n                if (!instruction.command.targets.length && self.config.debug.showWarnings) {\n                    console.warn(mixitup.messages.warningRemoveNoElements());\n                }\n\n                h.freeze(instruction);\n\n                return instruction;\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since   3.0.0\n             * @param   {Array<*>}  args\n             * @return  {mixitup.UserInstruction}\n             */\n\n            parseDatasetArgs: function (args) {\n                var self = this,\n                    instruction = new mixitup.UserInstruction(),\n                    arg = null,\n                    i = -1;\n\n                instruction.animate = self.config.animation.enable;\n                instruction.command = new mixitup.CommandDataset();\n\n                for (i = 0; i < args.length; i++) {\n                    arg = args[i];\n\n                    if (arg === null) continue;\n\n                    switch (typeof arg) {\n                        case 'object':\n                            if (Array.isArray(arg) || typeof arg.length === 'number') {\n                                instruction.command.dataset = arg;\n                            } else {\n                                // Change layout command\n\n                                h.extend(instruction.command, arg);\n                            }\n\n                            break;\n                        case 'boolean':\n                            instruction.animate = arg;\n\n                            break;\n                        case 'function':\n                            instruction.callback = arg;\n\n                            break;\n                    }\n                }\n\n                h.freeze(instruction);\n\n                return instruction;\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since   3.0.0\n             * @param   {Array<*>}  args\n             * @return  {mixitup.UserInstruction}\n             */\n\n            parseChangeLayoutArgs: function (args) {\n                var self = this,\n                    instruction = new mixitup.UserInstruction(),\n                    arg = null,\n                    i = -1;\n\n                instruction.animate = self.config.animation.enable;\n                instruction.command = new mixitup.CommandChangeLayout();\n\n                for (i = 0; i < args.length; i++) {\n                    arg = args[i];\n\n                    if (arg === null) continue;\n\n                    switch (typeof arg) {\n                        case 'string':\n                            instruction.command.containerClassName = arg;\n\n                            break;\n                        case 'object':\n                            // Change layout command\n\n                            h.extend(instruction.command, arg);\n\n                            break;\n                        case 'boolean':\n                            instruction.animate = arg;\n\n                            break;\n                        case 'function':\n                            instruction.callback = arg;\n\n                            break;\n                    }\n                }\n\n                h.freeze(instruction);\n\n                return instruction;\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since       3.0.0\n             * @param       {mixitup.QueueItem}         queueItem\n             * @return      {Promise.<mixitup.State>}\n             */\n\n            queueMix: function (queueItem) {\n                var self = this,\n                    deferred = null,\n                    toggleSelector = '';\n\n                self.callActions('beforeQueueMix', arguments);\n\n                deferred = h.defer(mixitup.libraries);\n\n                if (self.config.animation.queue && self.queue.length < self.config.animation.queueLimit) {\n                    queueItem.deferred = deferred;\n\n                    self.queue.push(queueItem);\n\n                    // Keep controls in sync with user interactions. Mixer will catch up as it drains the queue.\n\n                    if (self.config.controls.enable) {\n                        if (self.isToggling) {\n                            self.buildToggleArray(queueItem.instruction.command);\n\n                            toggleSelector = self.getToggleSelector();\n\n                            self.updateControls({\n                                filter: {\n                                    selector: toggleSelector\n                                }\n                            });\n                        } else {\n                            self.updateControls(queueItem.instruction.command);\n                        }\n                    }\n                } else {\n                    if (self.config.debug.showWarnings) {\n                        console.warn(mixitup.messages.warningMultimixInstanceQueueFull());\n                    }\n\n                    deferred.resolve(self.state);\n\n                    mixitup.events.fire('mixBusy', self.dom.container, {\n                        state: self.state,\n                        instance: self\n                    }, self.dom.document);\n\n                    if (typeof self.config.callbacks.onMixBusy === 'function') {\n                        self.config.callbacks.onMixBusy.call(self.dom.container, self.state, self);\n                    }\n                }\n\n                return self.callFilters('promiseQueueMix', deferred.promise, arguments);\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since   3.0.0\n             * @param   {Array.<object>}    newDataset\n             * @return  {Operation}\n             */\n\n            getDataOperation: function (newDataset) {\n                var self = this,\n                    operation = new mixitup.Operation(),\n                    startDataset = [];\n\n                operation = self.callFilters('operationUnmappedGetDataOperation', operation, arguments);\n\n                if (self.dom.targets.length && !(startDataset = (self.state.activeDataset || [])).length) {\n                    throw new Error(mixitup.messages.errorDatasetNotSet());\n                }\n\n                operation.id = h.randomHex();\n                operation.startState = self.state;\n                operation.startDataset = startDataset;\n                operation.newDataset = newDataset.slice();\n\n                self.diffDatasets(operation);\n\n                operation.startOrder = self.targets;\n                operation.newOrder = operation.show;\n\n                if (self.config.animation.enable) {\n                    self.getStartMixData(operation);\n                    self.setInter(operation);\n\n                    operation.docState = h.getDocumentState(self.dom.document);\n\n                    self.getInterMixData(operation);\n                    self.setFinal(operation);\n                    self.getFinalMixData(operation);\n\n                    self.parseEffects();\n\n                    operation.hasEffect = self.hasEffect();\n\n                    self.getTweenData(operation);\n                }\n\n                self.targets = operation.show.slice();\n\n                operation.newState = self.buildState(operation);\n\n                // NB: Targets to be removed must be included in `self.targets` for removal during clean up,\n                // but are added after state is built so that state is accurate\n\n                Array.prototype.push.apply(self.targets, operation.toRemove);\n\n                operation = self.callFilters('operationMappedGetDataOperation', operation, arguments);\n\n                return operation;\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since   3.0.0\n             * @param   {mixitup.Operation} operation\n             * @return  {void}\n             */\n\n            diffDatasets: function (operation) {\n                var self = this,\n                    persistantStartIds = [],\n                    persistantNewIds = [],\n                    insertedTargets = [],\n                    data = null,\n                    target = null,\n                    el = null,\n                    frag = null,\n                    nextEl = null,\n                    uids = {},\n                    id = '',\n                    i = -1;\n\n                self.callActions('beforeDiffDatasets', arguments);\n\n                for (i = 0; data = operation.newDataset[i]; i++) {\n                    if (typeof (id = data[self.config.data.uidKey]) === 'undefined' || id.toString().length < 1) {\n                        throw new TypeError(mixitup.messages.errorDatasetInvalidUidKey({\n                            uidKey: self.config.data.uidKey\n                        }));\n                    }\n\n                    if (!uids[id]) {\n                        uids[id] = true;\n                    } else {\n                        throw new Error(mixitup.messages.errorDatasetDuplicateUid({\n                            uid: id\n                        }));\n                    }\n\n                    if ((target = self.cache[id]) instanceof mixitup.Target) {\n                        // Already in cache\n\n                        if (self.config.data.dirtyCheck && !h.deepEquals(data, target.data)) {\n                            // change detected\n\n                            el = target.render(data);\n\n                            target.data = data;\n\n                            if (el !== target.dom.el) {\n                                // Update target element reference\n\n                                if (target.isInDom) {\n                                    target.unbindEvents();\n\n                                    self.dom.parent.replaceChild(el, target.dom.el);\n                                }\n\n                                if (!target.isShown) {\n                                    el.style.display = 'none';\n                                }\n\n                                target.dom.el = el;\n\n                                if (target.isInDom) {\n                                    target.bindEvents();\n                                }\n                            }\n                        }\n\n                        el = target.dom.el;\n                    } else {\n                        // New target\n\n                        target = new mixitup.Target();\n\n                        target.init(null, self, data);\n\n                        target.hide();\n                    }\n\n                    if (!target.isInDom) {\n                        // Adding to DOM\n\n                        if (!frag) {\n                            // Open frag\n\n                            frag = self.dom.document.createDocumentFragment();\n                        }\n\n                        if (frag.lastElementChild) {\n                            frag.appendChild(self.dom.document.createTextNode(' '));\n                        }\n\n                        frag.appendChild(target.dom.el);\n\n                        target.isInDom = true;\n\n                        target.unbindEvents();\n                        target.bindEvents();\n                        target.hide();\n\n                        operation.toShow.push(target);\n\n                        insertedTargets.push(target);\n                    } else {\n                        // Already in DOM\n\n                        nextEl = target.dom.el.nextElementSibling;\n\n                        persistantNewIds.push(id);\n\n                        if (frag) {\n                            // Close and insert previously opened frag\n\n                            if (frag.lastElementChild) {\n                                frag.appendChild(self.dom.document.createTextNode(' '));\n                            }\n\n                            self.insertDatasetFrag(frag, target.dom.el, insertedTargets);\n\n                            frag = null;\n                        }\n                    }\n\n                    operation.show.push(target);\n                }\n\n                if (frag) {\n                    // Unclosed frag remaining\n\n                    nextEl = nextEl || self.config.layout.siblingAfter;\n\n                    if (nextEl) {\n                        frag.appendChild(self.dom.document.createTextNode(' '));\n                    }\n\n                    self.insertDatasetFrag(frag, nextEl, insertedTargets);\n                }\n\n                for (i = 0; data = operation.startDataset[i]; i++) {\n                    id = data[self.config.data.uidKey];\n\n                    target = self.cache[id];\n\n                    if (operation.show.indexOf(target) < 0) {\n                        // Previously shown but now absent\n\n                        operation.hide.push(target);\n                        operation.toHide.push(target);\n                        operation.toRemove.push(target);\n                    } else {\n                        persistantStartIds.push(id);\n                    }\n                }\n\n                if (!h.isEqualArray(persistantStartIds, persistantNewIds)) {\n                    operation.willSort = true;\n                }\n\n                self.callActions('afterDiffDatasets', arguments);\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since   3.1.5\n             * @param   {DocumentFragment}          frag\n             * @param   {(HTMLElement|null)}        nextEl\n             * @param   {Array.<mixitup.Target>}    targets\n             * @return  {void}\n             */\n\n            insertDatasetFrag: function (frag, nextEl, targets) {\n                var self = this;\n                var insertAt = nextEl ? h.arrayFromList(self.dom.parent.children).indexOf(nextEl) : self.targets.length;\n\n                self.dom.parent.insertBefore(frag, nextEl);\n\n                while (targets.length) {\n                    self.targets.splice(insertAt, 0, targets.shift());\n\n                    insertAt++;\n                }\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since   3.0.0\n             * @param   {mixitup.CommandSort} sortCommandA\n             * @param   {mixitup.CommandSort} sortCommandB\n             * @return  {boolean}\n             */\n\n            willSort: function (sortCommandA, sortCommandB) {\n                var self = this,\n                    result = false;\n\n                if (\n                    self.config.behavior.liveSort ||\n                    sortCommandA.order === 'random' ||\n                    sortCommandA.attribute !== sortCommandB.attribute ||\n                    sortCommandA.order !== sortCommandB.order ||\n                    sortCommandA.collection !== sortCommandB.collection ||\n                    (sortCommandA.next === null && sortCommandB.next) ||\n                    (sortCommandA.next && sortCommandB.next === null)\n                ) {\n                    result = true;\n                } else if (sortCommandA.next && sortCommandB.next) {\n                    result = self.willSort(sortCommandA.next, sortCommandB.next);\n                } else {\n                    result = false;\n                }\n\n                return self.callFilters('resultWillSort', result, arguments);\n            },\n\n            /**\n             * A shorthand method for `.filter('all')`. Shows all targets in the container.\n             *\n             * @example\n             *\n             * .show()\n             *\n             * @example <caption>Example: Showing all targets</caption>\n             *\n             * mixer.show()\n             *     .then(function(state) {\n             *         console.log(state.totalShow === state.totalTargets); // true\n             *     });\n             *\n             * @public\n             * @instance\n             * @since       3.0.0\n             * @return      {Promise.<mixitup.State>}\n             */\n\n            show: function () {\n                var self = this;\n\n                return self.filter('all');\n            },\n\n            /**\n             * A shorthand method for `.filter('none')`. Hides all targets in the container.\n             *\n             * @example\n             *\n             * .hide()\n             *\n             * @example <caption>Example: Hiding all targets</caption>\n             *\n             * mixer.hide()\n             *     .then(function(state) {\n             *         console.log(state.totalShow === 0); // true\n             *         console.log(state.totalHide === state.totalTargets); // true\n             *     });\n             *\n             * @public\n             * @instance\n             * @since       3.0.0\n             * @return      {Promise.<mixitup.State>}\n             */\n\n            hide: function () {\n                var self = this;\n\n                return self.filter('none');\n            },\n\n            /**\n             * Returns a boolean indicating whether or not a MixItUp operation is\n             * currently in progress.\n             *\n             * @example\n             *\n             * .isMixing()\n             *\n             * @example <caption>Example: Checking the status of a mixer</caption>\n             *\n             * mixer.sort('random', function() {\n             *     console.log(mixer.isMixing()) // false\n             * });\n             *\n             * console.log(mixer.isMixing()) // true\n             *\n             * @public\n             * @instance\n             * @since   2.0.0\n             * @return  {boolean}\n             */\n\n            isMixing: function () {\n                var self = this;\n\n                return self.isBusy;\n            },\n\n            /**\n             * Filters all targets in the container by a provided selector string, or the values `'all'`\n             * or `'none'`. Only targets matching the selector will be shown.\n             *\n             * @example\n             *\n             * .filter(selector [, animate] [, callback])\n             *\n             * @example <caption>Example 1: Filtering targets by a class selector</caption>\n             *\n             * mixer.filter('.category-a')\n             *     .then(function(state) {\n             *         console.log(state.totalShow === containerEl.querySelectorAll('.category-a').length); // true\n             *     });\n             *\n             * @example <caption>Example 2: Filtering targets by an attribute selector</caption>\n             *\n             * mixer.filter('[data-category~=\"a\"]')\n             *     .then(function(state) {\n             *         console.log(state.totalShow === containerEl.querySelectorAll('[data-category~=\"a\"]').length); // true\n             *     });\n             *\n             * @example <caption>Example 3: Filtering targets by a compound selector</caption>\n             *\n             * // Show only those targets with the classes 'category-a' AND 'category-b'\n             *\n             * mixer.filter('.category-a.category-c')\n             *     .then(function(state) {\n             *         console.log(state.totalShow === containerEl.querySelectorAll('.category-a.category-c').length); // true\n             *     });\n             *\n             * @example <caption>Example 4: Filtering via an element collection</caption>\n             *\n             * var collection = Array.from(container.querySelectorAll('.mix'));\n             *\n             * console.log(collection.length); // 34\n             *\n             * // Filter the collection manually using Array.prototype.filter\n             *\n             * var filtered = collection.filter(function(target) {\n             *    return parseInt(target.getAttribute('data-price')) > 10;\n             * });\n             *\n             * console.log(filtered.length); // 22\n             *\n             * // Pass the filtered collection to MixItUp\n             *\n             * mixer.filter(filtered)\n             *    .then(function(state) {\n             *        console.log(state.activeFilter.collection.length === 22); // true\n             *    });\n             *\n             * @public\n             * @instance\n             * @since       2.0.0\n             * @param       {(string|HTMLElement|Array.<HTMLElement>)} selector\n             *      Any valid CSS selector (i.e. `'.category-a'`), or the values `'all'` or `'none'`. The filter method also accepts a reference to single target element or a collection of target elements to show.\n             * @param       {boolean}   [animate=true]\n             *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n             * @param       {function}  [callback=null]\n             *      An optional callback function to be invoked after the operation has completed.\n             * @return      {Promise.<mixitup.State>}\n             *      A promise resolving with the current state object.\n             */\n\n            filter: function () {\n                var self = this,\n                    instruction = self.parseFilterArgs(arguments);\n\n                return self.multimix({\n                    filter: instruction.command\n                }, instruction.animate, instruction.callback);\n            },\n\n            /**\n             * Adds an additional selector to the currently active filter selector, concatenating\n             * as per the logic defined in `controls.toggleLogic`.\n             *\n             * @example\n             *\n             * .toggleOn(selector [, animate] [, callback])\n             *\n             * @example <caption>Example: Toggling on a filter selector</caption>\n             *\n             * console.log(mixer.getState().activeFilter.selector); // '.category-a'\n             *\n             * mixer.toggleOn('.category-b')\n             *     .then(function(state) {\n             *         console.log(state.activeFilter.selector); // '.category-a, .category-b'\n             *     });\n             *\n             * @public\n             * @instance\n             * @since       3.0.0\n             * @param       {string}    selector\n             *      Any valid CSS selector (i.e. `'.category-a'`)\n             * @param       {boolean}   [animate=true]\n             *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n             * @param       {function}  [callback=null]\n             *      An optional callback function to be invoked after the operation has completed.\n             * @return      {Promise.<mixitup.State>}\n             *      A promise resolving with the current state object.\n             */\n\n            toggleOn: function () {\n                var self = this,\n                    instruction = self.parseFilterArgs(arguments),\n                    selector = instruction.command.selector,\n                    toggleSelector = '';\n\n                self.isToggling = true;\n\n                if (self.toggleArray.indexOf(selector) < 0) {\n                    self.toggleArray.push(selector);\n                }\n\n                toggleSelector = self.getToggleSelector();\n\n                return self.multimix({\n                    filter: toggleSelector\n                }, instruction.animate, instruction.callback);\n            },\n\n            /**\n             * Removes a selector from the active filter selector.\n             *\n             * @example\n             *\n             * .toggleOff(selector [, animate] [, callback])\n             *\n             * @example <caption>Example: Toggling off a filter selector</caption>\n             *\n             * console.log(mixer.getState().activeFilter.selector); // '.category-a, .category-b'\n             *\n             * mixer.toggleOff('.category-b')\n             *     .then(function(state) {\n             *         console.log(state.activeFilter.selector); // '.category-a'\n             *     });\n             *\n             * @public\n             * @instance\n             * @since       3.0.0\n             * @param       {string}    selector\n             *      Any valid CSS selector (i.e. `'.category-a'`)\n             * @param       {boolean}   [animate=true]\n             *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n             * @param       {function}  [callback=null]\n             *      An optional callback function to be invoked after the operation has completed.\n             * @return      {Promise.<mixitup.State>}\n             *      A promise resolving with the current state object.\n             */\n\n            toggleOff: function () {\n                var self = this,\n                    instruction = self.parseFilterArgs(arguments),\n                    selector = instruction.command.selector,\n                    selectorIndex = self.toggleArray.indexOf(selector),\n                    toggleSelector = '';\n\n                self.isToggling = true;\n\n                if (selectorIndex > -1) {\n                    self.toggleArray.splice(selectorIndex, 1);\n                }\n\n                toggleSelector = self.getToggleSelector();\n\n                return self.multimix({\n                    filter: toggleSelector\n                }, instruction.animate, instruction.callback);\n            },\n\n            /**\n             * Sorts all targets in the container according to a provided sort string.\n             *\n             * @example\n             *\n             * .sort(sortString [, animate] [, callback])\n             *\n             * @example <caption>Example 1: Sorting by the default DOM order</caption>\n             *\n             * // Reverse the default order of the targets\n             *\n             * mixer.sort('default:desc')\n             *     .then(function(state) {\n             *         console.log(state.activeSort.attribute === 'default'); // true\n             *         console.log(state.activeSort.order === 'desc'); // true\n             *     });\n             *\n             * @example <caption>Example 2: Sorting by a custom data-attribute</caption>\n             *\n             * // Sort the targets by the value of a `data-published-date` attribute\n             *\n             * mixer.sort('published-date:asc')\n             *     .then(function(state) {\n             *         console.log(state.activeSort.attribute === 'published-date'); // true\n             *         console.log(state.activeSort.order === 'asc'); // true\n             *     });\n             *\n             * @example <caption>Example 3: Sorting by multiple attributes</caption>\n             *\n             * // Sort the targets by the value of a `data-published-date` attribute, then by `data-title`\n             *\n             * mixer.sort('published-date:desc data-title:asc')\n             *     .then(function(state) {\n             *         console.log(state.activeSort.attribute === 'published-date'); // true\n             *         console.log(state.activeSort.order === 'desc'); // true\n             *\n             *         console.log(state.activeSort.next.attribute === 'title'); // true\n             *         console.log(state.activeSort.next.order === 'asc'); // true\n             *     });\n             *\n             * @example <caption>Example 4: Sorting by random</caption>\n             *\n             * mixer.sort('random')\n             *     .then(function(state) {\n             *         console.log(state.activeSort.order === 'random') // true\n             *     });\n             *\n             * @example <caption>Example 5: Sorting via an element collection</caption>\n             *\n             * var collection = Array.from(container.querySelectorAll('.mix'));\n             *\n             * // Swap the position of two elements in the collection:\n             *\n             * var temp = collection[1];\n             *\n             * collection[1] = collection[0];\n             * collection[0] = temp;\n             *\n             * // Pass the sorted collection to MixItUp\n             *\n             * mixer.sort(collection)\n             *     .then(function(state) {\n             *         console.log(state.targets[0] === collection[0]); // true\n             *     });\n             *\n             * @public\n             * @instance\n             * @since       2.0.0\n             * @param       {(string|Array.<HTMLElement>)}    sortString\n             *      A valid sort string (e.g. `'default'`, `'published-date:asc'`, or `'random'`). The sort method also accepts an array of all target elements in a user-defined order.\n             * @param       {boolean}   [animate=true]\n             *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n             * @param       {function}  [callback=null]\n             *      An optional callback function to be invoked after the operation has completed.\n             * @return      {Promise.<mixitup.State>}\n             *      A promise resolving with the current state object.\n             */\n\n            sort: function () {\n                var self = this,\n                    instruction = self.parseSortArgs(arguments);\n\n                return self.multimix({\n                    sort: instruction.command\n                }, instruction.animate, instruction.callback);\n            },\n\n            /**\n             * Changes the layout of the container by adding, removing or updating a\n             * layout-specific class name. If `animation.animateResizetargets` is\n             * enabled, MixItUp will attempt to gracefully animate the width, height,\n             * and position of targets between layout states.\n             *\n             * @example\n             *\n             * .changeLayout(containerClassName [, animate] [, callback])\n             *\n             * @example <caption>Example 1: Adding a new class name to the container</caption>\n             *\n             * mixer.changeLayout('container-list')\n             *      .then(function(state) {\n             *          console.log(state.activeContainerClass === 'container-list'); // true\n             *      });\n             *\n             * @example <caption>Example 2: Removing a previously added class name from the container</caption>\n             *\n             * mixer.changeLayout('')\n             *      .then(function(state) {\n             *          console.log(state.activeContainerClass === ''); // true\n             *      });\n             *\n             * @public\n             * @instance\n             * @since       2.0.0\n             * @param       {string}    containerClassName\n             *      A layout-specific class name to add to the container.\n             * @param       {boolean}   [animate=true]\n             *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n             * @param       {function}  [callback=null]\n             *      An optional callback function to be invoked after the operation has completed.\n             * @return      {Promise.<mixitup.State>}\n             *      A promise resolving with the current state object.\n             */\n\n            changeLayout: function () {\n                var self = this,\n                    instruction = self.parseChangeLayoutArgs(arguments);\n\n                return self.multimix({\n                    changeLayout: instruction.command\n                }, instruction.animate, instruction.callback);\n            },\n\n            /**\n             * Updates the contents and order of the container to reflect the provided dataset,\n             * if the dataset API is in use.\n             *\n             * The dataset API is designed for use in API-driven JavaScript applications, and\n             * can be used instead of DOM-based methods such as `.filter()`, `.sort()`,\n             * `.insert()`, etc. When used, insertion, removal, sorting and pagination can be\n             * achieved purely via changes to your data model, without the uglyness of having\n             * to interact with or query the DOM directly.\n             *\n             * @example\n             *\n             * .dataset(dataset [, animate] [, callback])\n             *\n             * @example <caption>Example 1: Rendering a dataset</caption>\n             *\n             * var myDataset = [\n             *     {id: 1, ...},\n             *     {id: 2, ...},\n             *     {id: 3, ...}\n             * ];\n             *\n             * mixer.dataset(myDataset)\n             *     .then(function(state) {\n             *         console.log(state.totalShow === 3); // true\n             *     });\n             *\n             * @example <caption>Example 2: Sorting a dataset</caption>\n             *\n             * // Create a new dataset in reverse order\n             *\n             * var newDataset = myDataset.slice().reverse();\n             *\n             * mixer.dataset(newDataset)\n             *     .then(function(state) {\n             *         console.log(state.activeDataset[0] === myDataset[2]); // true\n             *     });\n             *\n             * @example <caption>Example 3: Removing an item from the dataset</caption>\n             *\n             * console.log(myDataset.length); // 3\n             *\n             * // Create a new dataset with the last item removed.\n             *\n             * var newDataset = myDataset.slice().pop();\n             *\n             * mixer.dataset(newDataset)\n             *     .then(function(state) {\n             *         console.log(state.totalShow === 2); // true\n             *     });\n             *\n             * @public\n             * @instance\n             * @since       3.0.0\n             * @param       {Array.<object>}    dataset\n             *      An array of objects, each one representing the underlying data model of a target to be rendered.\n             * @param       {boolean}           [animate=true]\n             *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n             * @param       {function}          [callback=null]\n             *      An optional callback function to be invoked after the operation has completed.\n             * @return      {Promise.<mixitup.State>}\n             *      A promise resolving with the current state object.\n             */\n\n            dataset: function () {\n                var self = this,\n                    instruction = self.parseDatasetArgs(arguments),\n                    operation = null,\n                    queueItem = null,\n                    animate = false;\n\n                self.callActions('beforeDataset', arguments);\n\n                if (!self.isBusy) {\n                    if (instruction.callback) self.userCallback = instruction.callback;\n\n                    animate = (instruction.animate ^ self.config.animation.enable) ? instruction.animate : self.config.animation.enable;\n\n                    operation = self.getDataOperation(instruction.command.dataset);\n\n                    return self.goMix(animate, operation);\n                } else {\n                    queueItem = new mixitup.QueueItem();\n\n                    queueItem.args = arguments;\n                    queueItem.instruction = instruction;\n\n                    return self.queueMix(queueItem);\n                }\n            },\n\n            /**\n             * Performs simultaneous `filter`, `sort`, `insert`, `remove` and `changeLayout`\n             * operations as requested.\n             *\n             * @example\n             *\n             * .multimix(multimixCommand [, animate] [, callback])\n             *\n             * @example <caption>Example 1: Performing simultaneous filtering and sorting</caption>\n             *\n             * mixer.multimix({\n             *     filter: '.category-b',\n             *     sort: 'published-date:desc'\n             * })\n             *     .then(function(state) {\n             *         console.log(state.activeFilter.selector === '.category-b'); // true\n             *         console.log(state.activeSort.attribute === 'published-date'); // true\n             *     });\n             *\n             * @example <caption>Example 2: Performing simultaneous sorting, insertion, and removal</caption>\n             *\n             * console.log(mixer.getState().totalShow); // 6\n             *\n             * // NB: When inserting via `multimix()`, an object should be provided as the value\n             * // for the `insert` portion of the command, allowing for a collection of elements\n             * // and an insertion index to be specified.\n             *\n             * mixer.multimix({\n             *     sort: 'published-date:desc', // Sort the container, including any new elements\n             *     insert: {\n             *         collection: [newElementReferenceA, newElementReferenceB], // Add 2 new elements at index 5\n             *         index: 5\n             *     },\n             *     remove: existingElementReference // Remove 1 existing element\n             * })\n             *     .then(function(state) {\n             *         console.log(state.activeSort.attribute === 'published-date'); // true\n             *         console.log(state.totalShow === 7); // true\n             *     });\n             *\n             * @public\n             * @instance\n             * @since       2.0.0\n             * @param       {object}    multimixCommand\n             *      An object containing one or more things to do\n             * @param       {boolean}   [animate=true]\n             *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n             * @param       {function}  [callback=null]\n             *      An optional callback function to be invoked after the operation has completed.\n             * @return      {Promise.<mixitup.State>}\n             *      A promise resolving with the current state object.\n             */\n\n            multimix: function () {\n                var self = this,\n                    operation = null,\n                    animate = false,\n                    queueItem = null,\n                    instruction = self.parseMultimixArgs(arguments);\n\n                self.callActions('beforeMultimix', arguments);\n\n                if (!self.isBusy) {\n                    operation = self.getOperation(instruction.command);\n\n                    if (self.config.controls.enable) {\n                        // Update controls for API calls\n\n                        if (instruction.command.filter && !self.isToggling) {\n                            // As we are not toggling, reset the toggle array\n                            // so new filter overrides existing toggles\n\n                            self.toggleArray.length = 0;\n                            self.buildToggleArray(operation.command);\n                        }\n\n                        if (self.queue.length < 1) {\n                            self.updateControls(operation.command);\n                        }\n                    }\n\n                    if (instruction.callback) self.userCallback = instruction.callback;\n\n                    // Always allow the instruction to override the instance setting\n\n                    animate = (instruction.animate ^ self.config.animation.enable) ?\n                        instruction.animate :\n                        self.config.animation.enable;\n\n                    self.callFilters('operationMultimix', operation, arguments);\n\n                    return self.goMix(animate, operation);\n                } else {\n                    queueItem = new mixitup.QueueItem();\n\n                    queueItem.args = arguments;\n                    queueItem.instruction = instruction;\n                    queueItem.triggerElement = self.lastClicked;\n                    queueItem.isToggling = self.isToggling;\n\n                    return self.queueMix(queueItem);\n                }\n            },\n\n            /**\n             * @private\n             * @instance\n             * @since   3.0.0\n             * @param   {object}            multimixCommand\n             * @param   {boolean}           [isPreFetch]\n             *      An optional boolean indicating that the operation is being pre-fetched for execution at a later time.\n             * @return  {Operation|null}\n             */\n\n            getOperation: function (multimixCommand) {\n                var self = this,\n                    sortCommand = multimixCommand.sort,\n                    filterCommand = multimixCommand.filter,\n                    changeLayoutCommand = multimixCommand.changeLayout,\n                    removeCommand = multimixCommand.remove,\n                    insertCommand = multimixCommand.insert,\n                    operation = new mixitup.Operation();\n\n                operation = self.callFilters('operationUnmappedGetOperation', operation, arguments);\n\n                operation.id = h.randomHex();\n                operation.command = multimixCommand;\n                operation.startState = self.state;\n                operation.triggerElement = self.lastClicked;\n\n                if (self.isBusy) {\n                    if (self.config.debug.showWarnings) {\n                        console.warn(mixitup.messages.warningGetOperationInstanceBusy());\n                    }\n\n                    return null;\n                }\n\n                if (insertCommand) {\n                    self.insertTargets(insertCommand, operation);\n                }\n\n                if (removeCommand) {\n                    operation.toRemove = removeCommand.targets;\n                }\n\n                operation.startSort = operation.newSort = operation.startState.activeSort;\n                operation.startOrder = operation.newOrder = self.targets;\n\n                if (sortCommand) {\n                    operation.startSort = operation.startState.activeSort;\n                    operation.newSort = sortCommand;\n\n                    operation.willSort = self.willSort(sortCommand, operation.startState.activeSort);\n\n                    if (operation.willSort) {\n                        self.sortOperation(operation);\n                    }\n                }\n\n                operation.startFilter = operation.startState.activeFilter;\n\n                if (filterCommand) {\n                    operation.newFilter = filterCommand;\n                } else {\n                    operation.newFilter = h.extend(new mixitup.CommandFilter(), operation.startFilter);\n                }\n\n                if (operation.newFilter.selector === 'all') {\n                    operation.newFilter.selector = self.config.selectors.target;\n                } else if (operation.newFilter.selector === 'none') {\n                    operation.newFilter.selector = '';\n                }\n\n                self.filterOperation(operation);\n\n                operation.startContainerClassName = operation.startState.activeContainerClassName;\n\n                if (changeLayoutCommand) {\n                    operation.newContainerClassName = changeLayoutCommand.containerClassName;\n\n                    if (operation.newContainerClassName !== operation.startContainerClassName) {\n                        operation.willChangeLayout = true;\n                    }\n                } else {\n                    operation.newContainerClassName = operation.startContainerClassName;\n                }\n\n                if (self.config.animation.enable) {\n                    // Populate the operation's position data\n\n                    self.getStartMixData(operation);\n                    self.setInter(operation);\n\n                    operation.docState = h.getDocumentState(self.dom.document);\n\n                    self.getInterMixData(operation);\n                    self.setFinal(operation);\n                    self.getFinalMixData(operation);\n\n                    self.parseEffects();\n\n                    operation.hasEffect = self.hasEffect();\n\n                    self.getTweenData(operation);\n                }\n\n                if (operation.willSort) {\n                    self.targets = operation.newOrder;\n                }\n\n                operation.newState = self.buildState(operation);\n\n                return self.callFilters('operationMappedGetOperation', operation, arguments);\n            },\n\n            /**\n             * Renders a previously created operation at a specific point in its path, as\n             * determined by a multiplier between 0 and 1.\n             *\n             * @example\n             * .tween(operation, multiplier)\n             *\n             * @private\n             * @instance\n             * @since   3.0.0\n             * @param   {mixitup.Operation}     operation\n             *      An operation object created via the `getOperation` method\n             *\n             * @param   {Float}                 multiplier\n             *      Any number between 0 and 1 representing the percentage complete of the operation\n             * @return  {void}\n             */\n\n            tween: function (operation, multiplier) {\n                var target = null,\n                    posData = null,\n                    toHideIndex = -1,\n                    i = -1;\n\n                multiplier = Math.min(multiplier, 1);\n                multiplier = Math.max(multiplier, 0);\n\n                for (i = 0; target = operation.show[i]; i++) {\n                    posData = operation.showPosData[i];\n\n                    target.applyTween(posData, multiplier);\n                }\n\n                for (i = 0; target = operation.hide[i]; i++) {\n                    if (target.isShown) {\n                        target.hide();\n                    }\n\n                    if ((toHideIndex = operation.toHide.indexOf(target)) > -1) {\n                        posData = operation.toHidePosData[toHideIndex];\n\n                        if (!target.isShown) {\n                            target.show();\n                        }\n\n                        target.applyTween(posData, multiplier);\n                    }\n                }\n            },\n\n            /**\n             * Inserts one or more new target elements into the container at a specified\n             * index.\n             *\n             * To be indexed as targets, new elements must match the `selectors.target`\n             * selector (`'.mix'` by default).\n             *\n             * @example\n             *\n             * .insert(newElements [, index] [, animate], [, callback])\n             *\n             * @example <caption>Example 1: Inserting a single element via reference</caption>\n             *\n             * console.log(mixer.getState().totalShow); // 0\n             *\n             * // Create a new element\n             *\n             * var newElement = document.createElement('div');\n             * newElement.classList.add('mix');\n             *\n             * mixer.insert(newElement)\n             *     .then(function(state) {\n             *         console.log(state.totalShow === 1); // true\n             *     });\n             *\n             * @example <caption>Example 2: Inserting a single element via HTML string</caption>\n             *\n             * console.log(mixer.getState().totalShow); // 1\n             *\n             * // Create a new element via reference\n             *\n             * var newElementHtml = '&lt;div class=\"mix\"&gt;&lt;/div&gt;';\n             *\n             * // Create and insert the new element at index 1\n             *\n             * mixer.insert(newElementHtml, 1)\n             *     .then(function(state) {\n             *         console.log(state.totalShow === 2); // true\n             *         console.log(state.show[1].outerHTML === newElementHtml); // true\n             *     });\n             *\n             * @example <caption>Example 3: Inserting multiple elements via reference</caption>\n             *\n             * console.log(mixer.getState().totalShow); // 2\n             *\n             * // Create an array of new elements to insert.\n             *\n             * var newElement1 = document.createElement('div');\n             * var newElement2 = document.createElement('div');\n             *\n             * newElement1.classList.add('mix');\n             * newElement2.classList.add('mix');\n             *\n             * var newElementsCollection = [newElement1, newElement2];\n             *\n             * // Insert the new elements starting at index 1\n             *\n             * mixer.insert(newElementsCollection, 1)\n             *     .then(function(state) {\n             *         console.log(state.totalShow === 4); // true\n             *         console.log(state.show[1] === newElement1); // true\n             *         console.log(state.show[2] === newElement2); // true\n             *     });\n             *\n             * @example <caption>Example 4: Inserting a jQuery collection object containing one or more elements</caption>\n             *\n             * console.log(mixer.getState().totalShow); // 4\n             *\n             * var $newElement = $('&lt;div class=\"mix\"&gt;&lt;/div&gt;');\n             *\n             * // Insert the new elements starting at index 3\n             *\n             * mixer.insert($newElement, 3)\n             *     .then(function(state) {\n             *         console.log(state.totalShow === 5); // true\n             *         console.log(state.show[3] === $newElement[0]); // true\n             *     });\n             *\n             * @public\n             * @instance\n             * @since       2.0.0\n             * @param       {(HTMLElement|Array.<HTMLElement>|string)}    newElements\n             *      A reference to a single element to insert, an array-like collection of elements, or an HTML string representing a single element.\n             * @param       {number}    index=0\n             *      The index at which to insert the new element(s). `0` by default.\n             * @param       {boolean}   [animate=true]\n             *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n             * @param       {function}  [callback=null]\n             *      An optional callback function to be invoked after the operation has completed.\n             * @return      {Promise.<mixitup.State>}\n             *      A promise resolving with the current state object.\n             */\n\n            insert: function () {\n                var self = this,\n                    args = self.parseInsertArgs(arguments);\n\n                return self.multimix({\n                    insert: args.command\n                }, args.animate, args.callback);\n            },\n\n            /**\n             * Inserts one or more new elements before a provided reference element.\n             *\n             * @example\n             *\n             * .insertBefore(newElements, referenceElement [, animate] [, callback])\n             *\n             * @example <caption>Example: Inserting a new element before a reference element</caption>\n             *\n             * // An existing reference element is chosen at index 2\n             *\n             * var referenceElement = mixer.getState().show[2];\n             *\n             * // Create a new element\n             *\n             * var newElement = document.createElement('div');\n             * newElement.classList.add('mix');\n             *\n             * mixer.insertBefore(newElement, referenceElement)\n             *     .then(function(state) {\n             *         // The new element is inserted into the container at index 2, before the reference element\n             *\n             *         console.log(state.show[2] === newElement); // true\n             *\n             *         // The reference element is now at index 3\n             *\n             *         console.log(state.show[3] === referenceElement); // true\n             *     });\n             *\n             * @public\n             * @instance\n             * @since       3.0.0\n             * @param       {(HTMLElement|Array.<HTMLElement>|string)}    newElements\n             *      A reference to a single element to insert, an array-like collection of elements, or an HTML string representing a single element.\n             * @param       {HTMLElement}    referenceElement\n             *      A reference to an existing element in the container to insert new elements before.\n             *@param       {boolean}   [animate=true]\n             *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n             * @param       {function}  [callback=null]\n             *      An optional callback function to be invoked after the operation has completed.\n             * @return      {Promise.<mixitup.State>}\n             *      A promise resolving with the current state object.\n             */\n\n            insertBefore: function () {\n                var self = this,\n                    args = self.parseInsertArgs(arguments);\n\n                return self.insert(args.command.collection, 'before', args.command.sibling, args.animate, args.callback);\n            },\n\n            /**\n             * Inserts one or more new elements after a provided reference element.\n             *\n             * @example\n             *\n             * .insertAfter(newElements, referenceElement [, animate] [, callback])\n             *\n             * @example <caption>Example: Inserting a new element after a reference element</caption>\n             *\n             * // An existing reference element is chosen at index 2\n             *\n             * var referenceElement = mixer.getState().show[2];\n             *\n             * // Create a new element\n             *\n             * var newElement = document.createElement('div');\n             * newElement.classList.add('mix');\n             *\n             * mixer.insertAfter(newElement, referenceElement)\n             *     .then(function(state) {\n             *         // The new element is inserted into the container at index 3, after the reference element\n             *\n             *         console.log(state.show[3] === newElement); // true\n             *     });\n             *\n             * @public\n             * @instance\n             * @since       3.0.0\n             * @param       {(HTMLElement|Array.<HTMLElement>|string)}    newElements\n             *      A reference to a single element to insert, an array-like collection of elements, or an HTML string representing a single element.\n             * @param       {HTMLElement}    referenceElement\n             *      A reference to an existing element in the container to insert new elements after.\n             * @param       {boolean}   [animate=true]\n             *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n             * @param       {function}  [callback=null]\n             *      An optional callback function to be invoked after the operation has completed.\n             * @return      {Promise.<mixitup.State>}\n             *      A promise resolving with the current state object.\n             */\n\n            insertAfter: function () {\n                var self = this,\n                    args = self.parseInsertArgs(arguments);\n\n                return self.insert(args.command.collection, 'after', args.command.sibling, args.animate, args.callback);\n            },\n\n            /**\n             * Inserts one or more new elements into the container before all existing targets.\n             *\n             * @example\n             *\n             * .prepend(newElements [,animate] [,callback])\n             *\n             * @example <caption>Example: Prepending a new element</caption>\n             *\n             * // Create a new element\n             *\n             * var newElement = document.createElement('div');\n             * newElement.classList.add('mix');\n             *\n             * // Insert the element into the container\n             *\n             * mixer.prepend(newElement)\n             *     .then(function(state) {\n             *         console.log(state.show[0] === newElement); // true\n             *     });\n             *\n             * @public\n             * @instance\n             * @since       3.0.0\n             * @param       {(HTMLElement|Array.<HTMLElement>|string)}    newElements\n             *      A reference to a single element to insert, an array-like collection of elements, or an HTML string representing a single element.\n             * @param       {boolean}   [animate=true]\n             *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n             * @param       {function}  [callback=null]\n             *      An optional callback function to be invoked after the operation has completed.\n             * @return      {Promise.<mixitup.State>}\n             *      A promise resolving with the current state object.\n             */\n\n            prepend: function () {\n                var self = this,\n                    args = self.parseInsertArgs(arguments);\n\n                return self.insert(0, args.command.collection, args.animate, args.callback);\n            },\n\n            /**\n             * Inserts one or more new elements into the container after all existing targets.\n             *\n             * @example\n             *\n             * .append(newElements [,animate] [,callback])\n             *\n             * @example <caption>Example: Appending a new element</caption>\n             *\n             * // Create a new element\n             *\n             * var newElement = document.createElement('div');\n             * newElement.classList.add('mix');\n             *\n             * // Insert the element into the container\n             *\n             * mixer.append(newElement)\n             *     .then(function(state) {\n             *         console.log(state.show[state.show.length - 1] === newElement); // true\n             *     });\n             *\n             * @public\n             * @instance\n             * @since       3.0.0\n             * @param       {(HTMLElement|Array.<HTMLElement>|string)}    newElements\n             *      A reference to a single element to insert, an array-like collection of elements, or an HTML string representing a single element.\n             * @param       {boolean}   [animate=true]\n             *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n             * @param       {function}  [callback=null]\n             *      An optional callback function to be invoked after the operation has completed.\n             * @return      {Promise.<mixitup.State>}\n             *      A promise resolving with the current state object.\n             */\n\n            append: function () {\n                var self = this,\n                    args = self.parseInsertArgs(arguments);\n\n                return self.insert(self.state.totalTargets, args.command.collection, args.animate, args.callback);\n            },\n\n            /**\n             * Removes one or more existing target elements from the container.\n             *\n             * @example\n             *\n             * .remove(elements [, animate] [, callback])\n             *\n             * @example <caption>Example 1: Removing an element by reference</caption>\n             *\n             * var elementToRemove = containerEl.firstElementChild;\n             *\n             * mixer.remove(elementToRemove)\n             *      .then(function(state) {\n             *          console.log(state.targets.indexOf(elementToRemove) === -1); // true\n             *      });\n             *\n             * @example <caption>Example 2: Removing a collection of elements by reference</caption>\n             *\n             * var elementsToRemove = containerEl.querySelectorAll('.category-a');\n             *\n             * console.log(elementsToRemove.length) // 3\n             *\n             * mixer.remove(elementsToRemove)\n             *      .then(function() {\n             *          console.log(containerEl.querySelectorAll('.category-a').length); // 0\n             *      });\n             *\n             * @example <caption>Example 3: Removing one or more elements by selector</caption>\n             *\n             * mixer.remove('.category-a')\n             *      .then(function() {\n             *          console.log(containerEl.querySelectorAll('.category-a').length); // 0\n             *      });\n             *\n             * @example <caption>Example 4: Removing an element by index</caption>\n             *\n             * console.log(mixer.getState.totalShow); // 4\n             *\n             * // Remove the element at index 3\n             *\n             * mixer.remove(3)\n             *      .then(function(state) {\n             *          console.log(state.totalShow); // 3\n             *          console.log(state.show[3]); // undefined\n             *      });\n             *\n             *\n             * @public\n             * @instance\n             * @since       3.0.0\n             * @param       {(HTMLElement|Array.<HTMLElement>|string|number)}    elements\n             *      A reference to a single element to remove, an array-like collection of elements, a selector string, or the index of an element to remove.\n             * @param       {boolean}   [animate=true]\n             *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n             * @param       {function}  [callback=null]\n             *      An optional callback function to be invoked after the operation has completed.\n             * @return      {Promise.<mixitup.State>}\n             *      A promise resolving with the current state object.\n             */\n\n            remove: function () {\n                var self = this,\n                    args = self.parseRemoveArgs(arguments);\n\n                return self.multimix({\n                    remove: args.command\n                }, args.animate, args.callback);\n            },\n\n            /**\n             * Retrieves the the value of any property or sub-object within the current\n             * mixitup configuration, or the whole configuration object.\n             *\n             * @example\n             *\n             * .getConfig([stringKey])\n             *\n             * @example <caption>Example 1: retrieve the entire configuration object</caption>\n             *\n             * var config = mixer.getConfig(); // Config { ... }\n             *\n             * @example <caption>Example 2: retrieve a named sub-object of configuration object</caption>\n             *\n             * var animation = mixer.getConfig('animation'); // ConfigAnimation { ... }\n             *\n             * @example <caption>Example 3: retrieve a value of configuration object via a dot-notation string key</caption>\n             *\n             * var effects = mixer.getConfig('animation.effects'); // 'fade scale'\n             *\n             * @public\n             * @instance\n             * @since       2.0.0\n             * @param       {string}    [stringKey]    A \"dot-notation\" string key\n             * @return      {*}\n             */\n\n            getConfig: function (stringKey) {\n                var self = this,\n                    value = null;\n\n                if (!stringKey) {\n                    value = self.config;\n                } else {\n                    value = h.getProperty(self.config, stringKey);\n                }\n\n                return self.callFilters('valueGetConfig', value, arguments);\n            },\n\n            /**\n             * Updates the configuration of the mixer, after it has been instantiated.\n             *\n             * See the Configuration Object documentation for a full list of avilable\n             * configuration options.\n             *\n             * @example\n             *\n             * .configure(config)\n             *\n             * @example <caption>Example 1: Updating animation options</caption>\n             *\n             * mixer.configure({\n             *     animation: {\n             *         effects: 'fade translateX(-100%)',\n             *         duration: 300\n             *     }\n             * });\n             *\n             * @example <caption>Example 2: Removing a callback after it has been set</caption>\n             *\n             * var mixer;\n             *\n             * function handleMixEndOnce() {\n             *     // Do something ..\n             *\n             *     // Then nullify the callback\n             *\n             *     mixer.configure({\n             *         callbacks: {\n             *             onMixEnd: null\n             *         }\n             *     });\n             * };\n             *\n             * // Instantiate a mixer with a callback defined\n             *\n             * mixer = mixitup(containerEl, {\n             *     callbacks: {\n             *         onMixEnd: handleMixEndOnce\n             *     }\n             * });\n             *\n             * @public\n             * @instance\n             * @since       3.0.0\n             * @param       {object}    config\n             *      An object containing one of more configuration options.\n             * @return      {void}\n             */\n\n            configure: function (config) {\n                var self = this;\n\n                self.callActions('beforeConfigure', arguments);\n\n                h.extend(self.config, config, true, true);\n\n                self.callActions('afterConfigure', arguments);\n            },\n\n            /**\n             * Returns an object containing information about the current state of the\n             * mixer. See the State Object documentation for more information.\n             *\n             * NB: State objects are immutable and should therefore be regenerated\n             * after any operation.\n             *\n             * @example\n             *\n             * .getState();\n             *\n             * @example <caption>Example: Retrieving a state object</caption>\n             *\n             * var state = mixer.getState();\n             *\n             * console.log(state.totalShow + 'targets are currently shown');\n             *\n             * @public\n             * @instance\n             * @since       2.0.0\n             * @return      {mixitup.State} An object reflecting the current state of the mixer.\n             */\n\n            getState: function () {\n                var self = this,\n                    state = null;\n\n                state = new mixitup.State();\n\n                h.extend(state, self.state);\n\n                h.freeze(state);\n\n                return self.callFilters('stateGetState', state, arguments);\n            },\n\n            /**\n             * Forces the re-indexing all targets within the container.\n             *\n             * This should only be used if some other piece of code in your application\n             * has manipulated the contents of your container, which should be avoided.\n             *\n             * If you need to add or remove target elements from the container, use\n             * the built-in `.insert()` or `.remove()` methods, and MixItUp will keep\n             * itself up to date.\n             *\n             * @example\n             *\n             * .forceRefresh()\n             *\n             * @example <caption>Example: Force refreshing the mixer after external DOM manipulation</caption>\n             *\n             * console.log(mixer.getState().totalShow); // 3\n             *\n             * // An element is removed from the container via some external DOM manipulation code:\n             *\n             * containerEl.removeChild(containerEl.firstElementChild);\n             *\n             * // The mixer does not know that the number of targets has changed:\n             *\n             * console.log(mixer.getState().totalShow); // 3\n             *\n             * mixer.forceRefresh();\n             *\n             * // After forceRefresh, the mixer is in sync again:\n             *\n             * console.log(mixer.getState().totalShow); // 2\n             *\n             * @public\n             * @instance\n             * @since 2.1.2\n             * @return {void}\n             */\n\n            forceRefresh: function () {\n                var self = this;\n\n                self.indexTargets();\n            },\n\n            /**\n             * Forces the re-rendering of all targets when using the Dataset API.\n             *\n             * By default, targets are only re-rendered when `data.dirtyCheck` is\n             * enabled, and an item's data has changed when `dataset()` is called.\n             *\n             * The `forceRender()` method allows for the re-rendering of all targets\n             * in response to some arbitrary event, such as the changing of the target\n             * render function.\n             *\n             * Targets are rendered against their existing data.\n             *\n             * @example\n             *\n             * .forceRender()\n             *\n             * @example <caption>Example: Force render targets after changing the target render function</caption>\n             *\n             * console.log(container.innerHTML); // ... &lt;span class=\"mix\"&gt;Foo&lt;/span&gt; ...\n             *\n             * mixer.configure({\n             *     render: {\n             *         target: (item) => `&lt;a href=\"/${item.slug}/\" class=\"mix\"&gt;${item.title}&lt;/a&gt;`\n             *     }\n             * });\n             *\n             * mixer.forceRender();\n             *\n             * console.log(container.innerHTML); // ... &lt;a href=\"/foo/\" class=\"mix\"&gt;Foo&lt;/a&gt; ...\n             *\n             * @public\n             * @instance\n             * @since 3.2.1\n             * @return {void}\n             */\n\n            forceRender: function () {\n                var self = this,\n                    target = null,\n                    el = null,\n                    id = '';\n\n                for (id in self.cache) {\n                    target = self.cache[id];\n\n                    el = target.render(target.data);\n\n                    if (el !== target.dom.el) {\n                        // Update target element reference\n\n                        if (target.isInDom) {\n                            target.unbindEvents();\n\n                            self.dom.parent.replaceChild(el, target.dom.el);\n                        }\n\n                        if (!target.isShown) {\n                            el.style.display = 'none';\n                        }\n\n                        target.dom.el = el;\n\n                        if (target.isInDom) {\n                            target.bindEvents();\n                        }\n                    }\n                }\n\n                self.state = self.buildState(self.lastOperation);\n            },\n\n            /**\n             * Removes mixitup functionality from the container, unbinds all control\n             * event handlers, and deletes the mixer instance from MixItUp's internal\n             * cache.\n             *\n             * This should be performed whenever a mixer's container is removed from\n             * the DOM, such as during a page change in a single page application,\n             * or React's `componentWillUnmount()`.\n             *\n             * @example\n             *\n             * .destroy([cleanUp])\n             *\n             * @example <caption>Example: Destroying the mixer before removing its container element</caption>\n             *\n             * mixer.destroy();\n             *\n             * containerEl.parentElement.removeChild(containerEl);\n             *\n             * @public\n             * @instance\n             * @since   2.0.0\n             * @param   {boolean}   [cleanUp=false]\n             *     An optional boolean dictating whether or not to clean up any inline `display: none;` styling applied to hidden targets.\n             * @return  {void}\n             */\n\n            destroy: function (cleanUp) {\n                var self = this,\n                    control = null,\n                    target = null,\n                    i = 0;\n\n                self.callActions('beforeDestroy', arguments);\n\n                for (i = 0; control = self.controls[i]; i++) {\n                    control.removeBinding(self);\n                }\n\n                for (i = 0; target = self.targets[i]; i++) {\n                    if (cleanUp) {\n                        target.show();\n                    }\n\n                    target.unbindEvents();\n                }\n\n                if (self.dom.container.id.match(/^MixItUp/)) {\n                    self.dom.container.removeAttribute('id');\n                }\n\n                delete mixitup.instances[self.id];\n\n                self.callActions('afterDestroy', arguments);\n            }\n        });\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.IMoveData = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.posIn = null;\n        this.posOut = null;\n        this.operation = null;\n        this.callback = null;\n        this.statusChange = '';\n        this.duration = -1;\n        this.staggerIndex = -1;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.IMoveData);\n\n    mixitup.IMoveData.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.IMoveData.prototype.constructor = mixitup.IMoveData;\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.TargetDom = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.el = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.TargetDom);\n\n    mixitup.TargetDom.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.TargetDom.prototype.constructor = mixitup.TargetDom;\n\n    /**\n     * @constructor\n     * @namespace\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.Target = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.id = '';\n        this.sortString = '';\n        this.mixer = null;\n        this.callback = null;\n        this.isShown = false;\n        this.isBound = false;\n        this.isExcluded = false;\n        this.isInDom = false;\n        this.handler = null;\n        this.operation = null;\n        this.data = null;\n        this.dom = new mixitup.TargetDom();\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.Target);\n\n    mixitup.Target.prototype = Object.create(mixitup.Base.prototype);\n\n    h.extend(mixitup.Target.prototype, {\n        constructor: mixitup.Target,\n\n        /**\n         * Initialises a newly instantiated Target.\n         *\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {(Element|null)}    el\n         * @param   {object}            mixer\n         * @param   {object}            [data]\n         * @return  {void}\n         */\n\n        init: function (el, mixer, data) {\n            var self = this,\n                id = '';\n\n            self.callActions('beforeInit', arguments);\n\n            self.mixer = mixer;\n\n            if (!el) {\n                // If no element is provided, render it\n\n                el = self.render(data);\n            }\n\n            self.cacheDom(el);\n\n            self.bindEvents();\n\n            if (self.dom.el.style.display !== 'none') {\n                self.isShown = true;\n            }\n\n            if (data && mixer.config.data.uidKey) {\n                if (typeof (id = data[mixer.config.data.uidKey]) === 'undefined' || id.toString().length < 1) {\n                    throw new TypeError(mixitup.messages.errorDatasetInvalidUidKey({\n                        uidKey: mixer.config.data.uidKey\n                    }));\n                }\n\n                self.id = id;\n                self.data = data;\n\n                mixer.cache[id] = self;\n            }\n\n            self.callActions('afterInit', arguments);\n        },\n\n        /**\n         * Renders the target element using a user-defined renderer function.\n         *\n         * @private\n         * @instance\n         * @since   3.1.4\n         * @param   {object} data\n         * @return  {void}\n         */\n\n        render: function (data) {\n            var self = this,\n                render = null,\n                el = null,\n                temp = null,\n                output = '';\n\n            self.callActions('beforeRender', arguments);\n\n            render = self.callFilters('renderRender', self.mixer.config.render.target, arguments);\n\n            if (typeof render !== 'function') {\n                throw new TypeError(mixitup.messages.errorDatasetRendererNotSet());\n            }\n\n            output = render(data);\n\n            if (output && typeof output === 'object' && h.isElement(output)) {\n                el = output;\n            } else if (typeof output === 'string') {\n                temp = document.createElement('div');\n                temp.innerHTML = output;\n\n                el = temp.firstElementChild;\n            }\n\n            return self.callFilters('elRender', el, arguments);\n        },\n\n        /**\n         * Caches references of DOM elements neccessary for the target's functionality.\n         *\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {Element} el\n         * @return  {void}\n         */\n\n        cacheDom: function (el) {\n            var self = this;\n\n            self.callActions('beforeCacheDom', arguments);\n\n            self.dom.el = el;\n\n            self.callActions('afterCacheDom', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {string}    attributeName\n         * @return  {void}\n         */\n\n        getSortString: function (attributeName) {\n            var self = this,\n                value = self.dom.el.getAttribute('data-' + attributeName) || '';\n\n            self.callActions('beforeGetSortString', arguments);\n\n            value = isNaN(value * 1) ?\n                value.toLowerCase() :\n                value * 1;\n\n            self.sortString = value;\n\n            self.callActions('afterGetSortString', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @return  {void}\n         */\n\n        show: function () {\n            var self = this;\n\n            self.callActions('beforeShow', arguments);\n\n            if (!self.isShown) {\n                self.dom.el.style.display = '';\n\n                self.isShown = true;\n            }\n\n            self.callActions('afterShow', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @return  {void}\n         */\n\n        hide: function () {\n            var self = this;\n\n            self.callActions('beforeHide', arguments);\n\n            if (self.isShown) {\n                self.dom.el.style.display = 'none';\n\n                self.isShown = false;\n            }\n\n            self.callActions('afterHide', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {mixitup.IMoveData} moveData\n         * @return  {void}\n         */\n\n        move: function (moveData) {\n            var self = this;\n\n            self.callActions('beforeMove', arguments);\n\n            if (!self.isExcluded) {\n                self.mixer.targetsMoved++;\n            }\n\n            self.applyStylesIn(moveData);\n\n            requestAnimationFrame(function () {\n                self.applyStylesOut(moveData);\n            });\n\n            self.callActions('afterMove', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {object}    posData\n         * @param   {number}    multiplier\n         * @return  {void}\n         */\n\n        applyTween: function (posData, multiplier) {\n            var self = this,\n                propertyName = '',\n                tweenData = null,\n                posIn = posData.posIn,\n                currentTransformValues = [],\n                currentValues = new mixitup.StyleData(),\n                i = -1;\n\n            self.callActions('beforeApplyTween', arguments);\n\n            currentValues.x = posIn.x;\n            currentValues.y = posIn.y;\n\n            if (multiplier === 0) {\n                self.hide();\n            } else if (!self.isShown) {\n                self.show();\n            }\n\n            for (i = 0; propertyName = mixitup.features.TWEENABLE[i]; i++) {\n                tweenData = posData.tweenData[propertyName];\n\n                if (propertyName === 'x') {\n                    if (!tweenData) continue;\n\n                    currentValues.x = posIn.x + (tweenData * multiplier);\n                } else if (propertyName === 'y') {\n                    if (!tweenData) continue;\n\n                    currentValues.y = posIn.y + (tweenData * multiplier);\n                } else if (tweenData instanceof mixitup.TransformData) {\n                    if (!tweenData.value) continue;\n\n                    currentValues[propertyName].value =\n                        posIn[propertyName].value + (tweenData.value * multiplier);\n\n                    currentValues[propertyName].unit = tweenData.unit;\n\n                    currentTransformValues.push(\n                        propertyName + '(' + currentValues[propertyName].value + tweenData.unit + ')'\n                    );\n                } else {\n                    if (!tweenData) continue;\n\n                    currentValues[propertyName] = posIn[propertyName] + (tweenData * multiplier);\n\n                    self.dom.el.style[propertyName] = currentValues[propertyName];\n                }\n            }\n\n            if (currentValues.x || currentValues.y) {\n                currentTransformValues.unshift('translate(' + currentValues.x + 'px, ' + currentValues.y + 'px)');\n            }\n\n            if (currentTransformValues.length) {\n                self.dom.el.style[mixitup.features.transformProp] = currentTransformValues.join(' ');\n            }\n\n            self.callActions('afterApplyTween', arguments);\n        },\n\n        /**\n         * Applies the initial styling to a target element before any transition\n         * is applied.\n         *\n         * @private\n         * @instance\n         * @param   {mixitup.IMoveData} moveData\n         * @return  {void}\n         */\n\n        applyStylesIn: function (moveData) {\n            var self = this,\n                posIn = moveData.posIn,\n                isFading = self.mixer.effectsIn.opacity !== 1,\n                transformValues = [];\n\n            self.callActions('beforeApplyStylesIn', arguments);\n\n            transformValues.push('translate(' + posIn.x + 'px, ' + posIn.y + 'px)');\n\n            if (self.mixer.config.animation.animateResizeTargets) {\n                if (moveData.statusChange !== 'show') {\n                    // Don't apply posIn width or height or showing, as will be 0\n\n                    self.dom.el.style.width = posIn.width + 'px';\n                    self.dom.el.style.height = posIn.height + 'px';\n                }\n\n                self.dom.el.style.marginRight = posIn.marginRight + 'px';\n                self.dom.el.style.marginBottom = posIn.marginBottom + 'px';\n            }\n\n            isFading && (self.dom.el.style.opacity = posIn.opacity);\n\n            if (moveData.statusChange === 'show') {\n                transformValues = transformValues.concat(self.mixer.transformIn);\n            }\n\n            self.dom.el.style[mixitup.features.transformProp] = transformValues.join(' ');\n\n            self.callActions('afterApplyStylesIn', arguments);\n        },\n\n        /**\n         * Applies a transition followed by the final styles for the element to\n         * transition towards.\n         *\n         * @private\n         * @instance\n         * @param   {mixitup.IMoveData} moveData\n         * @return  {void}\n         */\n\n        applyStylesOut: function (moveData) {\n            var self = this,\n                transitionRules = [],\n                transformValues = [],\n                isResizing = self.mixer.config.animation.animateResizeTargets,\n                isFading = typeof self.mixer.effectsIn.opacity !== 'undefined';\n\n            self.callActions('beforeApplyStylesOut', arguments);\n\n            // Build the transition rules\n\n            transitionRules.push(self.writeTransitionRule(\n                mixitup.features.transformRule,\n                moveData.staggerIndex\n            ));\n\n            if (moveData.statusChange !== 'none') {\n                transitionRules.push(self.writeTransitionRule(\n                    'opacity',\n                    moveData.staggerIndex,\n                    moveData.duration\n                ));\n            }\n\n            if (isResizing) {\n                transitionRules.push(self.writeTransitionRule(\n                    'width',\n                    moveData.staggerIndex,\n                    moveData.duration\n                ));\n\n                transitionRules.push(self.writeTransitionRule(\n                    'height',\n                    moveData.staggerIndex,\n                    moveData.duration\n                ));\n\n                transitionRules.push(self.writeTransitionRule(\n                    'margin',\n                    moveData.staggerIndex,\n                    moveData.duration\n                ));\n            }\n\n            // If no callback was provided, the element will\n            // not transition in any way so tag it as \"immovable\"\n\n            if (!moveData.callback) {\n                self.mixer.targetsImmovable++;\n\n                if (self.mixer.targetsMoved === self.mixer.targetsImmovable) {\n                    // If the total targets moved is equal to the\n                    // number of immovable targets, the operation\n                    // should be considered finished\n\n                    self.mixer.cleanUp(moveData.operation);\n                }\n\n                return;\n            }\n\n            // If the target will transition in some fasion,\n            // assign a callback function\n\n            self.operation = moveData.operation;\n            self.callback = moveData.callback;\n\n            // As long as the target is not excluded, increment\n            // the total number of targets bound\n\n            !self.isExcluded && self.mixer.targetsBound++;\n\n            // Tag the target as bound to differentiate from transitionEnd\n            // events that may come from stylesheet driven effects\n\n            self.isBound = true;\n\n            // Apply the transition\n\n            self.applyTransition(transitionRules);\n\n            // Apply width, height and margin negation\n\n            if (isResizing && moveData.posOut.width > 0 && moveData.posOut.height > 0) {\n                self.dom.el.style.width = moveData.posOut.width + 'px';\n                self.dom.el.style.height = moveData.posOut.height + 'px';\n                self.dom.el.style.marginRight = moveData.posOut.marginRight + 'px';\n                self.dom.el.style.marginBottom = moveData.posOut.marginBottom + 'px';\n            }\n\n            if (!self.mixer.config.animation.nudge && moveData.statusChange === 'hide') {\n                // If we're not nudging, the translation should be\n                // applied before any other transforms to prevent\n                // lateral movement\n\n                transformValues.push('translate(' + moveData.posOut.x + 'px, ' + moveData.posOut.y + 'px)');\n            }\n\n            // Apply fade\n\n            switch (moveData.statusChange) {\n                case 'hide':\n                    isFading && (self.dom.el.style.opacity = self.mixer.effectsOut.opacity);\n\n                    transformValues = transformValues.concat(self.mixer.transformOut);\n\n                    break;\n                case 'show':\n                    isFading && (self.dom.el.style.opacity = 1);\n            }\n\n            if (\n                self.mixer.config.animation.nudge ||\n                (!self.mixer.config.animation.nudge && moveData.statusChange !== 'hide')\n            ) {\n                // Opposite of above - apply translate after\n                // other transform\n\n                transformValues.push('translate(' + moveData.posOut.x + 'px, ' + moveData.posOut.y + 'px)');\n            }\n\n            // Apply transforms\n\n            self.dom.el.style[mixitup.features.transformProp] = transformValues.join(' ');\n\n            self.callActions('afterApplyStylesOut', arguments);\n        },\n\n        /**\n         * Combines the name of a CSS property with the appropriate duration and delay\n         * values to created a valid transition rule.\n         *\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {string}    property\n         * @param   {number}    staggerIndex\n         * @param   {number}    duration\n         * @return  {string}\n         */\n\n        writeTransitionRule: function (property, staggerIndex, duration) {\n            var self = this,\n                delay = self.getDelay(staggerIndex),\n                rule = '';\n\n            rule = property + ' ' +\n                (duration > 0 ? duration : self.mixer.config.animation.duration) + 'ms ' +\n                delay + 'ms ' +\n                (property === 'opacity' ? 'linear' : self.mixer.config.animation.easing);\n\n            return self.callFilters('ruleWriteTransitionRule', rule, arguments);\n        },\n\n        /**\n         * Calculates the transition delay for each target element based on its index, if\n         * staggering is applied. If defined, A custom `animation.staggerSeqeuence`\n         * function can be used to manipulate the order of indices to produce custom\n         * stagger effects (e.g. for use in a grid with irregular row lengths).\n         *\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {number}    index\n         * @return  {number}\n         */\n\n        getDelay: function (index) {\n            var self = this,\n                delay = -1;\n\n            if (typeof self.mixer.config.animation.staggerSequence === 'function') {\n                index = self.mixer.config.animation.staggerSequence.call(self, index, self.state);\n            }\n\n            delay = !!self.mixer.staggerDuration ? index * self.mixer.staggerDuration : 0;\n\n            return self.callFilters('delayGetDelay', delay, arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {string[]}  rules\n         * @return  {void}\n         */\n\n        applyTransition: function (rules) {\n            var self = this,\n                transitionString = rules.join(', ');\n\n            self.callActions('beforeApplyTransition', arguments);\n\n            self.dom.el.style[mixitup.features.transitionProp] = transitionString;\n\n            self.callActions('afterApplyTransition', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {Event} e\n         * @return  {void}\n         */\n\n        handleTransitionEnd: function (e) {\n            var self = this,\n                propName = e.propertyName,\n                canResize = self.mixer.config.animation.animateResizeTargets;\n\n            self.callActions('beforeHandleTransitionEnd', arguments);\n\n            if (\n                self.isBound &&\n                e.target.matches(self.mixer.config.selectors.target) &&\n                (\n                    propName.indexOf('transform') > -1 ||\n                    propName.indexOf('opacity') > -1 ||\n                    canResize && propName.indexOf('height') > -1 ||\n                    canResize && propName.indexOf('width') > -1 ||\n                    canResize && propName.indexOf('margin') > -1\n                )\n            ) {\n                self.callback.call(self, self.operation);\n\n                self.isBound = false;\n                self.callback = null;\n                self.operation = null;\n            }\n\n            self.callActions('afterHandleTransitionEnd', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {Event}     e\n         * @return  {void}\n         */\n\n        eventBus: function (e) {\n            var self = this;\n\n            self.callActions('beforeEventBus', arguments);\n\n            switch (e.type) {\n                case 'webkitTransitionEnd':\n                case 'transitionend':\n                    self.handleTransitionEnd(e);\n            }\n\n            self.callActions('afterEventBus', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @return  {void}\n         */\n\n        unbindEvents: function () {\n            var self = this;\n\n            self.callActions('beforeUnbindEvents', arguments);\n\n            h.off(self.dom.el, 'webkitTransitionEnd', self.handler);\n            h.off(self.dom.el, 'transitionend', self.handler);\n\n            self.callActions('afterUnbindEvents', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @return  {void}\n         */\n\n        bindEvents: function () {\n            var self = this,\n                transitionEndEvent = '';\n\n            self.callActions('beforeBindEvents', arguments);\n\n            transitionEndEvent = mixitup.features.transitionPrefix === 'webkit' ? 'webkitTransitionEnd' : 'transitionend';\n\n            self.handler = function (e) {\n                return self.eventBus(e);\n            };\n\n            h.on(self.dom.el, transitionEndEvent, self.handler);\n\n            self.callActions('afterBindEvents', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {boolean}   [getBox]\n         * @return  {PosData}\n         */\n\n        getPosData: function (getBox) {\n            var self = this,\n                styles = {},\n                rect = null,\n                posData = new mixitup.StyleData();\n\n            self.callActions('beforeGetPosData', arguments);\n\n            posData.x = self.dom.el.offsetLeft;\n            posData.y = self.dom.el.offsetTop;\n\n            if (self.mixer.config.animation.animateResizeTargets || getBox) {\n                rect = self.dom.el.getBoundingClientRect();\n\n                posData.top = rect.top;\n                posData.right = rect.right;\n                posData.bottom = rect.bottom;\n                posData.left = rect.left;\n\n                posData.width = rect.width;\n                posData.height = rect.height;\n            }\n\n            if (self.mixer.config.animation.animateResizeTargets) {\n                styles = window.getComputedStyle(self.dom.el);\n\n                posData.marginBottom = parseFloat(styles.marginBottom);\n                posData.marginRight = parseFloat(styles.marginRight);\n            }\n\n            return self.callFilters('posDataGetPosData', posData, arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since       3.0.0\n         * @return      {void}\n         */\n\n        cleanUp: function () {\n            var self = this;\n\n            self.callActions('beforeCleanUp', arguments);\n\n            self.dom.el.style[mixitup.features.transformProp] = '';\n            self.dom.el.style[mixitup.features.transitionProp] = '';\n            self.dom.el.style.opacity = '';\n\n            if (self.mixer.config.animation.animateResizeTargets) {\n                self.dom.el.style.width = '';\n                self.dom.el.style.height = '';\n                self.dom.el.style.marginRight = '';\n                self.dom.el.style.marginBottom = '';\n            }\n\n            self.callActions('afterCleanUp', arguments);\n        }\n    });\n\n    /**\n     * A jQuery-collection-like wrapper around one or more `mixitup.Mixer` instances\n     * allowing simultaneous control of said instances similar to the MixItUp 2 API.\n     *\n     * @example\n     * new mixitup.Collection(instances)\n     *\n     * @constructor\n     * @namespace\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     * @param       {mixitup.Mixer[]}   instances\n     */\n\n    mixitup.Collection = function (instances) {\n        var instance = null,\n            i = -1;\n\n        this.callActions('beforeConstruct');\n\n        for (i = 0; instance = instances[i]; i++) {\n            this[i] = instance;\n        }\n\n        this.length = instances.length;\n\n        this.callActions('afterConstruct');\n\n        h.freeze(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.Collection);\n\n    mixitup.Collection.prototype = Object.create(mixitup.Base.prototype);\n\n    h.extend(mixitup.Collection.prototype,\n        /** @lends mixitup.Collection */\n        {\n            constructor: mixitup.Collection,\n\n            /**\n             * Calls a method on all instances in the collection by passing the method\n             * name as a string followed by any applicable parameters to be curried into\n             * to the method.\n             *\n             * @example\n             * .mixitup(methodName[,arg1][,arg2..]);\n             *\n             * @example\n             * var collection = new Collection([mixer1, mixer2]);\n             *\n             * return collection.mixitup('filter', '.category-a')\n             *     .then(function(states) {\n             *         state.forEach(function(state) {\n             *             console.log(state.activeFilter.selector); // .category-a\n             *         });\n             *     });\n             *\n             * @public\n             * @instance\n             * @since       3.0.0\n             * @param       {string}  methodName\n             * @return      {Promise<Array<mixitup.State>>}\n             */\n\n            mixitup: function (methodName) {\n                var self = this,\n                    instance = null,\n                    args = Array.prototype.slice.call(arguments),\n                    tasks = [],\n                    i = -1;\n\n                this.callActions('beforeMixitup');\n\n                args.shift();\n\n                for (i = 0; instance = self[i]; i++) {\n                    tasks.push(instance[methodName].apply(instance, args));\n                }\n\n                return self.callFilters('promiseMixitup', h.all(tasks, mixitup.libraries), arguments);\n            }\n        });\n\n    /**\n     * `mixitup.Operation` objects contain all data neccessary to describe the full\n     * lifecycle of any MixItUp operation. They can be used to compute and store an\n     * operation for use at a later time (e.g. programmatic tweening).\n     *\n     * @constructor\n     * @namespace\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.Operation = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.id = '';\n\n        this.args = [];\n        this.command = null;\n        this.showPosData = [];\n        this.toHidePosData = [];\n\n        this.startState = null;\n        this.newState = null;\n        this.docState = null;\n\n        this.willSort = false;\n        this.willChangeLayout = false;\n        this.hasEffect = false;\n        this.hasFailed = false;\n\n        this.triggerElement = null;\n\n        this.show = [];\n        this.hide = [];\n        this.matching = [];\n        this.toShow = [];\n        this.toHide = [];\n        this.toMove = [];\n        this.toRemove = [];\n        this.startOrder = [];\n        this.newOrder = [];\n        this.startSort = null;\n        this.newSort = null;\n        this.startFilter = null;\n        this.newFilter = null;\n        this.startDataset = null;\n        this.newDataset = null;\n        this.viewportDeltaX = 0;\n        this.viewportDeltaY = 0;\n        this.startX = 0;\n        this.startY = 0;\n        this.startHeight = 0;\n        this.startWidth = 0;\n        this.newX = 0;\n        this.newY = 0;\n        this.newHeight = 0;\n        this.newWidth = 0;\n        this.startContainerClassName = '';\n        this.startDisplay = '';\n        this.newContainerClassName = '';\n        this.newDisplay = '';\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.Operation);\n\n    mixitup.Operation.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.Operation.prototype.constructor = mixitup.Operation;\n\n    /**\n     * `mixitup.State` objects expose various pieces of data detailing the state of\n     * a MixItUp instance. They are provided at the start and end of any operation via\n     * callbacks and events, with the most recent state stored between operations\n     * for retrieval at any time via the API.\n     *\n     * @constructor\n     * @namespace\n     * @memberof    mixitup\n     * @public\n     * @since       3.0.0\n     */\n\n    mixitup.State = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * The ID of the mixer instance.\n         *\n         * @name        id\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {string}\n         * @default     ''\n         */\n\n        this.id = '';\n\n        /**\n         * The currently active filter command as set by a control click or API call.\n         *\n         * @name        activeFilter\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {mixitup.CommandFilter}\n         * @default     null\n         */\n\n        this.activeFilter = null;\n\n        /**\n         * The currently active sort command as set by a control click or API call.\n         *\n         * @name        activeSort\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {mixitup.CommandSort}\n         * @default     null\n         */\n\n        this.activeSort = null;\n\n        /**\n         * The current layout-specific container class name, if applied.\n         *\n         * @name        activeContainerClassName\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {string}\n         * @default     ''\n         */\n\n        this.activeContainerClassName = '';\n\n        /**\n         * A reference to the container element that the mixer is instantiated on.\n         *\n         * @name        container\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {Element}\n         * @default     null\n         */\n\n        this.container = null;\n\n        /**\n         * An array of all target elements indexed by the mixer.\n         *\n         * @name        targets\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {Array.<Element>}\n         * @default     []\n         */\n\n        this.targets = [];\n\n        /**\n         * An array of all target elements not matching the current filter.\n         *\n         * @name        hide\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {Array.<Element>}\n         * @default     []\n         */\n\n        this.hide = [];\n\n        /**\n         * An array of all target elements matching the current filter and any additional\n         * limits applied such as pagination.\n         *\n         * @name        show\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {Array.<Element>}\n         * @default     []\n         */\n\n        this.show = [];\n\n        /**\n         * An array of all target elements matching the current filter irrespective of\n         * any additional limits applied such as pagination.\n         *\n         * @name        matching\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {Array.<Element>}\n         * @default     []\n         */\n\n        this.matching = [];\n\n        /**\n         * An integer representing the total number of target elements indexed by the\n         * mixer. Equivalent to `state.targets.length`.\n         *\n         * @name        totalTargets\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {number}\n         * @default     -1\n         */\n\n        this.totalTargets = -1;\n\n        /**\n         * An integer representing the total number of target elements matching the\n         * current filter and any additional limits applied such as pagination.\n         * Equivalent to `state.show.length`.\n         *\n         * @name        totalShow\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {number}\n         * @default     -1\n         */\n\n        this.totalShow = -1;\n\n        /**\n         * An integer representing the total number of target elements not matching\n         * the current filter. Equivalent to `state.hide.length`.\n         *\n         * @name        totalHide\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {number}\n         * @default     -1\n         */\n\n        this.totalHide = -1;\n\n        /**\n         * An integer representing the total number of target elements matching the\n         * current filter irrespective of any other limits applied such as pagination.\n         * Equivalent to `state.matching.length`.\n         *\n         * @name        totalMatching\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {number}\n         * @default     -1\n         */\n\n        this.totalMatching = -1;\n\n        /**\n         * A boolean indicating whether the last operation \"failed\", i.e. no targets\n         * could be found matching the filter.\n         *\n         * @name        hasFailed\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {boolean}\n         * @default     false\n         */\n\n        this.hasFailed = false;\n\n        /**\n         * The DOM element that was clicked if the last operation was triggered by the\n         * clicking of a control and not an API call.\n         *\n         * @name        triggerElement\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {Element|null}\n         * @default     null\n         */\n\n        this.triggerElement = null;\n\n        /**\n         * The currently active dataset underlying the rendered targets, if the\n         * dataset API is in use.\n         *\n         * @name        activeDataset\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {Array.<object>}\n         * @default     null\n         */\n\n        this.activeDataset = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.State);\n\n    mixitup.State.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.State.prototype.constructor = mixitup.State;\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.UserInstruction = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.command = {};\n        this.animate = false;\n        this.callback = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.UserInstruction);\n\n    mixitup.UserInstruction.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.UserInstruction.prototype.constructor = mixitup.UserInstruction;\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.Messages = function () {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /* Errors\n        ----------------------------------------------------------------------------- */\n\n        this.ERROR_FACTORY_INVALID_CONTAINER =\n            '[MixItUp] An invalid selector or element reference was passed to the mixitup factory function';\n\n        this.ERROR_FACTORY_CONTAINER_NOT_FOUND =\n            '[MixItUp] The provided selector yielded no container element';\n\n        this.ERROR_CONFIG_INVALID_ANIMATION_EFFECTS =\n            '[MixItUp] Invalid value for `animation.effects`';\n\n        this.ERROR_CONFIG_INVALID_CONTROLS_SCOPE =\n            '[MixItUp] Invalid value for `controls.scope`';\n\n        this.ERROR_CONFIG_INVALID_PROPERTY =\n            '[MixitUp] Invalid configuration object property \"${erroneous}\"${suggestion}';\n\n        this.ERROR_CONFIG_INVALID_PROPERTY_SUGGESTION =\n            '. Did you mean \"${probableMatch}\"?';\n\n        this.ERROR_CONFIG_DATA_UID_KEY_NOT_SET =\n            '[MixItUp] To use the dataset API, a UID key must be specified using `data.uidKey`';\n\n        this.ERROR_DATASET_INVALID_UID_KEY =\n            '[MixItUp] The specified UID key \"${uidKey}\" is not present on one or more dataset items';\n\n        this.ERROR_DATASET_DUPLICATE_UID =\n            '[MixItUp] The UID \"${uid}\" was found on two or more dataset items. UIDs must be unique.';\n\n        this.ERROR_INSERT_INVALID_ARGUMENTS =\n            '[MixItUp] Please provider either an index or a sibling and position to insert, not both';\n\n        this.ERROR_INSERT_PREEXISTING_ELEMENT =\n            '[MixItUp] An element to be inserted already exists in the container';\n\n        this.ERROR_FILTER_INVALID_ARGUMENTS =\n            '[MixItUp] Please provide either a selector or collection `.filter()`, not both';\n\n        this.ERROR_DATASET_NOT_SET =\n            '[MixItUp] To use the dataset API with pre-rendered targets, a starting dataset must be set using `load.dataset`';\n\n        this.ERROR_DATASET_PRERENDERED_MISMATCH =\n            '[MixItUp] `load.dataset` does not match pre-rendered targets';\n\n        this.ERROR_DATASET_RENDERER_NOT_SET =\n            '[MixItUp] To insert an element via the dataset API, a target renderer function must be provided to `render.target`';\n\n        this.ERROR_SORT_NON_EXISTENT_ELEMENT =\n            '[MixItUp] An element to be sorted does not already exist in the container';\n\n        /* Warnings\n        ----------------------------------------------------------------------------- */\n\n        this.WARNING_FACTORY_PREEXISTING_INSTANCE =\n            '[MixItUp] WARNING: This element already has an active MixItUp instance. The provided configuration object will be ignored.' +\n            ' If you wish to perform additional methods on this instance, please create a reference.';\n\n        this.WARNING_INSERT_NO_ELEMENTS =\n            '[MixItUp] WARNING: No valid elements were passed to `.insert()`';\n\n        this.WARNING_REMOVE_NO_ELEMENTS =\n            '[MixItUp] WARNING: No valid elements were passed to `.remove()`';\n\n        this.WARNING_MULTIMIX_INSTANCE_QUEUE_FULL =\n            '[MixItUp] WARNING: An operation was requested but the MixItUp instance was busy. The operation was rejected because the ' +\n            'queue is full or queuing is disabled.';\n\n        this.WARNING_GET_OPERATION_INSTANCE_BUSY =\n            '[MixItUp] WARNING: Operations can be be created while the MixItUp instance is busy.';\n\n        this.WARNING_NO_PROMISE_IMPLEMENTATION =\n            '[MixItUp] WARNING: No Promise implementations could be found. If you wish to use promises with MixItUp please install' +\n            ' an ES6 Promise polyfill.';\n\n        this.WARNING_INCONSISTENT_SORTING_ATTRIBUTES =\n            '[MixItUp] WARNING: The requested sorting data attribute \"${attribute}\" was not present on one or more target elements' +\n            ' which may product unexpected sort output';\n\n        this.callActions('afterConstruct');\n\n        this.compileTemplates();\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.Messages);\n\n    mixitup.Messages.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.Messages.prototype.constructor = mixitup.Messages;\n\n    /**\n     * @return {void}\n     */\n\n    mixitup.Messages.prototype.compileTemplates = function () {\n        var errorKey = '';\n        var errorMessage = '';\n\n        for (errorKey in this) {\n            if (typeof (errorMessage = this[errorKey]) !== 'string') continue;\n\n            this[h.camelCase(errorKey)] = h.template(errorMessage);\n        }\n    };\n\n    mixitup.messages = new mixitup.Messages();\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     * @param       {mixitup.Mixer} mixer\n     */\n\n    mixitup.Facade = function Mixer(mixer) {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct', arguments);\n\n        this.configure = mixer.configure.bind(mixer);\n        this.show = mixer.show.bind(mixer);\n        this.hide = mixer.hide.bind(mixer);\n        this.filter = mixer.filter.bind(mixer);\n        this.toggleOn = mixer.toggleOn.bind(mixer);\n        this.toggleOff = mixer.toggleOff.bind(mixer);\n        this.sort = mixer.sort.bind(mixer);\n        this.changeLayout = mixer.changeLayout.bind(mixer);\n        this.multimix = mixer.multimix.bind(mixer);\n        this.dataset = mixer.dataset.bind(mixer);\n        this.tween = mixer.tween.bind(mixer);\n        this.insert = mixer.insert.bind(mixer);\n        this.insertBefore = mixer.insertBefore.bind(mixer);\n        this.insertAfter = mixer.insertAfter.bind(mixer);\n        this.prepend = mixer.prepend.bind(mixer);\n        this.append = mixer.append.bind(mixer);\n        this.remove = mixer.remove.bind(mixer);\n        this.destroy = mixer.destroy.bind(mixer);\n        this.forceRefresh = mixer.forceRefresh.bind(mixer);\n        this.forceRender = mixer.forceRender.bind(mixer);\n        this.isMixing = mixer.isMixing.bind(mixer);\n        this.getOperation = mixer.getOperation.bind(mixer);\n        this.getConfig = mixer.getConfig.bind(mixer);\n        this.getState = mixer.getState.bind(mixer);\n\n        this.callActions('afterConstruct', arguments);\n\n        h.freeze(this);\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.Facade);\n\n    mixitup.Facade.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.Facade.prototype.constructor = mixitup.Facade;\n\n    if (typeof exports === 'object' && typeof module === 'object') {\n        module.exports = mixitup;\n    } else if (typeof define === 'function' && define.amd) {\n        define(function () {\n            return mixitup;\n        });\n    } else if (typeof window.mixitup === 'undefined' || typeof window.mixitup !== 'function') {\n        window.mixitup = mixitup;\n    }\n    mixitup.BaseStatic.call(mixitup.constructor);\n\n    mixitup.NAME = 'mixitup';\n    mixitup.CORE_VERSION = '3.3.1';\n})(window);"],
  "mappings": "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",
  "names": ["window", "i", "obj", "document"]
}
