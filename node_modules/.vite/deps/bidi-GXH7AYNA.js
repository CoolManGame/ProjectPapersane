import {
  Accessibility,
  Browser,
  BrowserContext,
  CallbackRegistry,
  ConsoleMessage,
  Coverage,
  Deferred,
  ElementHandle,
  EmulationManager,
  EventEmitter,
  Frame,
  FrameManagerEmittedEvents,
  FrameTree,
  HTTPRequest,
  HTTPResponse,
  JSHandle,
  Keyboard,
  LazyArg,
  Mouse,
  MouseButton,
  NetworkManagerEmittedEvents,
  Page,
  ProtocolError,
  PuppeteerURL,
  TargetCloseError,
  TaskManager,
  TimeoutError,
  TimeoutSettings,
  Touchscreen,
  Tracing,
  UTILITY_WORLD_NAME,
  WaitTask,
  assert,
  debug,
  debugError,
  getPageContent,
  getSourcePuppeteerURLIfAvailable,
  isDate,
  isPlainObject,
  isRegExp,
  isString,
  require_crypto,
  scriptInjector,
  setPageContent,
  stringifyFunction,
  waitForEvent,
  waitWithTimeout,
  withSourcePuppeteerURLIfNone
} from "./chunk-SPABCQZU.js";
import {
  __commonJS,
  __privateAdd,
  __privateGet,
  __privateMethod,
  __privateSet,
  __privateWrapper,
  __publicField,
  __toESM
} from "./chunk-VXSGCTFZ.js";

// node_modules/chromium-bidi/lib/cjs/protocol/protocol.js
var require_protocol = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/protocol/protocol.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Input = exports.CDP = exports.Network = exports.Log = exports.BrowsingContext = exports.Script = exports.Message = void 0;
    var Message;
    (function(Message2) {
      let ErrorCode;
      (function(ErrorCode2) {
        ErrorCode2["InvalidArgument"] = "invalid argument";
        ErrorCode2["InvalidSessionId"] = "invalid session id";
        ErrorCode2["MoveTargetOutOfBounds"] = "move target out of bounds";
        ErrorCode2["NoSuchAlert"] = "no such alert";
        ErrorCode2["NoSuchElement"] = "no such element";
        ErrorCode2["NoSuchFrame"] = "no such frame";
        ErrorCode2["NoSuchHandle"] = "no such handle";
        ErrorCode2["NoSuchNode"] = "no such node";
        ErrorCode2["NoSuchScript"] = "no such script";
        ErrorCode2["SessionNotCreated"] = "session not created";
        ErrorCode2["UnknownCommand"] = "unknown command";
        ErrorCode2["UnknownError"] = "unknown error";
        ErrorCode2["UnsupportedOperation"] = "unsupported operation";
      })(ErrorCode = Message2.ErrorCode || (Message2.ErrorCode = {}));
      class ErrorResponse {
        constructor(error, message, stacktrace) {
          __publicField(this, "error");
          __publicField(this, "message");
          __publicField(this, "stacktrace");
          this.error = error;
          this.message = message;
          this.stacktrace = stacktrace;
        }
        toErrorResponse(commandId) {
          return {
            id: commandId,
            error: this.error,
            message: this.message,
            stacktrace: this.stacktrace
          };
        }
      }
      Message2.ErrorResponse = ErrorResponse;
      class InvalidArgumentException extends ErrorResponse {
        constructor(message, stacktrace) {
          super(ErrorCode.InvalidArgument, message, stacktrace);
        }
      }
      Message2.InvalidArgumentException = InvalidArgumentException;
      class MoveTargetOutOfBoundsException extends ErrorResponse {
        constructor(message, stacktrace) {
          super(ErrorCode.MoveTargetOutOfBounds, message, stacktrace);
        }
      }
      Message2.MoveTargetOutOfBoundsException = MoveTargetOutOfBoundsException;
      class NoSuchHandleException extends ErrorResponse {
        constructor(message, stacktrace) {
          super(ErrorCode.NoSuchHandle, message, stacktrace);
        }
      }
      Message2.NoSuchHandleException = NoSuchHandleException;
      class InvalidSessionIdException extends ErrorResponse {
        constructor(message, stacktrace) {
          super(ErrorCode.InvalidSessionId, message, stacktrace);
        }
      }
      Message2.InvalidSessionIdException = InvalidSessionIdException;
      class NoSuchAlertException extends ErrorResponse {
        constructor(message, stacktrace) {
          super(ErrorCode.NoSuchAlert, message, stacktrace);
        }
      }
      Message2.NoSuchAlertException = NoSuchAlertException;
      class NoSuchFrameException extends ErrorResponse {
        constructor(message) {
          super(ErrorCode.NoSuchFrame, message);
        }
      }
      Message2.NoSuchFrameException = NoSuchFrameException;
      class NoSuchNodeException extends ErrorResponse {
        constructor(message, stacktrace) {
          super(ErrorCode.NoSuchNode, message, stacktrace);
        }
      }
      Message2.NoSuchNodeException = NoSuchNodeException;
      class NoSuchElementException extends ErrorResponse {
        constructor(message, stacktrace) {
          super(ErrorCode.NoSuchElement, message, stacktrace);
        }
      }
      Message2.NoSuchElementException = NoSuchElementException;
      class NoSuchScriptException extends ErrorResponse {
        constructor(message, stacktrace) {
          super(ErrorCode.NoSuchScript, message, stacktrace);
        }
      }
      Message2.NoSuchScriptException = NoSuchScriptException;
      class SessionNotCreatedException extends ErrorResponse {
        constructor(message, stacktrace) {
          super(ErrorCode.SessionNotCreated, message, stacktrace);
        }
      }
      Message2.SessionNotCreatedException = SessionNotCreatedException;
      class UnknownCommandException extends ErrorResponse {
        constructor(message, stacktrace) {
          super(ErrorCode.UnknownCommand, message, stacktrace);
        }
      }
      Message2.UnknownCommandException = UnknownCommandException;
      class UnknownErrorException extends ErrorResponse {
        constructor(message, stacktrace) {
          super(ErrorCode.UnknownError, message, stacktrace);
        }
      }
      Message2.UnknownErrorException = UnknownErrorException;
      class UnsupportedOperationException extends ErrorResponse {
        constructor(message, stacktrace) {
          super(ErrorCode.UnsupportedOperation, message, stacktrace);
        }
      }
      Message2.UnsupportedOperationException = UnsupportedOperationException;
    })(Message = exports.Message || (exports.Message = {}));
    var Script;
    (function(Script2) {
      let EventNames;
      (function(EventNames2) {
        EventNames2["MessageEvent"] = "script.message";
        EventNames2["RealmCreated"] = "script.realmCreated";
      })(EventNames = Script2.EventNames || (Script2.EventNames = {}));
      Script2.AllEvents = "script";
    })(Script = exports.Script || (exports.Script = {}));
    var BrowsingContext2;
    (function(BrowsingContext3) {
      let EventNames;
      (function(EventNames2) {
        EventNames2["LoadEvent"] = "browsingContext.load";
        EventNames2["DomContentLoadedEvent"] = "browsingContext.domContentLoaded";
        EventNames2["ContextCreatedEvent"] = "browsingContext.contextCreated";
        EventNames2["ContextDestroyedEvent"] = "browsingContext.contextDestroyed";
      })(EventNames = BrowsingContext3.EventNames || (BrowsingContext3.EventNames = {}));
      BrowsingContext3.AllEvents = "browsingContext";
    })(BrowsingContext2 = exports.BrowsingContext || (exports.BrowsingContext = {}));
    var Log;
    (function(Log2) {
      Log2.AllEvents = "log";
      let EventNames;
      (function(EventNames2) {
        EventNames2["LogEntryAddedEvent"] = "log.entryAdded";
      })(EventNames = Log2.EventNames || (Log2.EventNames = {}));
    })(Log = exports.Log || (exports.Log = {}));
    var Network;
    (function(Network2) {
      Network2.AllEvents = "network";
      let EventNames;
      (function(EventNames2) {
        EventNames2["BeforeRequestSentEvent"] = "network.beforeRequestSent";
        EventNames2["FetchErrorEvent"] = "network.fetchError";
        EventNames2["ResponseStartedEvent"] = "network.responseStarted";
        EventNames2["ResponseCompletedEvent"] = "network.responseCompleted";
      })(EventNames = Network2.EventNames || (Network2.EventNames = {}));
    })(Network = exports.Network || (exports.Network = {}));
    var CDP;
    (function(CDP2) {
      CDP2.AllEvents = "cdp";
      let EventNames;
      (function(EventNames2) {
        EventNames2["EventReceivedEvent"] = "cdp.eventReceived";
      })(EventNames = CDP2.EventNames || (CDP2.EventNames = {}));
    })(CDP = exports.CDP || (exports.CDP = {}));
    var Input2;
    (function(Input3) {
      let SourceActionsType;
      (function(SourceActionsType2) {
        SourceActionsType2["None"] = "none";
        SourceActionsType2["Key"] = "key";
        SourceActionsType2["Pointer"] = "pointer";
        SourceActionsType2["Wheel"] = "wheel";
      })(SourceActionsType = Input3.SourceActionsType || (Input3.SourceActionsType = {}));
      let PointerType;
      (function(PointerType2) {
        PointerType2["Mouse"] = "mouse";
        PointerType2["Pen"] = "pen";
        PointerType2["Touch"] = "touch";
      })(PointerType = Input3.PointerType || (Input3.PointerType = {}));
      let ActionType;
      (function(ActionType2) {
        ActionType2["Pause"] = "pause";
        ActionType2["KeyDown"] = "keyDown";
        ActionType2["KeyUp"] = "keyUp";
        ActionType2["PointerUp"] = "pointerUp";
        ActionType2["PointerDown"] = "pointerDown";
        ActionType2["PointerMove"] = "pointerMove";
        ActionType2["Scroll"] = "scroll";
      })(ActionType = Input3.ActionType || (Input3.ActionType = {}));
    })(Input2 = exports.Input || (exports.Input = {}));
  }
});

// node_modules/mitt/dist/mitt.js
var require_mitt = __commonJS({
  "node_modules/mitt/dist/mitt.js"(exports, module) {
    module.exports = function(n) {
      return { all: n = n || /* @__PURE__ */ new Map(), on: function(e, t) {
        var i = n.get(e);
        i ? i.push(t) : n.set(e, [t]);
      }, off: function(e, t) {
        var i = n.get(e);
        i && (t ? i.splice(i.indexOf(t) >>> 0, 1) : n.set(e, []));
      }, emit: function(e, t) {
        var i = n.get(e);
        i && i.slice().map(function(n2) {
          n2(t);
        }), (i = n.get("*")) && i.slice().map(function(n2) {
          n2(e, t);
        });
      } };
    };
  }
});

// node_modules/chromium-bidi/lib/cjs/utils/EventEmitter.js
var require_EventEmitter = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/utils/EventEmitter.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EventEmitter = void 0;
    var mitt_1 = __importDefault(require_mitt());
    var _emitter;
    var EventEmitter3 = class {
      constructor() {
        __privateAdd(this, _emitter, (0, mitt_1.default)());
      }
      on(type, handler) {
        __privateGet(this, _emitter).on(type, handler);
        return this;
      }
      once(event, handler) {
        const onceHandler = (eventData) => {
          handler(eventData);
          this.off(event, onceHandler);
        };
        return this.on(event, onceHandler);
      }
      off(type, handler) {
        __privateGet(this, _emitter).off(type, handler);
        return this;
      }
      emit(event, eventData) {
        __privateGet(this, _emitter).emit(event, eventData);
      }
    };
    _emitter = new WeakMap();
    exports.EventEmitter = EventEmitter3;
  }
});

// node_modules/chromium-bidi/lib/cjs/utils/log.js
var require_log = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/utils/log.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LogType = void 0;
    var LogType;
    (function(LogType2) {
      LogType2["bidi"] = "BiDi Messages";
      LogType2["browsingContexts"] = "Browsing Contexts";
      LogType2["cdp"] = "CDP";
      LogType2["system"] = "System";
    })(LogType = exports.LogType || (exports.LogType = {}));
  }
});

// node_modules/chromium-bidi/lib/cjs/utils/processingQueue.js
var require_processingQueue = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/utils/processingQueue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProcessingQueue = void 0;
    var log_js_1 = require_log();
    var _logger, _processor, _queue, _isProcessing, _processIfNeeded, processIfNeeded_fn;
    var ProcessingQueue = class {
      constructor(processor, logger) {
        __privateAdd(this, _processIfNeeded);
        __privateAdd(this, _logger, void 0);
        __privateAdd(this, _processor, void 0);
        __privateAdd(this, _queue, []);
        __privateAdd(this, _isProcessing, false);
        __privateSet(this, _processor, processor);
        __privateSet(this, _logger, logger);
      }
      add(entry) {
        __privateGet(this, _queue).push(entry);
        void __privateMethod(this, _processIfNeeded, processIfNeeded_fn).call(this);
      }
    };
    _logger = new WeakMap();
    _processor = new WeakMap();
    _queue = new WeakMap();
    _isProcessing = new WeakMap();
    _processIfNeeded = new WeakSet();
    processIfNeeded_fn = async function() {
      if (__privateGet(this, _isProcessing)) {
        return;
      }
      __privateSet(this, _isProcessing, true);
      while (__privateGet(this, _queue).length > 0) {
        const entryPromise = __privateGet(this, _queue).shift();
        if (entryPromise !== void 0) {
          await entryPromise.then((entry) => __privateGet(this, _processor).call(this, entry)).catch((e) => {
            var _a;
            (_a = __privateGet(this, _logger)) == null ? void 0 : _a.call(this, log_js_1.LogType.system, "Event was not processed:", e);
          });
        }
      }
      __privateSet(this, _isProcessing, false);
    };
    exports.ProcessingQueue = ProcessingQueue;
  }
});

// node_modules/chromium-bidi/lib/cjs/utils/assert.js
var require_assert = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/utils/assert.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.assert = void 0;
    function assert2(predicate) {
      if (!predicate) {
        throw new Error("Internal assertion failed.");
      }
    }
    exports.assert = assert2;
  }
});

// node_modules/chromium-bidi/lib/cjs/utils/Mutex.js
var require_Mutex = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/utils/Mutex.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Mutex = void 0;
    var _locked, _acquirers, _release, release_fn;
    var Mutex = class {
      constructor() {
        __privateAdd(this, _release);
        __privateAdd(this, _locked, false);
        __privateAdd(this, _acquirers, []);
      }
      acquire() {
        const state = { resolved: false };
        if (__privateGet(this, _locked)) {
          return new Promise((resolve) => {
            __privateGet(this, _acquirers).push(() => resolve(__privateMethod(this, _release, release_fn).bind(this, state)));
          });
        }
        __privateSet(this, _locked, true);
        return Promise.resolve(__privateMethod(this, _release, release_fn).bind(this, state));
      }
      async run(action) {
        const release = await this.acquire();
        try {
          const result = await action();
          return result;
        } finally {
          release();
        }
      }
    };
    _locked = new WeakMap();
    _acquirers = new WeakMap();
    _release = new WeakSet();
    release_fn = function(state) {
      if (state.resolved) {
        throw new Error("Cannot release more than once.");
      }
      state.resolved = true;
      const resolve = __privateGet(this, _acquirers).shift();
      if (!resolve) {
        __privateSet(this, _locked, false);
        return;
      }
      resolve();
    };
    exports.Mutex = Mutex;
  }
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/input/InputSource.js
var require_InputSource = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/input/InputSource.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WheelSource = exports.PointerSource = exports.KeySource = exports.NoneSource = exports.SourceType = void 0;
    var protocol_js_1 = require_protocol();
    exports.SourceType = protocol_js_1.Input.SourceActionsType;
    var NoneSource = class {
      constructor() {
        __publicField(this, "type", exports.SourceType.None);
      }
    };
    exports.NoneSource = NoneSource;
    var _modifiers, _setModifier, setModifier_fn;
    var KeySource = class {
      constructor() {
        __privateAdd(this, _setModifier);
        __publicField(this, "type", exports.SourceType.Key);
        __publicField(this, "pressed", /* @__PURE__ */ new Set());
        __privateAdd(this, _modifiers, 0);
      }
      get modifiers() {
        return __privateGet(this, _modifiers);
      }
      get alt() {
        return (__privateGet(this, _modifiers) & 1) === 1;
      }
      set alt(value) {
        __privateMethod(this, _setModifier, setModifier_fn).call(this, value, 1);
      }
      get ctrl() {
        return (__privateGet(this, _modifiers) & 2) === 2;
      }
      set ctrl(value) {
        __privateMethod(this, _setModifier, setModifier_fn).call(this, value, 2);
      }
      get meta() {
        return (__privateGet(this, _modifiers) & 4) === 4;
      }
      set meta(value) {
        __privateMethod(this, _setModifier, setModifier_fn).call(this, value, 4);
      }
      get shift() {
        return (__privateGet(this, _modifiers) & 8) === 8;
      }
      set shift(value) {
        __privateMethod(this, _setModifier, setModifier_fn).call(this, value, 8);
      }
    };
    _modifiers = new WeakMap();
    _setModifier = new WeakSet();
    setModifier_fn = function(value, bit) {
      if (value) {
        __privateSet(this, _modifiers, __privateGet(this, _modifiers) | bit);
      } else {
        __privateSet(this, _modifiers, __privateGet(this, _modifiers) ^ bit);
      }
    };
    exports.KeySource = KeySource;
    var _DOUBLE_CLICK_TIME_MS, _MAX_DOUBLE_CLICK_RADIUS, _clickCount, _lastClick;
    var _PointerSource = class {
      constructor(id, subtype) {
        __publicField(this, "type", exports.SourceType.Pointer);
        __publicField(this, "subtype");
        __publicField(this, "pointerId");
        __publicField(this, "pressed", /* @__PURE__ */ new Set());
        __publicField(this, "x", 0);
        __publicField(this, "y", 0);
        __privateAdd(this, _clickCount, 0);
        __privateAdd(this, _lastClick, void 0);
        this.pointerId = id;
        this.subtype = subtype;
      }
      get buttons() {
        let buttons = 0;
        for (const button of this.pressed) {
          switch (button) {
            case 0:
              buttons |= 1;
              break;
            case 1:
              buttons |= 4;
              break;
            case 2:
              buttons |= 2;
              break;
            case 3:
              buttons |= 8;
              break;
            case 4:
              buttons |= 16;
              break;
          }
        }
        return buttons;
      }
      setClickCount(context) {
        if (!__privateGet(this, _lastClick) || context.timeStamp - __privateGet(this, _lastClick).timeStamp > __privateGet(_PointerSource, _DOUBLE_CLICK_TIME_MS) || Math.abs(__privateGet(this, _lastClick).x - context.x) > __privateGet(_PointerSource, _MAX_DOUBLE_CLICK_RADIUS) || Math.abs(__privateGet(this, _lastClick).y - context.y) > __privateGet(_PointerSource, _MAX_DOUBLE_CLICK_RADIUS)) {
          __privateSet(this, _clickCount, 0);
        }
        ++__privateWrapper(this, _clickCount)._;
        __privateSet(this, _lastClick, context);
      }
      get clickCount() {
        return __privateGet(this, _clickCount);
      }
    };
    var PointerSource = _PointerSource;
    _DOUBLE_CLICK_TIME_MS = new WeakMap();
    _MAX_DOUBLE_CLICK_RADIUS = new WeakMap();
    _clickCount = new WeakMap();
    _lastClick = new WeakMap();
    __privateAdd(PointerSource, _DOUBLE_CLICK_TIME_MS, 500);
    __privateAdd(PointerSource, _MAX_DOUBLE_CLICK_RADIUS, 2);
    exports.PointerSource = PointerSource;
    var WheelSource = class {
      constructor() {
        __publicField(this, "type", exports.SourceType.Wheel);
      }
    };
    exports.WheelSource = WheelSource;
  }
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/input/InputState.js
var require_InputState = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/input/InputState.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InputState = void 0;
    var protocol_js_1 = require_protocol();
    var Mutex_js_1 = require_Mutex();
    var InputSource_js_1 = require_InputSource();
    var _sources, _mutex;
    var InputState = class {
      constructor() {
        __publicField(this, "cancelList", []);
        __privateAdd(this, _sources, /* @__PURE__ */ new Map());
        __privateAdd(this, _mutex, new Mutex_js_1.Mutex());
      }
      getOrCreate(id, type, subtype) {
        let source = __privateGet(this, _sources).get(id);
        if (!source) {
          switch (type) {
            case InputSource_js_1.SourceType.None:
              source = new InputSource_js_1.NoneSource();
              break;
            case InputSource_js_1.SourceType.Key:
              source = new InputSource_js_1.KeySource();
              break;
            case InputSource_js_1.SourceType.Pointer: {
              let pointerId = subtype === protocol_js_1.Input.PointerType.Mouse ? 0 : 2;
              const pointerIds = /* @__PURE__ */ new Set();
              for (const [, source2] of __privateGet(this, _sources)) {
                if (source2.type === InputSource_js_1.SourceType.Pointer) {
                  pointerIds.add(source2.pointerId);
                }
              }
              while (pointerIds.has(pointerId)) {
                ++pointerId;
              }
              source = new InputSource_js_1.PointerSource(pointerId, subtype);
              break;
            }
            case InputSource_js_1.SourceType.Wheel:
              source = new InputSource_js_1.WheelSource();
              break;
            default:
              throw new protocol_js_1.Message.InvalidArgumentException(`Expected "${InputSource_js_1.SourceType.None}", "${InputSource_js_1.SourceType.Key}", "${InputSource_js_1.SourceType.Pointer}", or "${InputSource_js_1.SourceType.Wheel}". Found unknown source type ${type}.`);
          }
          __privateGet(this, _sources).set(id, source);
          return source;
        }
        if (source.type !== type) {
          throw new protocol_js_1.Message.InvalidArgumentException(`Input source type of ${id} is ${source.type}, but received ${type}.`);
        }
        return source;
      }
      get(id) {
        const source = __privateGet(this, _sources).get(id);
        if (!source) {
          throw new protocol_js_1.Message.UnknownErrorException(`Internal error.`);
        }
        return source;
      }
      getGlobalKeyState() {
        const state = new InputSource_js_1.KeySource();
        for (const [, source] of __privateGet(this, _sources)) {
          if (source.type !== InputSource_js_1.SourceType.Key) {
            continue;
          }
          for (const pressed of source.pressed) {
            state.pressed.add(pressed);
          }
          state.alt || (state.alt = source.alt);
          state.ctrl || (state.ctrl = source.ctrl);
          state.meta || (state.meta = source.meta);
          state.shift || (state.shift = source.shift);
        }
        return state;
      }
      get queue() {
        return __privateGet(this, _mutex);
      }
    };
    _sources = new WeakMap();
    _mutex = new WeakMap();
    exports.InputState = InputState;
  }
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/input/InputStateManager.js
var require_InputStateManager = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/input/InputStateManager.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InputStateManager = void 0;
    var assert_js_1 = require_assert();
    var InputState_js_1 = require_InputState();
    var _states;
    var InputStateManager = class {
      constructor() {
        __privateAdd(this, _states, /* @__PURE__ */ new WeakMap());
      }
      get(context) {
        (0, assert_js_1.assert)(context.isTopLevelContext());
        let state = __privateGet(this, _states).get(context);
        if (!state) {
          state = new InputState_js_1.InputState();
          __privateGet(this, _states).set(context, state);
        }
        return state;
      }
      delete(context) {
        __privateGet(this, _states).delete(context);
      }
    };
    _states = new WeakMap();
    exports.InputStateManager = InputStateManager;
  }
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/input/USKeyboardLayout.js
var require_USKeyboardLayout = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/input/USKeyboardLayout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.KeyToKeyCode = void 0;
    exports.KeyToKeyCode = {
      "0": 48,
      "1": 49,
      "2": 50,
      "3": 51,
      "4": 52,
      "5": 53,
      "6": 54,
      "7": 55,
      "8": 56,
      "9": 57,
      Abort: 3,
      Help: 6,
      Backspace: 8,
      Tab: 9,
      Numpad5: 12,
      NumpadEnter: 13,
      Enter: 13,
      "\\r": 13,
      "\\n": 13,
      ShiftLeft: 16,
      ShiftRight: 16,
      ControlLeft: 17,
      ControlRight: 17,
      AltLeft: 18,
      AltRight: 18,
      Pause: 19,
      CapsLock: 20,
      Escape: 27,
      Convert: 28,
      NonConvert: 29,
      Space: 32,
      Numpad9: 33,
      PageUp: 33,
      Numpad3: 34,
      PageDown: 34,
      End: 35,
      Numpad1: 35,
      Home: 36,
      Numpad7: 36,
      ArrowLeft: 37,
      Numpad4: 37,
      Numpad8: 38,
      ArrowUp: 38,
      ArrowRight: 39,
      Numpad6: 39,
      Numpad2: 40,
      ArrowDown: 40,
      Select: 41,
      Open: 43,
      PrintScreen: 44,
      Insert: 45,
      Numpad0: 45,
      Delete: 46,
      NumpadDecimal: 46,
      Digit0: 48,
      Digit1: 49,
      Digit2: 50,
      Digit3: 51,
      Digit4: 52,
      Digit5: 53,
      Digit6: 54,
      Digit7: 55,
      Digit8: 56,
      Digit9: 57,
      KeyA: 65,
      KeyB: 66,
      KeyC: 67,
      KeyD: 68,
      KeyE: 69,
      KeyF: 70,
      KeyG: 71,
      KeyH: 72,
      KeyI: 73,
      KeyJ: 74,
      KeyK: 75,
      KeyL: 76,
      KeyM: 77,
      KeyN: 78,
      KeyO: 79,
      KeyP: 80,
      KeyQ: 81,
      KeyR: 82,
      KeyS: 83,
      KeyT: 84,
      KeyU: 85,
      KeyV: 86,
      KeyW: 87,
      KeyX: 88,
      KeyY: 89,
      KeyZ: 90,
      MetaLeft: 91,
      MetaRight: 92,
      ContextMenu: 93,
      NumpadMultiply: 106,
      NumpadAdd: 107,
      NumpadSubtract: 109,
      NumpadDivide: 111,
      F1: 112,
      F2: 113,
      F3: 114,
      F4: 115,
      F5: 116,
      F6: 117,
      F7: 118,
      F8: 119,
      F9: 120,
      F10: 121,
      F11: 122,
      F12: 123,
      F13: 124,
      F14: 125,
      F15: 126,
      F16: 127,
      F17: 128,
      F18: 129,
      F19: 130,
      F20: 131,
      F21: 132,
      F22: 133,
      F23: 134,
      F24: 135,
      NumLock: 144,
      ScrollLock: 145,
      AudioVolumeMute: 173,
      AudioVolumeDown: 174,
      AudioVolumeUp: 175,
      MediaTrackNext: 176,
      MediaTrackPrevious: 177,
      MediaStop: 178,
      MediaPlayPause: 179,
      Semicolon: 186,
      Equal: 187,
      NumpadEqual: 187,
      Comma: 188,
      Minus: 189,
      Period: 190,
      Slash: 191,
      Backquote: 192,
      BracketLeft: 219,
      Backslash: 220,
      BracketRight: 221,
      Quote: 222,
      AltGraph: 225,
      Props: 247,
      Cancel: 3,
      Clear: 12,
      Shift: 16,
      Control: 17,
      Alt: 18,
      Accept: 30,
      ModeChange: 31,
      " ": 32,
      Print: 42,
      Execute: 43,
      "\\u0000": 46,
      a: 65,
      b: 66,
      c: 67,
      d: 68,
      e: 69,
      f: 70,
      g: 71,
      h: 72,
      i: 73,
      j: 74,
      k: 75,
      l: 76,
      m: 77,
      n: 78,
      o: 79,
      p: 80,
      q: 81,
      r: 82,
      s: 83,
      t: 84,
      u: 85,
      v: 86,
      w: 87,
      x: 88,
      y: 89,
      z: 90,
      Meta: 91,
      "*": 106,
      "+": 107,
      "-": 109,
      "/": 111,
      ";": 186,
      "=": 187,
      ",": 188,
      ".": 190,
      "`": 192,
      "[": 219,
      "\\\\": 220,
      "]": 221,
      "'": 222,
      Attn: 246,
      CrSel: 247,
      ExSel: 248,
      EraseEof: 249,
      Play: 250,
      ZoomOut: 251,
      ")": 48,
      "!": 49,
      "@": 50,
      "#": 51,
      $: 52,
      "%": 53,
      "^": 54,
      "&": 55,
      "(": 57,
      A: 65,
      B: 66,
      C: 67,
      D: 68,
      E: 69,
      F: 70,
      G: 71,
      H: 72,
      I: 73,
      J: 74,
      K: 75,
      L: 76,
      M: 77,
      N: 78,
      O: 79,
      P: 80,
      Q: 81,
      R: 82,
      S: 83,
      T: 84,
      U: 85,
      V: 86,
      W: 87,
      X: 88,
      Y: 89,
      Z: 90,
      ":": 186,
      "<": 188,
      _: 189,
      ">": 190,
      "?": 191,
      "~": 192,
      "{": 219,
      "|": 220,
      "}": 221,
      '"': 222,
      Camera: 44,
      EndCall: 95,
      VolumeDown: 182,
      VolumeUp: 183
    };
  }
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/input/keyUtils.js
var require_keyUtils = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/input/keyUtils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getKeyLocation = exports.getKeyCode = exports.getNormalizedKey = void 0;
    function getNormalizedKey(value) {
      switch (value) {
        case "\uE000":
          return "Unidentified";
        case "\uE001":
          return "Cancel";
        case "\uE002":
          return "Help";
        case "\uE003":
          return "Backspace";
        case "\uE004":
          return "Tab";
        case "\uE005":
          return "Clear";
        case "\uE006":
          return "Return";
        case "\uE007":
          return "Enter";
        case "\uE008":
          return "Shift";
        case "\uE009":
          return "Control";
        case "\uE00A":
          return "Alt";
        case "\uE00B":
          return "Pause";
        case "\uE00C":
          return "Escape";
        case "\uE00D":
          return " ";
        case "\uE00E":
          return "PageUp";
        case "\uE00F":
          return "PageDown";
        case "\uE010":
          return "End";
        case "\uE011":
          return "Home";
        case "\uE012":
          return "ArrowLeft";
        case "\uE013":
          return "ArrowUp";
        case "\uE014":
          return "ArrowRight";
        case "\uE015":
          return "ArrowDown";
        case "\uE016":
          return "Insert";
        case "\uE017":
          return "Delete";
        case "\uE018":
          return ";";
        case "\uE019":
          return "=";
        case "\uE01A":
          return "0";
        case "\uE01B":
          return "1";
        case "\uE01C":
          return "2";
        case "\uE01D":
          return "3";
        case "\uE01E":
          return "4";
        case "\uE01F":
          return "5";
        case "\uE020":
          return "6";
        case "\uE021":
          return "7";
        case "\uE022":
          return "8";
        case "\uE023":
          return "9";
        case "\uE024":
          return "*";
        case "\uE025":
          return "+";
        case "\uE026":
          return ",";
        case "\uE027":
          return "-";
        case "\uE028":
          return ".";
        case "\uE029":
          return "/";
        case "\uE031":
          return "F1";
        case "\uE032":
          return "F2";
        case "\uE033":
          return "F3";
        case "\uE034":
          return "F4";
        case "\uE035":
          return "F5";
        case "\uE036":
          return "F6";
        case "\uE037":
          return "F7";
        case "\uE038":
          return "F8";
        case "\uE039":
          return "F9";
        case "\uE03A":
          return "F10";
        case "\uE03B":
          return "F11";
        case "\uE03C":
          return "F12";
        case "\uE03D":
          return "Meta";
        case "\uE040":
          return "ZenkakuHankaku";
        case "\uE050":
          return "Shift";
        case "\uE051":
          return "Control";
        case "\uE052":
          return "Alt";
        case "\uE053":
          return "Meta";
        case "\uE054":
          return "PageUp";
        case "\uE055":
          return "PageDown";
        case "\uE056":
          return "End";
        case "\uE057":
          return "Home";
        case "\uE058":
          return "ArrowLeft";
        case "\uE059":
          return "ArrowUp";
        case "\uE05A":
          return "ArrowRight";
        case "\uE05B":
          return "ArrowDown";
        case "\uE05C":
          return "Insert";
        case "\uE05D":
          return "Delete";
        default:
          return value;
      }
    }
    exports.getNormalizedKey = getNormalizedKey;
    function getKeyCode(key) {
      switch (key) {
        case "`":
        case "~":
          return "Backquote";
        case "\\":
        case "|":
          return "Backslash";
        case "\uE003":
          return "Backspace";
        case "[":
        case "{":
          return "BracketLeft";
        case "]":
        case "}":
          return "BracketRight";
        case ",":
        case "<":
          return "Comma";
        case "0":
        case ")":
          return "Digit0";
        case "1":
        case "!":
          return "Digit1";
        case "2":
        case "@":
          return "Digit2";
        case "3":
        case "#":
          return "Digit3";
        case "4":
        case "$":
          return "Digit4";
        case "5":
        case "%":
          return "Digit5";
        case "6":
        case "^":
          return "Digit6";
        case "7":
        case "&":
          return "Digit7";
        case "8":
        case "*":
          return "Digit8";
        case "9":
        case "(":
          return "Digit9";
        case "=":
        case "+":
          return "Equal";
        case "a":
        case "A":
          return "KeyA";
        case "b":
        case "B":
          return "KeyB";
        case "c":
        case "C":
          return "KeyC";
        case "d":
        case "D":
          return "KeyD";
        case "e":
        case "E":
          return "KeyE";
        case "f":
        case "F":
          return "KeyF";
        case "g":
        case "G":
          return "KeyG";
        case "h":
        case "H":
          return "KeyH";
        case "i":
        case "I":
          return "KeyI";
        case "j":
        case "J":
          return "KeyJ";
        case "k":
        case "K":
          return "KeyK";
        case "l":
        case "L":
          return "KeyL";
        case "m":
        case "M":
          return "KeyM";
        case "n":
        case "N":
          return "KeyN";
        case "o":
        case "O":
          return "KeyO";
        case "p":
        case "P":
          return "KeyP";
        case "q":
        case "Q":
          return "KeyQ";
        case "r":
        case "R":
          return "KeyR";
        case "s":
        case "S":
          return "KeyS";
        case "t":
        case "T":
          return "KeyT";
        case "u":
        case "U":
          return "KeyU";
        case "v":
        case "V":
          return "KeyV";
        case "w":
        case "W":
          return "KeyW";
        case "x":
        case "X":
          return "KeyX";
        case "y":
        case "Y":
          return "KeyY";
        case "z":
        case "Z":
          return "KeyZ";
        case "-":
        case "_":
          return "Minus";
        case ".":
          return "Period";
        case "'":
        case '"':
          return "Quote";
        case ";":
        case ":":
          return "Semicolon";
        case "/":
        case "?":
          return "Slash";
        case "\uE00A":
          return "AltLeft";
        case "\uE052":
          return "AltRight";
        case "\uE009":
          return "ControlLeft";
        case "\uE051":
          return "ControlRight";
        case "\uE006":
          return "Enter";
        case "\uE03D":
          return "MetaLeft";
        case "\uE053":
          return "MetaRight";
        case "\uE008":
          return "ShiftLeft";
        case "\uE050":
          return "ShiftRight";
        case " ":
        case "\uE00D":
          return "Space";
        case "\uE004":
          return "Tab";
        case "\uE017":
          return "Delete";
        case "\uE010":
          return "End";
        case "\uE002":
          return "Help";
        case "\uE011":
          return "Home";
        case "\uE016":
          return "Insert";
        case "\uE00F":
          return "PageDown";
        case "\uE00E":
          return "PageUp";
        case "\uE015":
          return "ArrowDown";
        case "\uE012":
          return "ArrowLeft";
        case "\uE014":
          return "ArrowRight";
        case "\uE013":
          return "ArrowUp";
        case "\uE00C":
          return "Escape";
        case "\uE031":
          return "F1";
        case "\uE032":
          return "F2";
        case "\uE033":
          return "F3";
        case "\uE034":
          return "F4";
        case "\uE035":
          return "F5";
        case "\uE036":
          return "F6";
        case "\uE037":
          return "F7";
        case "\uE038":
          return "F8";
        case "\uE039":
          return "F9";
        case "\uE03A":
          return "F10";
        case "\uE03B":
          return "F11";
        case "\uE03C":
          return "F12";
        case "\uE01A":
        case "\uE05C":
          return "Numpad0";
        case "\uE01B":
        case "\uE056":
          return "Numpad1";
        case "\uE01C":
        case "\uE05B":
          return "Numpad2";
        case "\uE01D":
        case "\uE055":
          return "Numpad3";
        case "\uE01E":
        case "\uE058":
          return "Numpad4";
        case "\uE01F":
          return "Numpad5";
        case "\uE020":
        case "\uE05A":
          return "Numpad6";
        case "\uE021":
        case "\uE057":
          return "Numpad7";
        case "\uE022":
        case "\uE059":
          return "Numpad8";
        case "\uE023":
        case "\uE054":
          return "Numpad9";
        case "\uE025":
          return "NumpadAdd";
        case "\uE026":
          return "NumpadComma";
        case "\uE028":
        case "\uE05D":
          return "NumpadDecimal";
        case "\uE029":
          return "NumpadDivide";
        case "\uE007":
          return "NumpadEnter";
        case "\uE024":
          return "NumpadMultiply";
        case "\uE027":
          return "NumpadSubtract";
        default:
          return;
      }
    }
    exports.getKeyCode = getKeyCode;
    function getKeyLocation(key) {
      switch (key) {
        case "\uE007":
        case "\uE008":
        case "\uE009":
        case "\uE00A":
        case "\uE03D":
          return 1;
        case "\uE01A":
        case "\uE01B":
        case "\uE01C":
        case "\uE01D":
        case "\uE01E":
        case "\uE01F":
        case "\uE020":
        case "\uE021":
        case "\uE022":
        case "\uE023":
        case "\uE024":
        case "\uE025":
        case "\uE026":
        case "\uE027":
        case "\uE028":
        case "\uE029":
        case "\uE054":
        case "\uE055":
        case "\uE056":
        case "\uE057":
        case "\uE058":
        case "\uE059":
        case "\uE05A":
        case "\uE05B":
        case "\uE05C":
        case "\uE05D":
          return 3;
        case "\uE050":
        case "\uE051":
        case "\uE052":
        case "\uE053":
          return 2;
        default:
          return 0;
      }
    }
    exports.getKeyLocation = getKeyLocation;
  }
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/input/ActionDispatcher.js
var require_ActionDispatcher = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/input/ActionDispatcher.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActionDispatcher = void 0;
    var protocol_js_1 = require_protocol();
    var assert_js_1 = require_assert();
    var USKeyboardLayout_js_1 = require_USKeyboardLayout();
    var keyUtils_js_1 = require_keyUtils();
    var CALCULATE_IN_VIEW_CENTER_PT_DECL = ((i) => {
      const t = i.getClientRects()[0], e = Math.max(0, Math.min(t.x, t.x + t.width)), n = Math.min(window.innerWidth, Math.max(t.x, t.x + t.width)), h = Math.max(0, Math.min(t.y, t.y + t.height)), m = Math.min(window.innerHeight, Math.max(t.y, t.y + t.height));
      return [e + (n - e >> 1), h + (m - h >> 1)];
    }).toString();
    async function getElementCenter(context, element) {
      var _a, _b, _c, _d;
      const { result } = await (await context.getOrCreateSandbox(void 0)).callFunction(CALCULATE_IN_VIEW_CENTER_PT_DECL, { type: "undefined" }, [element], false, "none", {});
      if (result.type === "exception") {
        throw new protocol_js_1.Message.NoSuchElementException(`Origin element ${element.sharedId} was not found`);
      }
      (0, assert_js_1.assert)(result.result.type === "array");
      (0, assert_js_1.assert)(((_b = (_a = result.result.value) == null ? void 0 : _a[0]) == null ? void 0 : _b.type) === "number");
      (0, assert_js_1.assert)(((_d = (_c = result.result.value) == null ? void 0 : _c[1]) == null ? void 0 : _d.type) === "number");
      const { result: { value: [{ value: x }, { value: y }] } } = result;
      return { x, y };
    }
    var _tickStart, _tickDuration, _inputState, _context, _dispatchAction, dispatchAction_fn, _dispatchPointerDownAction, dispatchPointerDownAction_fn, _dispatchPointerUpAction, dispatchPointerUpAction_fn, _dispatchPointerMoveAction, dispatchPointerMoveAction_fn, _getCoordinateFromOrigin, getCoordinateFromOrigin_fn, _dispatchScrollAction, dispatchScrollAction_fn, _dispatchKeyDownAction, dispatchKeyDownAction_fn, _dispatchKeyUpAction, dispatchKeyUpAction_fn;
    var ActionDispatcher = class {
      constructor(inputState, context) {
        __privateAdd(this, _dispatchAction);
        __privateAdd(this, _dispatchPointerDownAction);
        __privateAdd(this, _dispatchPointerUpAction);
        __privateAdd(this, _dispatchPointerMoveAction);
        __privateAdd(this, _getCoordinateFromOrigin);
        __privateAdd(this, _dispatchScrollAction);
        __privateAdd(this, _dispatchKeyDownAction);
        __privateAdd(this, _dispatchKeyUpAction);
        __privateAdd(this, _tickStart, 0);
        __privateAdd(this, _tickDuration, 0);
        __privateAdd(this, _inputState, void 0);
        __privateAdd(this, _context, void 0);
        __privateSet(this, _inputState, inputState);
        __privateSet(this, _context, context);
      }
      async dispatchActions(optionsByTick) {
        await __privateGet(this, _inputState).queue.run(async () => {
          for (const options of optionsByTick) {
            await this.dispatchTickActions(options);
          }
        });
      }
      async dispatchTickActions(options) {
        __privateSet(this, _tickStart, performance.now());
        __privateSet(this, _tickDuration, 0);
        for (const { action } of options) {
          if ("duration" in action && action.duration !== void 0) {
            __privateSet(this, _tickDuration, Math.max(__privateGet(this, _tickDuration), action.duration));
          }
        }
        const promises = [
          new Promise((resolve) => setTimeout(resolve, __privateGet(this, _tickDuration)))
        ];
        for (const option of options) {
          promises.push(__privateMethod(this, _dispatchAction, dispatchAction_fn).call(this, option));
        }
        await Promise.all(promises);
      }
    };
    _tickStart = new WeakMap();
    _tickDuration = new WeakMap();
    _inputState = new WeakMap();
    _context = new WeakMap();
    _dispatchAction = new WeakSet();
    dispatchAction_fn = async function({ id, action }) {
      const source = __privateGet(this, _inputState).get(id);
      const keyState = __privateGet(this, _inputState).getGlobalKeyState();
      switch (action.type) {
        case protocol_js_1.Input.ActionType.KeyDown: {
          await __privateMethod(this, _dispatchKeyDownAction, dispatchKeyDownAction_fn).call(this, source, action);
          __privateGet(this, _inputState).cancelList.push({
            id,
            action: {
              ...action,
              type: protocol_js_1.Input.ActionType.KeyUp
            }
          });
          break;
        }
        case protocol_js_1.Input.ActionType.KeyUp: {
          await __privateMethod(this, _dispatchKeyUpAction, dispatchKeyUpAction_fn).call(this, source, action);
          break;
        }
        case protocol_js_1.Input.ActionType.Pause: {
          break;
        }
        case protocol_js_1.Input.ActionType.PointerDown: {
          await __privateMethod(this, _dispatchPointerDownAction, dispatchPointerDownAction_fn).call(this, source, keyState, action);
          __privateGet(this, _inputState).cancelList.push({
            id,
            action: {
              ...action,
              type: protocol_js_1.Input.ActionType.PointerUp
            }
          });
          break;
        }
        case protocol_js_1.Input.ActionType.PointerMove: {
          await __privateMethod(this, _dispatchPointerMoveAction, dispatchPointerMoveAction_fn).call(this, source, keyState, action);
          break;
        }
        case protocol_js_1.Input.ActionType.PointerUp: {
          await __privateMethod(this, _dispatchPointerUpAction, dispatchPointerUpAction_fn).call(this, source, keyState, action);
          break;
        }
        case protocol_js_1.Input.ActionType.Scroll: {
          await __privateMethod(this, _dispatchScrollAction, dispatchScrollAction_fn).call(this, source, keyState, action);
          break;
        }
      }
    };
    _dispatchPointerDownAction = new WeakSet();
    dispatchPointerDownAction_fn = function(source, keyState, action) {
      const { button } = action;
      if (source.pressed.has(button)) {
        return;
      }
      source.pressed.add(button);
      const { x, y, subtype: pointerType } = source;
      const { width, height, pressure, twist, tangentialPressure } = action;
      const { tiltX, tiltY } = "tiltX" in action ? action : {};
      const { modifiers } = keyState;
      switch (pointerType) {
        case protocol_js_1.Input.PointerType.Mouse:
        case protocol_js_1.Input.PointerType.Pen:
          source.setClickCount({ x, y, timeStamp: performance.now() });
          return __privateGet(this, _context).cdpTarget.cdpClient.sendCommand("Input.dispatchMouseEvent", {
            type: "mousePressed",
            x,
            y,
            modifiers,
            button: (() => {
              switch (button) {
                case 0:
                  return "left";
                case 1:
                  return "middle";
                case 2:
                  return "right";
                case 3:
                  return "back";
                case 4:
                  return "forward";
                default:
                  return "none";
              }
            })(),
            buttons: source.buttons,
            clickCount: source.clickCount,
            pointerType,
            tangentialPressure,
            tiltX,
            tiltY,
            twist,
            force: pressure
          });
        case protocol_js_1.Input.PointerType.Touch:
          return __privateGet(this, _context).cdpTarget.cdpClient.sendCommand("Input.dispatchTouchEvent", {
            type: "touchStart",
            touchPoints: [
              {
                x,
                y,
                radiusX: width,
                radiusY: height,
                tangentialPressure,
                tiltX,
                tiltY,
                twist,
                force: pressure,
                id: source.pointerId
              }
            ],
            modifiers
          });
      }
    };
    _dispatchPointerUpAction = new WeakSet();
    dispatchPointerUpAction_fn = function(source, keyState, action) {
      const { button } = action;
      if (!source.pressed.has(button)) {
        return;
      }
      source.pressed.delete(button);
      const { x, y, subtype: pointerType } = source;
      const { modifiers } = keyState;
      switch (pointerType) {
        case protocol_js_1.Input.PointerType.Mouse:
        case protocol_js_1.Input.PointerType.Pen:
          return __privateGet(this, _context).cdpTarget.cdpClient.sendCommand("Input.dispatchMouseEvent", {
            type: "mouseReleased",
            x,
            y,
            modifiers,
            button: (() => {
              switch (button) {
                case 0:
                  return "left";
                case 1:
                  return "middle";
                case 2:
                  return "right";
                case 3:
                  return "back";
                case 4:
                  return "forward";
                default:
                  return "none";
              }
            })(),
            buttons: source.buttons,
            clickCount: source.clickCount,
            pointerType
          });
        case protocol_js_1.Input.PointerType.Touch:
          return __privateGet(this, _context).cdpTarget.cdpClient.sendCommand("Input.dispatchTouchEvent", {
            type: "touchEnd",
            touchPoints: [
              {
                x,
                y,
                id: source.pointerId
              }
            ],
            modifiers
          });
      }
    };
    _dispatchPointerMoveAction = new WeakSet();
    dispatchPointerMoveAction_fn = async function(source, keyState, action) {
      const { x: startX, y: startY, subtype: pointerType } = source;
      const { width, height, pressure, twist, tangentialPressure, x: offsetX, y: offsetY, origin = "viewport", duration = __privateGet(this, _tickDuration) } = action;
      const { tiltX, tiltY } = "tiltX" in action ? action : {};
      const { targetX, targetY } = await __privateMethod(this, _getCoordinateFromOrigin, getCoordinateFromOrigin_fn).call(this, origin, offsetX, offsetY, startX, startY);
      if (targetX < 0 || targetY < 0) {
        throw new protocol_js_1.Message.MoveTargetOutOfBoundsException(`Cannot move beyond viewport (x: ${targetX}, y: ${targetY})`);
      }
      let last;
      do {
        const ratio = duration > 0 ? (performance.now() - __privateGet(this, _tickStart)) / duration : 1;
        last = ratio >= 1;
        let x;
        let y;
        if (last) {
          x = targetX;
          y = targetY;
        } else {
          x = Math.round(ratio * (targetX - startX) + startX);
          y = Math.round(ratio * (targetY - startY) + startY);
        }
        if (source.x !== x || source.y !== y) {
          const { modifiers } = keyState;
          switch (pointerType) {
            case protocol_js_1.Input.PointerType.Mouse:
            case protocol_js_1.Input.PointerType.Pen:
              await __privateGet(this, _context).cdpTarget.cdpClient.sendCommand("Input.dispatchMouseEvent", {
                type: "mouseMoved",
                x,
                y,
                modifiers,
                clickCount: 0,
                buttons: source.buttons,
                pointerType,
                tangentialPressure,
                tiltX,
                tiltY,
                twist,
                force: pressure
              });
              break;
            case protocol_js_1.Input.PointerType.Touch:
              await __privateGet(this, _context).cdpTarget.cdpClient.sendCommand("Input.dispatchTouchEvent", {
                type: "touchMove",
                touchPoints: [
                  {
                    x,
                    y,
                    radiusX: width,
                    radiusY: height,
                    tangentialPressure,
                    tiltX,
                    tiltY,
                    twist,
                    force: pressure,
                    id: source.pointerId
                  }
                ],
                modifiers
              });
              break;
          }
          source.x = x;
          source.y = y;
        }
      } while (!last);
    };
    _getCoordinateFromOrigin = new WeakSet();
    getCoordinateFromOrigin_fn = async function(origin, offsetX, offsetY, startX, startY) {
      let targetX;
      let targetY;
      switch (origin) {
        case "viewport":
          targetX = offsetX;
          targetY = offsetY;
          break;
        case "pointer":
          targetX = startX + offsetX;
          targetY = startY + offsetY;
          break;
        default: {
          const { x: posX, y: posY } = await getElementCenter(__privateGet(this, _context), origin.element);
          targetX = posX + offsetX;
          targetY = posY + offsetY;
          break;
        }
      }
      return { targetX, targetY };
    };
    _dispatchScrollAction = new WeakSet();
    dispatchScrollAction_fn = async function(_source, keyState, action) {
      const { deltaX: targetDeltaX, deltaY: targetDeltaY, x: offsetX, y: offsetY, origin = "viewport", duration = __privateGet(this, _tickDuration) } = action;
      if (origin === "pointer") {
        throw new protocol_js_1.Message.InvalidArgumentException('"pointer" origin is invalid for scrolling.');
      }
      const { targetX, targetY } = await __privateMethod(this, _getCoordinateFromOrigin, getCoordinateFromOrigin_fn).call(this, origin, offsetX, offsetY, 0, 0);
      if (targetX < 0 || targetY < 0) {
        throw new protocol_js_1.Message.MoveTargetOutOfBoundsException(`Cannot move beyond viewport (x: ${targetX}, y: ${targetY})`);
      }
      let currentDeltaX = 0;
      let currentDeltaY = 0;
      let last;
      do {
        const ratio = duration > 0 ? (performance.now() - __privateGet(this, _tickStart)) / duration : 1;
        last = ratio >= 1;
        let deltaX;
        let deltaY;
        if (last) {
          deltaX = targetDeltaX - currentDeltaX;
          deltaY = targetDeltaY - currentDeltaY;
        } else {
          deltaX = Math.round(ratio * targetDeltaX - currentDeltaX);
          deltaY = Math.round(ratio * targetDeltaY - currentDeltaY);
        }
        if (deltaX !== 0 || deltaY !== 0) {
          const { modifiers } = keyState;
          await __privateGet(this, _context).cdpTarget.cdpClient.sendCommand("Input.dispatchMouseEvent", {
            type: "mouseWheel",
            deltaX,
            deltaY,
            x: targetX,
            y: targetY,
            modifiers
          });
          currentDeltaX += deltaX;
          currentDeltaY += deltaY;
        }
      } while (!last);
    };
    _dispatchKeyDownAction = new WeakSet();
    dispatchKeyDownAction_fn = function(source, action) {
      const rawKey = action.value;
      const key = (0, keyUtils_js_1.getNormalizedKey)(rawKey);
      const repeat = source.pressed.has(key);
      const code = (0, keyUtils_js_1.getKeyCode)(rawKey);
      const location = (0, keyUtils_js_1.getKeyLocation)(rawKey);
      switch (key) {
        case "Alt":
          source.alt = true;
          break;
        case "Shift":
          source.shift = true;
          break;
        case "Control":
          source.ctrl = true;
          break;
        case "Meta":
          source.meta = true;
          break;
      }
      source.pressed.add(key);
      const { modifiers } = source;
      const text = [...key].length === 1 ? key : void 0;
      return __privateGet(this, _context).cdpTarget.cdpClient.sendCommand("Input.dispatchKeyEvent", {
        type: text ? "keyDown" : "rawKeyDown",
        windowsVirtualKeyCode: USKeyboardLayout_js_1.KeyToKeyCode[key],
        key,
        code,
        text,
        unmodifiedText: text,
        autoRepeat: repeat,
        isSystemKey: source.alt || void 0,
        location: location < 2 ? location : void 0,
        isKeypad: location === 3,
        modifiers
      });
    };
    _dispatchKeyUpAction = new WeakSet();
    dispatchKeyUpAction_fn = function(source, action) {
      const rawKey = action.value;
      const key = (0, keyUtils_js_1.getNormalizedKey)(rawKey);
      if (!source.pressed.has(key)) {
        return;
      }
      const code = (0, keyUtils_js_1.getKeyCode)(rawKey);
      const location = (0, keyUtils_js_1.getKeyLocation)(rawKey);
      switch (key) {
        case "Alt":
          source.alt = false;
          break;
        case "Shift":
          source.shift = false;
          break;
        case "Control":
          source.ctrl = false;
          break;
        case "Meta":
          source.meta = false;
          break;
      }
      source.pressed.delete(key);
      const { modifiers } = source;
      const text = [...key].length === 1 ? key : void 0;
      return __privateGet(this, _context).cdpTarget.cdpClient.sendCommand("Input.dispatchKeyEvent", {
        type: "keyUp",
        windowsVirtualKeyCode: USKeyboardLayout_js_1.KeyToKeyCode[key],
        key,
        code,
        text,
        unmodifiedText: text,
        location: location < 2 ? location : void 0,
        isSystemKey: source.alt || void 0,
        isKeypad: location === 3,
        modifiers
      });
    };
    exports.ActionDispatcher = ActionDispatcher;
  }
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/context/PreloadScriptStorage.js
var require_PreloadScriptStorage = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/context/PreloadScriptStorage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PreloadScriptStorage = void 0;
    var _scripts;
    var PreloadScriptStorage = class {
      constructor() {
        __privateAdd(this, _scripts, /* @__PURE__ */ new Set());
      }
      findPreloadScripts(filter) {
        if (!filter) {
          return [...__privateGet(this, _scripts)];
        }
        return [...__privateGet(this, _scripts)].filter((script) => {
          if (filter.id !== void 0 && filter.id !== script.id) {
            return false;
          }
          if (filter.contextId !== void 0 && filter.contextId !== script.contextId) {
            return false;
          }
          if (filter.contextIds !== void 0 && !filter.contextIds.includes(script.contextId)) {
            return false;
          }
          if (filter.targetId !== void 0 && !script.targetIds.has(filter.targetId)) {
            return false;
          }
          return true;
        });
      }
      addPreloadScript(preloadScript) {
        __privateGet(this, _scripts).add(preloadScript);
      }
      removeBiDiPreloadScripts(filter) {
        for (const preloadScript of this.findPreloadScripts(filter)) {
          __privateGet(this, _scripts).delete(preloadScript);
        }
      }
    };
    _scripts = new WeakMap();
    exports.PreloadScriptStorage = PreloadScriptStorage;
  }
});

// node_modules/chromium-bidi/lib/cjs/utils/unitConversions.js
var require_unitConversions = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/utils/unitConversions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.inchesFromCm = void 0;
    function inchesFromCm(cm) {
      return cm / 2.54;
    }
    exports.inchesFromCm = inchesFromCm;
  }
});

// node_modules/chromium-bidi/lib/cjs/utils/deferred.js
var require_deferred = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/utils/deferred.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Deferred = void 0;
    var _isFinished, _promise, _resolve, _reject, _a;
    var Deferred2 = class {
      constructor() {
        __privateAdd(this, _isFinished, false);
        __privateAdd(this, _promise, void 0);
        __privateAdd(this, _resolve, void 0);
        __privateAdd(this, _reject, void 0);
        __publicField(this, _a, "Promise");
        __privateSet(this, _promise, new Promise((resolve, reject) => {
          __privateSet(this, _resolve, resolve);
          __privateSet(this, _reject, reject);
        }));
        __privateGet(this, _promise).catch((_error) => {
        });
      }
      get isFinished() {
        return __privateGet(this, _isFinished);
      }
      then(onFulfilled, onRejected) {
        return __privateGet(this, _promise).then(onFulfilled, onRejected);
      }
      catch(onRejected) {
        return __privateGet(this, _promise).catch(onRejected);
      }
      resolve(value) {
        var _a2;
        __privateSet(this, _isFinished, true);
        (_a2 = __privateGet(this, _resolve)) == null ? void 0 : _a2.call(this, value);
      }
      reject(reason) {
        var _a2;
        __privateSet(this, _isFinished, true);
        (_a2 = __privateGet(this, _reject)) == null ? void 0 : _a2.call(this, reason);
      }
      finally(onFinally) {
        return __privateGet(this, _promise).finally(onFinally);
      }
    };
    _a = Symbol.toStringTag;
    _isFinished = new WeakMap();
    _promise = new WeakMap();
    _resolve = new WeakMap();
    _reject = new WeakMap();
    exports.Deferred = Deferred2;
  }
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/script/channelProxy.js
var require_channelProxy = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/script/channelProxy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChannelProxy = void 0;
    var protocol_js_1 = require_protocol();
    var _channel, _eventManager, _realm, _channelHandle, _sendMessageHandle, _createHandle, createHandle_fn, _createSendMessageHandle, createSendMessageHandle_fn;
    var _ChannelProxy = class {
      constructor(channelHandle, sendMessageHandle, channel, eventManager, realm) {
        __privateAdd(this, _channel, void 0);
        __privateAdd(this, _eventManager, void 0);
        __privateAdd(this, _realm, void 0);
        __privateAdd(this, _channelHandle, void 0);
        __privateAdd(this, _sendMessageHandle, void 0);
        var _a, _b;
        if (![0, null, void 0].includes((_a = channel.serializationOptions) == null ? void 0 : _a.maxDomDepth))
          throw new Error("serializationOptions.maxDomDepth other than 0 or null is not supported");
        if (![void 0, "none"].includes((_b = channel.serializationOptions) == null ? void 0 : _b.includeShadowTree)) {
          throw new Error('serializationOptions.includeShadowTree other than "none" is not supported');
        }
        __privateSet(this, _channel, channel);
        __privateSet(this, _eventManager, eventManager);
        __privateSet(this, _realm, realm);
        __privateSet(this, _channelHandle, channelHandle);
        __privateSet(this, _sendMessageHandle, sendMessageHandle);
      }
      static async init(channel, eventManager, realm) {
        var _a, _b;
        const channelHandle = await __privateMethod(_a = _ChannelProxy, _createHandle, createHandle_fn).call(_a, realm);
        const sendMessageHandle = await __privateMethod(_b = _ChannelProxy, _createSendMessageHandle, createSendMessageHandle_fn).call(_b, realm, channelHandle);
        const channelProxy = new _ChannelProxy(channelHandle, sendMessageHandle, channel, eventManager, realm);
        void channelProxy.initChannelListener();
        return channelProxy;
      }
      get sendMessageHandle() {
        return __privateGet(this, _sendMessageHandle);
      }
      async initChannelListener() {
        var _a, _b;
        for (; ; ) {
          const message = await __privateGet(this, _realm).cdpClient.sendCommand("Runtime.callFunctionOn", {
            functionDeclaration: String(async (channelHandle) => channelHandle.getMessage()),
            arguments: [
              {
                objectId: __privateGet(this, _channelHandle)
              }
            ],
            awaitPromise: true,
            executionContextId: __privateGet(this, _realm).executionContextId,
            serializationOptions: {
              serialization: "deep",
              ...((_a = __privateGet(this, _channel).serializationOptions) == null ? void 0 : _a.maxObjectDepth) === void 0 || __privateGet(this, _channel).serializationOptions.maxObjectDepth === null ? {} : { maxDepth: __privateGet(this, _channel).serializationOptions.maxObjectDepth }
            }
          });
          __privateGet(this, _eventManager).registerEvent({
            method: protocol_js_1.Script.EventNames.MessageEvent,
            params: {
              channel: __privateGet(this, _channel).channel,
              data: __privateGet(this, _realm).cdpToBidiValue(message, (_b = __privateGet(this, _channel).ownership) != null ? _b : "none"),
              source: {
                realm: __privateGet(this, _realm).realmId,
                context: __privateGet(this, _realm).browsingContextId
              }
            }
          }, __privateGet(this, _realm).browsingContextId);
        }
      }
    };
    var ChannelProxy = _ChannelProxy;
    _channel = new WeakMap();
    _eventManager = new WeakMap();
    _realm = new WeakMap();
    _channelHandle = new WeakMap();
    _sendMessageHandle = new WeakMap();
    _createHandle = new WeakSet();
    createHandle_fn = async function(realm) {
      const createChannelHandleResult = await realm.cdpClient.sendCommand("Runtime.callFunctionOn", {
        functionDeclaration: String(() => {
          const queue = [];
          let queueNonEmptyResolver = null;
          return {
            async getMessage() {
              const onMessage = queue.length > 0 ? Promise.resolve() : new Promise((resolve) => {
                queueNonEmptyResolver = resolve;
              });
              await onMessage;
              return queue.shift();
            },
            sendMessage(message) {
              queue.push(message);
              if (queueNonEmptyResolver !== null) {
                queueNonEmptyResolver();
                queueNonEmptyResolver = null;
              }
            }
          };
        }),
        executionContextId: realm.executionContextId,
        serializationOptions: {
          serialization: "idOnly"
        }
      });
      if (createChannelHandleResult.exceptionDetails) {
        throw new Error(`Failed to create channel handle: ${createChannelHandleResult.exceptionDetails}`);
      }
      return createChannelHandleResult.result.objectId;
    };
    _createSendMessageHandle = new WeakSet();
    createSendMessageHandle_fn = async function(realm, channelHandle) {
      const sendMessageArgResult = await realm.cdpClient.sendCommand("Runtime.callFunctionOn", {
        functionDeclaration: String((channelHandle2) => {
          return channelHandle2.sendMessage;
        }),
        arguments: [{ objectId: channelHandle }],
        executionContextId: realm.executionContextId,
        serializationOptions: {
          serialization: "idOnly"
        }
      });
      return sendMessageArgResult.result.objectId;
    };
    __privateAdd(ChannelProxy, _createHandle);
    __privateAdd(ChannelProxy, _createSendMessageHandle);
    exports.ChannelProxy = ChannelProxy;
  }
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/script/scriptEvaluator.js
var require_scriptEvaluator = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/script/scriptEvaluator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ScriptEvaluator = exports.SHARED_ID_DIVIDER = void 0;
    var protocol_js_1 = require_protocol();
    var channelProxy_js_1 = require_channelProxy();
    var CALL_FUNCTION_STACKTRACE_LINE_OFFSET = 1;
    var EVALUATE_STACKTRACE_LINE_OFFSET = 0;
    exports.SHARED_ID_DIVIDER = "_element_";
    var _eventManager, _cdpRemoteObjectToCallArgument, cdpRemoteObjectToCallArgument_fn, _deserializeToCdpArg, deserializeToCdpArg_fn, _flattenKeyValuePairs, flattenKeyValuePairs_fn, _flattenValueList, flattenValueList_fn, _serializeCdpExceptionDetails, serializeCdpExceptionDetails_fn;
    var _ScriptEvaluator = class {
      constructor(eventManager) {
        __privateAdd(this, _deserializeToCdpArg);
        __privateAdd(this, _flattenKeyValuePairs);
        __privateAdd(this, _flattenValueList);
        __privateAdd(this, _serializeCdpExceptionDetails);
        __privateAdd(this, _eventManager, void 0);
        __privateSet(this, _eventManager, eventManager);
      }
      static async stringifyObject(cdpObject, realm) {
        const stringifyResult = await realm.cdpClient.sendCommand("Runtime.callFunctionOn", {
          functionDeclaration: String((obj) => {
            return String(obj);
          }),
          awaitPromise: false,
          arguments: [cdpObject],
          returnByValue: true,
          executionContextId: realm.executionContextId
        });
        return stringifyResult.result.value;
      }
      async serializeCdpObject(cdpRemoteObject, resultOwnership, realm) {
        var _a;
        const arg = __privateMethod(_a = _ScriptEvaluator, _cdpRemoteObjectToCallArgument, cdpRemoteObjectToCallArgument_fn).call(_a, cdpRemoteObject);
        const cdpWebDriverValue = await realm.cdpClient.sendCommand("Runtime.callFunctionOn", {
          functionDeclaration: String((obj) => obj),
          awaitPromise: false,
          arguments: [arg],
          serializationOptions: {
            serialization: "deep"
          },
          executionContextId: realm.executionContextId
        });
        return realm.cdpToBidiValue(cdpWebDriverValue, resultOwnership);
      }
      async scriptEvaluate(realm, expression, awaitPromise, resultOwnership, serializationOptions) {
        if (![0, null, void 0].includes(serializationOptions.maxDomDepth))
          throw new Error("serializationOptions.maxDomDepth other than 0 or null is not supported");
        const cdpEvaluateResult = await realm.cdpClient.sendCommand("Runtime.evaluate", {
          contextId: realm.executionContextId,
          expression,
          awaitPromise,
          serializationOptions: {
            serialization: "deep",
            ...serializationOptions.maxObjectDepth === void 0 || serializationOptions.maxObjectDepth === null ? {} : { maxDepth: serializationOptions.maxObjectDepth }
          }
        });
        if (cdpEvaluateResult.exceptionDetails) {
          return {
            exceptionDetails: await __privateMethod(this, _serializeCdpExceptionDetails, serializeCdpExceptionDetails_fn).call(this, cdpEvaluateResult.exceptionDetails, EVALUATE_STACKTRACE_LINE_OFFSET, resultOwnership, realm),
            type: "exception",
            realm: realm.realmId
          };
        }
        return {
          type: "success",
          result: realm.cdpToBidiValue(cdpEvaluateResult, resultOwnership),
          realm: realm.realmId
        };
      }
      async callFunction(realm, functionDeclaration, _this, _arguments, awaitPromise, resultOwnership, serializationOptions) {
        if (![0, null, void 0].includes(serializationOptions.maxDomDepth))
          throw new Error("serializationOptions.maxDomDepth other than 0 or null is not supported");
        const callFunctionAndSerializeScript = `(...args)=>{ return _callFunction((
${functionDeclaration}
), args);
      function _callFunction(f, args) {
        const deserializedThis = args.shift();
        const deserializedArgs = args;
        return f.apply(deserializedThis, deserializedArgs);
      }}`;
        const thisAndArgumentsList = [
          await __privateMethod(this, _deserializeToCdpArg, deserializeToCdpArg_fn).call(this, _this, realm)
        ];
        thisAndArgumentsList.push(...await Promise.all(_arguments.map(async (a) => {
          return __privateMethod(this, _deserializeToCdpArg, deserializeToCdpArg_fn).call(this, a, realm);
        })));
        let cdpCallFunctionResult;
        try {
          cdpCallFunctionResult = await realm.cdpClient.sendCommand("Runtime.callFunctionOn", {
            functionDeclaration: callFunctionAndSerializeScript,
            awaitPromise,
            arguments: thisAndArgumentsList,
            serializationOptions: {
              serialization: "deep",
              ...serializationOptions.maxObjectDepth === void 0 || serializationOptions.maxObjectDepth === null ? {} : { maxDepth: serializationOptions.maxObjectDepth }
            },
            executionContextId: realm.executionContextId
          });
        } catch (e) {
          if (e.code === -32e3 && [
            "Could not find object with given id",
            "Argument should belong to the same JavaScript world as target object",
            "Invalid remote object id"
          ].includes(e.message)) {
            throw new protocol_js_1.Message.NoSuchHandleException("Handle was not found.");
          }
          throw e;
        }
        if (cdpCallFunctionResult.exceptionDetails) {
          return {
            exceptionDetails: await __privateMethod(this, _serializeCdpExceptionDetails, serializeCdpExceptionDetails_fn).call(this, cdpCallFunctionResult.exceptionDetails, CALL_FUNCTION_STACKTRACE_LINE_OFFSET, resultOwnership, realm),
            type: "exception",
            realm: realm.realmId
          };
        }
        return {
          type: "success",
          result: realm.cdpToBidiValue(cdpCallFunctionResult, resultOwnership),
          realm: realm.realmId
        };
      }
    };
    var ScriptEvaluator = _ScriptEvaluator;
    _eventManager = new WeakMap();
    _cdpRemoteObjectToCallArgument = new WeakSet();
    cdpRemoteObjectToCallArgument_fn = function(cdpRemoteObject) {
      if (cdpRemoteObject.objectId !== void 0) {
        return { objectId: cdpRemoteObject.objectId };
      }
      if (cdpRemoteObject.unserializableValue !== void 0) {
        return { unserializableValue: cdpRemoteObject.unserializableValue };
      }
      return { value: cdpRemoteObject.value };
    };
    _deserializeToCdpArg = new WeakSet();
    deserializeToCdpArg_fn = async function(argumentValue, realm) {
      if ("sharedId" in argumentValue) {
        const [navigableId, rawBackendNodeId] = argumentValue.sharedId.split(exports.SHARED_ID_DIVIDER);
        const backendNodeId = parseInt(rawBackendNodeId != null ? rawBackendNodeId : "");
        if (isNaN(backendNodeId) || backendNodeId === void 0 || navigableId === void 0) {
          throw new protocol_js_1.Message.NoSuchNodeException(`SharedId "${argumentValue.sharedId}" was not found.`);
        }
        if (realm.navigableId !== navigableId) {
          throw new protocol_js_1.Message.NoSuchNodeException(`SharedId "${argumentValue.sharedId}" belongs to different document. Current document is ${realm.navigableId}.`);
        }
        try {
          const obj = await realm.cdpClient.sendCommand("DOM.resolveNode", {
            backendNodeId,
            executionContextId: realm.executionContextId
          });
          return { objectId: obj.object.objectId };
        } catch (e) {
          if (e.code === -32e3 && e.message === "No node with given id found") {
            throw new protocol_js_1.Message.NoSuchNodeException(`SharedId "${argumentValue.sharedId}" was not found.`);
          }
          throw e;
        }
      }
      if ("handle" in argumentValue) {
        return { objectId: argumentValue.handle };
      }
      switch (argumentValue.type) {
        case "undefined":
          return { unserializableValue: "undefined" };
        case "null":
          return { unserializableValue: "null" };
        case "string":
          return { value: argumentValue.value };
        case "number":
          if (argumentValue.value === "NaN") {
            return { unserializableValue: "NaN" };
          } else if (argumentValue.value === "-0") {
            return { unserializableValue: "-0" };
          } else if (argumentValue.value === "Infinity") {
            return { unserializableValue: "Infinity" };
          } else if (argumentValue.value === "-Infinity") {
            return { unserializableValue: "-Infinity" };
          }
          return {
            value: argumentValue.value
          };
        case "boolean":
          return { value: Boolean(argumentValue.value) };
        case "bigint":
          return {
            unserializableValue: `BigInt(${JSON.stringify(argumentValue.value)})`
          };
        case "date":
          return {
            unserializableValue: `new Date(Date.parse(${JSON.stringify(argumentValue.value)}))`
          };
        case "regexp":
          return {
            unserializableValue: `new RegExp(${JSON.stringify(argumentValue.value.pattern)}, ${JSON.stringify(argumentValue.value.flags)})`
          };
        case "map": {
          const keyValueArray = await __privateMethod(this, _flattenKeyValuePairs, flattenKeyValuePairs_fn).call(this, argumentValue.value, realm);
          const argEvalResult = await realm.cdpClient.sendCommand("Runtime.callFunctionOn", {
            functionDeclaration: String((...args) => {
              const result = /* @__PURE__ */ new Map();
              for (let i = 0; i < args.length; i += 2) {
                result.set(args[i], args[i + 1]);
              }
              return result;
            }),
            awaitPromise: false,
            arguments: keyValueArray,
            returnByValue: false,
            executionContextId: realm.executionContextId
          });
          return { objectId: argEvalResult.result.objectId };
        }
        case "object": {
          const keyValueArray = await __privateMethod(this, _flattenKeyValuePairs, flattenKeyValuePairs_fn).call(this, argumentValue.value, realm);
          const argEvalResult = await realm.cdpClient.sendCommand("Runtime.callFunctionOn", {
            functionDeclaration: String((...args) => {
              const result = {};
              for (let i = 0; i < args.length; i += 2) {
                const key = args[i];
                result[key] = args[i + 1];
              }
              return result;
            }),
            awaitPromise: false,
            arguments: keyValueArray,
            returnByValue: false,
            executionContextId: realm.executionContextId
          });
          return { objectId: argEvalResult.result.objectId };
        }
        case "array": {
          const args = await __privateMethod(this, _flattenValueList, flattenValueList_fn).call(this, argumentValue.value, realm);
          const argEvalResult = await realm.cdpClient.sendCommand("Runtime.callFunctionOn", {
            functionDeclaration: String((...args2) => {
              return args2;
            }),
            awaitPromise: false,
            arguments: args,
            returnByValue: false,
            executionContextId: realm.executionContextId
          });
          return { objectId: argEvalResult.result.objectId };
        }
        case "set": {
          const args = await __privateMethod(this, _flattenValueList, flattenValueList_fn).call(this, argumentValue.value, realm);
          const argEvalResult = await realm.cdpClient.sendCommand("Runtime.callFunctionOn", {
            functionDeclaration: String((...args2) => {
              return new Set(args2);
            }),
            awaitPromise: false,
            arguments: args,
            returnByValue: false,
            executionContextId: realm.executionContextId
          });
          return { objectId: argEvalResult.result.objectId };
        }
        case "channel": {
          const channel = await channelProxy_js_1.ChannelProxy.init(argumentValue.value, __privateGet(this, _eventManager), realm);
          return { objectId: channel.sendMessageHandle };
        }
        default:
          throw new Error(`Value ${JSON.stringify(argumentValue)} is not deserializable.`);
      }
    };
    _flattenKeyValuePairs = new WeakSet();
    flattenKeyValuePairs_fn = async function(mapping, realm) {
      const keyValueArray = [];
      for (const [key, value] of mapping) {
        let keyArg;
        if (typeof key === "string") {
          keyArg = { value: key };
        } else {
          keyArg = await __privateMethod(this, _deserializeToCdpArg, deserializeToCdpArg_fn).call(this, key, realm);
        }
        const valueArg = await __privateMethod(this, _deserializeToCdpArg, deserializeToCdpArg_fn).call(this, value, realm);
        keyValueArray.push(keyArg);
        keyValueArray.push(valueArg);
      }
      return keyValueArray;
    };
    _flattenValueList = new WeakSet();
    flattenValueList_fn = async function(list, realm) {
      return Promise.all(list.map((value) => __privateMethod(this, _deserializeToCdpArg, deserializeToCdpArg_fn).call(this, value, realm)));
    };
    _serializeCdpExceptionDetails = new WeakSet();
    serializeCdpExceptionDetails_fn = async function(cdpExceptionDetails, lineOffset, resultOwnership, realm) {
      var _a;
      const callFrames = (_a = cdpExceptionDetails.stackTrace) == null ? void 0 : _a.callFrames.map((frame) => ({
        url: frame.url,
        functionName: frame.functionName,
        lineNumber: frame.lineNumber - lineOffset,
        columnNumber: frame.columnNumber
      }));
      const exception = await this.serializeCdpObject(
        cdpExceptionDetails.exception,
        resultOwnership,
        realm
      );
      const text = await _ScriptEvaluator.stringifyObject(cdpExceptionDetails.exception, realm);
      return {
        exception,
        columnNumber: cdpExceptionDetails.columnNumber,
        lineNumber: cdpExceptionDetails.lineNumber - lineOffset,
        stackTrace: {
          callFrames: callFrames != null ? callFrames : []
        },
        text: text || cdpExceptionDetails.text
      };
    };
    __privateAdd(ScriptEvaluator, _cdpRemoteObjectToCallArgument);
    exports.ScriptEvaluator = ScriptEvaluator;
  }
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/script/realm.js
var require_realm = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/script/realm.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Realm = void 0;
    var log_js_1 = require_log();
    var scriptEvaluator_js_1 = require_scriptEvaluator();
    var _realmStorage, _browsingContextStorage, _realmId, _browsingContextId, _executionContextId, _origin, _type, _cdpClient, _eventManager, _scriptEvaluator, _logger, _releaseObject, releaseObject_fn;
    var Realm2 = class {
      constructor(realmStorage, browsingContextStorage, realmId, browsingContextId, executionContextId, origin, type, sandbox, cdpSessionId, cdpClient, eventManager, logger) {
        __privateAdd(this, _releaseObject);
        __privateAdd(this, _realmStorage, void 0);
        __privateAdd(this, _browsingContextStorage, void 0);
        __privateAdd(this, _realmId, void 0);
        __privateAdd(this, _browsingContextId, void 0);
        __privateAdd(this, _executionContextId, void 0);
        __privateAdd(this, _origin, void 0);
        __privateAdd(this, _type, void 0);
        __privateAdd(this, _cdpClient, void 0);
        __privateAdd(this, _eventManager, void 0);
        __privateAdd(this, _scriptEvaluator, void 0);
        __publicField(this, "sandbox");
        __publicField(this, "cdpSessionId");
        __privateAdd(this, _logger, void 0);
        __privateSet(this, _realmId, realmId);
        __privateSet(this, _browsingContextId, browsingContextId);
        __privateSet(this, _executionContextId, executionContextId);
        this.sandbox = sandbox;
        __privateSet(this, _origin, origin);
        __privateSet(this, _type, type);
        this.cdpSessionId = cdpSessionId;
        __privateSet(this, _cdpClient, cdpClient);
        __privateSet(this, _realmStorage, realmStorage);
        __privateSet(this, _browsingContextStorage, browsingContextStorage);
        __privateSet(this, _eventManager, eventManager);
        __privateSet(this, _scriptEvaluator, new scriptEvaluator_js_1.ScriptEvaluator(__privateGet(this, _eventManager)));
        __privateGet(this, _realmStorage).realmMap.set(__privateGet(this, _realmId), this);
        __privateSet(this, _logger, logger);
      }
      async disown(handle) {
        if (__privateGet(this, _realmStorage).knownHandlesToRealm.get(handle) !== this.realmId) {
          return;
        }
        await __privateMethod(this, _releaseObject, releaseObject_fn).call(this, handle);
        __privateGet(this, _realmStorage).knownHandlesToRealm.delete(handle);
      }
      cdpToBidiValue(cdpValue, resultOwnership) {
        const deepSerializedValue = cdpValue.result.deepSerializedValue;
        const bidiValue = this.deepSerializedToBiDi(deepSerializedValue);
        if (cdpValue.result.objectId) {
          const objectId = cdpValue.result.objectId;
          if (resultOwnership === "root") {
            bidiValue.handle = objectId;
            __privateGet(this, _realmStorage).knownHandlesToRealm.set(objectId, this.realmId);
          } else {
            void __privateMethod(this, _releaseObject, releaseObject_fn).call(this, objectId).catch((error) => {
              var _a;
              return (_a = __privateGet(this, _logger)) == null ? void 0 : _a.call(this, log_js_1.LogType.system, error);
            });
          }
        }
        return bidiValue;
      }
      deepSerializedToBiDi(webDriverValue) {
        const result = webDriverValue;
        if (Object.hasOwn(result, "weakLocalObjectReference")) {
          result.internalId = `${result.weakLocalObjectReference}`;
          delete result["weakLocalObjectReference"];
        }
        if (result.type === "platformobject") {
          return { type: "object" };
        }
        const bidiValue = result.value;
        if (bidiValue === void 0) {
          return result;
        }
        if (result.type === "node") {
          if (Object.hasOwn(bidiValue, "backendNodeId")) {
            result.sharedId = `${this.navigableId}${scriptEvaluator_js_1.SHARED_ID_DIVIDER}${bidiValue.backendNodeId}`;
            delete bidiValue["backendNodeId"];
          }
          if (Object.hasOwn(bidiValue, "children")) {
            for (const i in bidiValue.children) {
              bidiValue.children[i] = this.deepSerializedToBiDi(bidiValue.children[i]);
            }
          }
        }
        if (["array", "set"].includes(webDriverValue.type)) {
          for (const i in bidiValue) {
            bidiValue[i] = this.deepSerializedToBiDi(bidiValue[i]);
          }
        }
        if (["object", "map"].includes(webDriverValue.type)) {
          for (const i in bidiValue) {
            bidiValue[i] = [
              this.deepSerializedToBiDi(bidiValue[i][0]),
              this.deepSerializedToBiDi(bidiValue[i][1])
            ];
          }
        }
        return result;
      }
      toBiDi() {
        return {
          realm: this.realmId,
          origin: this.origin,
          type: this.type,
          context: this.browsingContextId,
          ...this.sandbox === void 0 ? {} : { sandbox: this.sandbox }
        };
      }
      get realmId() {
        return __privateGet(this, _realmId);
      }
      get navigableId() {
        var _a, _b;
        return (_b = (_a = __privateGet(this, _browsingContextStorage).findContext(__privateGet(this, _browsingContextId))) == null ? void 0 : _a.navigableId) != null ? _b : "UNKNOWN";
      }
      get browsingContextId() {
        return __privateGet(this, _browsingContextId);
      }
      get executionContextId() {
        return __privateGet(this, _executionContextId);
      }
      get origin() {
        return __privateGet(this, _origin);
      }
      get type() {
        return __privateGet(this, _type);
      }
      get cdpClient() {
        return __privateGet(this, _cdpClient);
      }
      async callFunction(functionDeclaration, _this, _arguments, awaitPromise, resultOwnership, serializationOptions) {
        const context = __privateGet(this, _browsingContextStorage).getContext(this.browsingContextId);
        await context.awaitUnblocked();
        return {
          result: await __privateGet(this, _scriptEvaluator).callFunction(this, functionDeclaration, _this, _arguments, awaitPromise, resultOwnership, serializationOptions)
        };
      }
      async scriptEvaluate(expression, awaitPromise, resultOwnership, serializationOptions) {
        const context = __privateGet(this, _browsingContextStorage).getContext(this.browsingContextId);
        await context.awaitUnblocked();
        return {
          result: await __privateGet(this, _scriptEvaluator).scriptEvaluate(this, expression, awaitPromise, resultOwnership, serializationOptions)
        };
      }
      async serializeCdpObject(cdpObject, resultOwnership) {
        return __privateGet(this, _scriptEvaluator).serializeCdpObject(cdpObject, resultOwnership, this);
      }
      async stringifyObject(cdpObject) {
        return scriptEvaluator_js_1.ScriptEvaluator.stringifyObject(cdpObject, this);
      }
    };
    _realmStorage = new WeakMap();
    _browsingContextStorage = new WeakMap();
    _realmId = new WeakMap();
    _browsingContextId = new WeakMap();
    _executionContextId = new WeakMap();
    _origin = new WeakMap();
    _type = new WeakMap();
    _cdpClient = new WeakMap();
    _eventManager = new WeakMap();
    _scriptEvaluator = new WeakMap();
    _logger = new WeakMap();
    _releaseObject = new WeakSet();
    releaseObject_fn = async function(handle) {
      try {
        await this.cdpClient.sendCommand("Runtime.releaseObject", {
          objectId: handle
        });
      } catch (e) {
        if (!(e.code === -32e3 && e.message === "Invalid remote object id")) {
          throw e;
        }
      }
    };
    exports.Realm = Realm2;
  }
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/context/browsingContextImpl.js
var require_browsingContextImpl = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/context/browsingContextImpl.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BrowsingContextImpl = void 0;
    var unitConversions_js_1 = require_unitConversions();
    var protocol_js_1 = require_protocol();
    var log_js_1 = require_log();
    var deferred_js_1 = require_deferred();
    var realm_js_1 = require_realm();
    var _id, _parentId, _children, _browsingContextStorage, _deferreds, _url, _eventManager, _realmStorage, _loaderId, _cdpTarget, _maybeDefaultRealm, _logger, _deleteAllChildren, deleteAllChildren_fn, _defaultRealm, defaultRealm_get, _initListeners, initListeners_fn, _getOrigin, getOrigin_fn, _documentChanged, documentChanged_fn, _resetDeferredsIfFinished, resetDeferredsIfFinished_fn;
    var _BrowsingContextImpl = class {
      constructor(cdpTarget, realmStorage, id, parentId, eventManager, browsingContextStorage, logger) {
        __privateAdd(this, _deleteAllChildren);
        __privateAdd(this, _defaultRealm);
        __privateAdd(this, _initListeners);
        __privateAdd(this, _getOrigin);
        __privateAdd(this, _documentChanged);
        __privateAdd(this, _resetDeferredsIfFinished);
        __privateAdd(this, _id, void 0);
        __privateAdd(this, _parentId, void 0);
        __privateAdd(this, _children, /* @__PURE__ */ new Set());
        __privateAdd(this, _browsingContextStorage, void 0);
        __privateAdd(this, _deferreds, {
          documentInitialized: new deferred_js_1.Deferred(),
          Page: {
            navigatedWithinDocument: new deferred_js_1.Deferred(),
            lifecycleEvent: {
              DOMContentLoaded: new deferred_js_1.Deferred(),
              load: new deferred_js_1.Deferred()
            }
          }
        });
        __privateAdd(this, _url, "about:blank");
        __privateAdd(this, _eventManager, void 0);
        __privateAdd(this, _realmStorage, void 0);
        __privateAdd(this, _loaderId, void 0);
        __privateAdd(this, _cdpTarget, void 0);
        __privateAdd(this, _maybeDefaultRealm, void 0);
        __privateAdd(this, _logger, void 0);
        __privateSet(this, _cdpTarget, cdpTarget);
        __privateSet(this, _realmStorage, realmStorage);
        __privateSet(this, _id, id);
        __privateSet(this, _parentId, parentId);
        __privateSet(this, _eventManager, eventManager);
        __privateSet(this, _browsingContextStorage, browsingContextStorage);
        __privateSet(this, _logger, logger);
      }
      static create(cdpTarget, realmStorage, id, parentId, eventManager, browsingContextStorage, logger) {
        var _a;
        const context = new _BrowsingContextImpl(cdpTarget, realmStorage, id, parentId, eventManager, browsingContextStorage, logger);
        __privateMethod(_a = context, _initListeners, initListeners_fn).call(_a);
        browsingContextStorage.addContext(context);
        if (!context.isTopLevelContext()) {
          context.parent.addChild(context.id);
        }
        eventManager.registerEvent({
          method: protocol_js_1.BrowsingContext.EventNames.ContextCreatedEvent,
          params: context.serializeToBidiValue()
        }, context.id);
        return context;
      }
      get navigableId() {
        return __privateGet(this, _loaderId);
      }
      delete() {
        __privateMethod(this, _deleteAllChildren, deleteAllChildren_fn).call(this);
        __privateGet(this, _realmStorage).deleteRealms({
          browsingContextId: this.id
        });
        if (!this.isTopLevelContext()) {
          __privateGet(this.parent, _children).delete(this.id);
        }
        __privateGet(this, _eventManager).registerEvent({
          method: protocol_js_1.BrowsingContext.EventNames.ContextDestroyedEvent,
          params: this.serializeToBidiValue()
        }, this.id);
        __privateGet(this, _browsingContextStorage).deleteContextById(this.id);
      }
      get id() {
        return __privateGet(this, _id);
      }
      get parentId() {
        return __privateGet(this, _parentId);
      }
      get parent() {
        if (this.parentId === null) {
          return null;
        }
        return __privateGet(this, _browsingContextStorage).getContext(this.parentId);
      }
      get directChildren() {
        return [...__privateGet(this, _children)].map((id) => __privateGet(this, _browsingContextStorage).getContext(id));
      }
      get allChildren() {
        const children = this.directChildren;
        return children.concat(...children.map((child) => child.allChildren));
      }
      isTopLevelContext() {
        return __privateGet(this, _parentId) === null;
      }
      get top() {
        let topContext = this;
        let parent = topContext.parent;
        while (parent) {
          topContext = parent;
          parent = topContext.parent;
        }
        return topContext;
      }
      addChild(childId) {
        __privateGet(this, _children).add(childId);
      }
      get cdpTarget() {
        return __privateGet(this, _cdpTarget);
      }
      updateCdpTarget(cdpTarget) {
        __privateSet(this, _cdpTarget, cdpTarget);
        __privateMethod(this, _initListeners, initListeners_fn).call(this);
      }
      get url() {
        return __privateGet(this, _url);
      }
      async awaitLoaded() {
        await __privateGet(this, _deferreds).Page.lifecycleEvent.load;
      }
      awaitUnblocked() {
        return __privateGet(this, _cdpTarget).targetUnblocked;
      }
      async getOrCreateSandbox(sandbox) {
        if (sandbox === void 0 || sandbox === "") {
          return __privateGet(this, _defaultRealm, defaultRealm_get);
        }
        let maybeSandboxes = __privateGet(this, _realmStorage).findRealms({
          browsingContextId: this.id,
          sandbox
        });
        if (maybeSandboxes.length === 0) {
          await __privateGet(this, _cdpTarget).cdpClient.sendCommand("Page.createIsolatedWorld", {
            frameId: this.id,
            worldName: sandbox
          });
          maybeSandboxes = __privateGet(this, _realmStorage).findRealms({
            browsingContextId: this.id,
            sandbox
          });
        }
        if (maybeSandboxes.length !== 1) {
          throw Error(`Sandbox ${sandbox} wasn't created.`);
        }
        return maybeSandboxes[0];
      }
      serializeToBidiValue(maxDepth = 0, addParentField = true) {
        return {
          context: __privateGet(this, _id),
          url: this.url,
          children: maxDepth > 0 ? this.directChildren.map((c) => c.serializeToBidiValue(maxDepth - 1, false)) : null,
          ...addParentField ? { parent: __privateGet(this, _parentId) } : {}
        };
      }
      async navigate(url, wait) {
        var _a;
        await this.awaitUnblocked();
        const cdpNavigateResult = await __privateGet(this, _cdpTarget).cdpClient.sendCommand("Page.navigate", {
          url,
          frameId: this.id
        });
        if (cdpNavigateResult.errorText) {
          throw new protocol_js_1.Message.UnknownErrorException(cdpNavigateResult.errorText);
        }
        __privateMethod(this, _documentChanged, documentChanged_fn).call(this, cdpNavigateResult.loaderId);
        switch (wait) {
          case "none":
            break;
          case "interactive":
            if (cdpNavigateResult.loaderId === void 0) {
              await __privateGet(this, _deferreds).Page.navigatedWithinDocument;
            } else {
              await __privateGet(this, _deferreds).Page.lifecycleEvent.DOMContentLoaded;
            }
            break;
          case "complete":
            if (cdpNavigateResult.loaderId === void 0) {
              await __privateGet(this, _deferreds).Page.navigatedWithinDocument;
            } else {
              await this.awaitLoaded();
            }
            break;
        }
        return {
          result: {
            navigation: (_a = cdpNavigateResult.loaderId) != null ? _a : null,
            url
          }
        };
      }
      async reload(ignoreCache, wait) {
        await this.awaitUnblocked();
        await __privateGet(this, _cdpTarget).cdpClient.sendCommand("Page.reload", {
          ignoreCache
        });
        __privateMethod(this, _resetDeferredsIfFinished, resetDeferredsIfFinished_fn).call(this);
        switch (wait) {
          case "none":
            break;
          case "interactive":
            await __privateGet(this, _deferreds).Page.lifecycleEvent.DOMContentLoaded;
            break;
          case "complete":
            await this.awaitLoaded();
            break;
        }
        return { result: {} };
      }
      async captureScreenshot() {
        await __privateGet(this, _cdpTarget).cdpClient.sendCommand("Page.bringToFront");
        let clip;
        if (this.isTopLevelContext()) {
          const { cssContentSize, cssLayoutViewport } = await __privateGet(this, _cdpTarget).cdpClient.sendCommand("Page.getLayoutMetrics");
          clip = {
            x: cssContentSize.x,
            y: cssContentSize.y,
            width: cssLayoutViewport.clientWidth,
            height: cssLayoutViewport.clientHeight
          };
        } else {
          const { result: { value: iframeDocRect } } = await __privateGet(this, _cdpTarget).cdpClient.sendCommand("Runtime.callFunctionOn", {
            functionDeclaration: String(() => {
              const docRect = globalThis.document.documentElement.getBoundingClientRect();
              return JSON.stringify({
                x: docRect.x,
                y: docRect.y,
                width: docRect.width,
                height: docRect.height
              });
            }),
            executionContextId: __privateGet(this, _defaultRealm, defaultRealm_get).executionContextId
          });
          clip = JSON.parse(iframeDocRect);
        }
        const result = await __privateGet(this, _cdpTarget).cdpClient.sendCommand("Page.captureScreenshot", {
          clip: {
            ...clip,
            scale: 1
          }
        });
        return {
          result: {
            data: result.data
          }
        };
      }
      async print(params) {
        var _a, _b, _c, _d, _e, _f;
        const cdpParams = {};
        if (params.background !== void 0) {
          cdpParams.printBackground = params.background;
        }
        if (((_a = params.margin) == null ? void 0 : _a.bottom) !== void 0) {
          cdpParams.marginBottom = (0, unitConversions_js_1.inchesFromCm)(params.margin.bottom);
        }
        if (((_b = params.margin) == null ? void 0 : _b.left) !== void 0) {
          cdpParams.marginLeft = (0, unitConversions_js_1.inchesFromCm)(params.margin.left);
        }
        if (((_c = params.margin) == null ? void 0 : _c.right) !== void 0) {
          cdpParams.marginRight = (0, unitConversions_js_1.inchesFromCm)(params.margin.right);
        }
        if (((_d = params.margin) == null ? void 0 : _d.top) !== void 0) {
          cdpParams.marginTop = (0, unitConversions_js_1.inchesFromCm)(params.margin.top);
        }
        if (params.orientation !== void 0) {
          cdpParams.landscape = params.orientation === "landscape";
        }
        if (((_e = params.page) == null ? void 0 : _e.height) !== void 0) {
          cdpParams.paperHeight = (0, unitConversions_js_1.inchesFromCm)(params.page.height);
        }
        if (((_f = params.page) == null ? void 0 : _f.width) !== void 0) {
          cdpParams.paperWidth = (0, unitConversions_js_1.inchesFromCm)(params.page.width);
        }
        if (params.pageRanges !== void 0) {
          cdpParams.pageRanges = params.pageRanges.join(",");
        }
        if (params.scale !== void 0) {
          cdpParams.scale = params.scale;
        }
        if (params.shrinkToFit !== void 0) {
          cdpParams.preferCSSPageSize = !params.shrinkToFit;
        }
        const result = await __privateGet(this, _cdpTarget).cdpClient.sendCommand("Page.printToPDF", cdpParams);
        return {
          result: {
            data: result.data
          }
        };
      }
    };
    var BrowsingContextImpl = _BrowsingContextImpl;
    _id = new WeakMap();
    _parentId = new WeakMap();
    _children = new WeakMap();
    _browsingContextStorage = new WeakMap();
    _deferreds = new WeakMap();
    _url = new WeakMap();
    _eventManager = new WeakMap();
    _realmStorage = new WeakMap();
    _loaderId = new WeakMap();
    _cdpTarget = new WeakMap();
    _maybeDefaultRealm = new WeakMap();
    _logger = new WeakMap();
    _deleteAllChildren = new WeakSet();
    deleteAllChildren_fn = function() {
      this.directChildren.map((child) => child.delete());
    };
    _defaultRealm = new WeakSet();
    defaultRealm_get = function() {
      if (__privateGet(this, _maybeDefaultRealm) === void 0) {
        throw new Error(`No default realm for browsing context ${__privateGet(this, _id)}`);
      }
      return __privateGet(this, _maybeDefaultRealm);
    };
    _initListeners = new WeakSet();
    initListeners_fn = function() {
      __privateGet(this, _cdpTarget).cdpClient.on("Target.targetInfoChanged", (params) => {
        if (this.id !== params.targetInfo.targetId) {
          return;
        }
        __privateSet(this, _url, params.targetInfo.url);
      });
      __privateGet(this, _cdpTarget).cdpClient.on("Page.frameNavigated", (params) => {
        var _a;
        if (this.id !== params.frame.id) {
          return;
        }
        __privateSet(this, _url, params.frame.url + ((_a = params.frame.urlFragment) != null ? _a : ""));
        __privateMethod(this, _deleteAllChildren, deleteAllChildren_fn).call(this);
      });
      __privateGet(this, _cdpTarget).cdpClient.on("Page.navigatedWithinDocument", (params) => {
        if (this.id !== params.frameId) {
          return;
        }
        __privateSet(this, _url, params.url);
        __privateGet(this, _deferreds).Page.navigatedWithinDocument.resolve(params);
      });
      __privateGet(this, _cdpTarget).cdpClient.on("Page.lifecycleEvent", (params) => {
        var _a, _b;
        if (this.id !== params.frameId) {
          return;
        }
        const timestamp = new Date().getTime();
        switch (params.name) {
          case "init":
            __privateMethod(this, _documentChanged, documentChanged_fn).call(this, params.loaderId);
            __privateGet(this, _deferreds).documentInitialized.resolve();
            break;
          case "commit":
            __privateSet(this, _loaderId, params.loaderId);
            break;
          case "DOMContentLoaded":
            __privateGet(this, _deferreds).Page.lifecycleEvent.DOMContentLoaded.resolve(params);
            __privateGet(this, _eventManager).registerEvent({
              method: protocol_js_1.BrowsingContext.EventNames.DomContentLoadedEvent,
              params: {
                context: this.id,
                navigation: (_a = __privateGet(this, _loaderId)) != null ? _a : null,
                timestamp,
                url: __privateGet(this, _url)
              }
            }, this.id);
            break;
          case "load":
            __privateGet(this, _deferreds).Page.lifecycleEvent.load.resolve(params);
            __privateGet(this, _eventManager).registerEvent({
              method: protocol_js_1.BrowsingContext.EventNames.LoadEvent,
              params: {
                context: this.id,
                navigation: (_b = __privateGet(this, _loaderId)) != null ? _b : null,
                timestamp,
                url: __privateGet(this, _url)
              }
            }, this.id);
            break;
        }
        if (params.loaderId !== __privateGet(this, _loaderId)) {
          return;
        }
      });
      __privateGet(this, _cdpTarget).cdpClient.on("Runtime.executionContextCreated", (params) => {
        if (params.context.auxData.frameId !== this.id) {
          return;
        }
        if (!["default", "isolated"].includes(params.context.auxData.type)) {
          return;
        }
        const realm = new realm_js_1.Realm(
          __privateGet(this, _realmStorage),
          __privateGet(this, _browsingContextStorage),
          params.context.uniqueId,
          this.id,
          params.context.id,
          __privateMethod(this, _getOrigin, getOrigin_fn).call(this, params),
          "window",
          params.context.auxData.type === "isolated" ? params.context.name : void 0,
          __privateGet(this, _cdpTarget).cdpSessionId,
          __privateGet(this, _cdpTarget).cdpClient,
          __privateGet(this, _eventManager),
          __privateGet(this, _logger)
        );
        if (params.context.auxData.isDefault) {
          __privateSet(this, _maybeDefaultRealm, realm);
        }
        __privateGet(this, _eventManager).registerEvent({
          method: protocol_js_1.Script.EventNames.RealmCreated,
          params: realm.toBiDi()
        }, this.id);
      });
      __privateGet(this, _cdpTarget).cdpClient.on("Runtime.executionContextDestroyed", (params) => {
        __privateGet(this, _realmStorage).deleteRealms({
          cdpSessionId: __privateGet(this, _cdpTarget).cdpSessionId,
          executionContextId: params.executionContextId
        });
      });
      __privateGet(this, _cdpTarget).cdpClient.on("Runtime.executionContextsCleared", () => {
        __privateGet(this, _realmStorage).deleteRealms({
          cdpSessionId: __privateGet(this, _cdpTarget).cdpSessionId
        });
      });
    };
    _getOrigin = new WeakSet();
    getOrigin_fn = function(params) {
      if (params.context.auxData.type === "isolated") {
        return __privateGet(this, _defaultRealm, defaultRealm_get).origin;
      }
      return ["://", ""].includes(params.context.origin) ? "null" : params.context.origin;
    };
    _documentChanged = new WeakSet();
    documentChanged_fn = function(loaderId) {
      var _a;
      if (loaderId === void 0 || __privateGet(this, _loaderId) === loaderId) {
        if (__privateGet(this, _deferreds).Page.navigatedWithinDocument.isFinished) {
          __privateGet(this, _deferreds).Page.navigatedWithinDocument = new deferred_js_1.Deferred();
        } else {
          (_a = __privateGet(this, _logger)) == null ? void 0 : _a.call(this, log_js_1.LogType.browsingContexts, "Document changed (navigatedWithinDocument)");
        }
        return;
      }
      __privateMethod(this, _resetDeferredsIfFinished, resetDeferredsIfFinished_fn).call(this);
      __privateSet(this, _loaderId, loaderId);
    };
    _resetDeferredsIfFinished = new WeakSet();
    resetDeferredsIfFinished_fn = function() {
      var _a, _b, _c;
      if (__privateGet(this, _deferreds).documentInitialized.isFinished) {
        __privateGet(this, _deferreds).documentInitialized = new deferred_js_1.Deferred();
      } else {
        (_a = __privateGet(this, _logger)) == null ? void 0 : _a.call(this, log_js_1.LogType.browsingContexts, "Document changed (document initialized)");
      }
      if (__privateGet(this, _deferreds).Page.lifecycleEvent.DOMContentLoaded.isFinished) {
        __privateGet(this, _deferreds).Page.lifecycleEvent.DOMContentLoaded = new deferred_js_1.Deferred();
      } else {
        (_b = __privateGet(this, _logger)) == null ? void 0 : _b.call(this, log_js_1.LogType.browsingContexts, "Document changed (DOMContentLoaded)");
      }
      if (__privateGet(this, _deferreds).Page.lifecycleEvent.load.isFinished) {
        __privateGet(this, _deferreds).Page.lifecycleEvent.load = new deferred_js_1.Deferred();
      } else {
        (_c = __privateGet(this, _logger)) == null ? void 0 : _c.call(this, log_js_1.LogType.browsingContexts, "Document changed (load)");
      }
    };
    exports.BrowsingContextImpl = BrowsingContextImpl;
  }
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/log/logHelper.js
var require_logHelper = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/log/logHelper.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRemoteValuesText = exports.logMessageFormatter = void 0;
    var specifiers = ["%s", "%d", "%i", "%f", "%o", "%O", "%c"];
    function isFormmatSpecifier(str) {
      return specifiers.some((spec) => str.includes(spec));
    }
    function logMessageFormatter(args) {
      let output = "";
      const argFormat = args[0].value.toString();
      const argValues = args.slice(1, void 0);
      const tokens = argFormat.split(new RegExp(specifiers.map((spec) => `(${spec})`).join("|"), "g"));
      for (const token of tokens) {
        if (token === void 0 || token === "") {
          continue;
        }
        if (isFormmatSpecifier(token)) {
          const arg = argValues.shift();
          if (arg === void 0) {
            throw new Error(`Less value is provided: "${getRemoteValuesText(args, false)}"`);
          }
          if (token === "%s") {
            output += stringFromArg(arg);
          } else if (token === "%d" || token === "%i") {
            if (arg.type === "bigint" || arg.type === "number" || arg.type === "string") {
              output += parseInt(arg.value.toString(), 10);
            } else {
              output += "NaN";
            }
          } else if (token === "%f") {
            if (arg.type === "bigint" || arg.type === "number" || arg.type === "string") {
              output += parseFloat(arg.value.toString());
            } else {
              output += "NaN";
            }
          } else {
            output += toJson(arg);
          }
        } else {
          output += token;
        }
      }
      if (argValues.length > 0) {
        throw new Error(`More value is provided: "${getRemoteValuesText(args, false)}"`);
      }
      return output;
    }
    exports.logMessageFormatter = logMessageFormatter;
    function toJson(arg) {
      var _a, _b;
      if (arg.type !== "array" && arg.type !== "bigint" && arg.type !== "date" && arg.type !== "number" && arg.type !== "object" && arg.type !== "string") {
        return stringFromArg(arg);
      }
      if (arg.type === "bigint") {
        return `${arg.value.toString()}n`;
      }
      if (arg.type === "number") {
        return arg.value.toString();
      }
      if (["date", "string"].includes(arg.type)) {
        return JSON.stringify(arg.value);
      }
      if (arg.type === "object") {
        return `{${arg.value.map((pair) => {
          return `${JSON.stringify(pair[0])}:${toJson(pair[1])}`;
        }).join(",")}}`;
      }
      if (arg.type === "array") {
        return `[${(_b = (_a = arg.value) == null ? void 0 : _a.map((val) => toJson(val)).join(",")) != null ? _b : ""}]`;
      }
      throw Error(`Invalid value type: ${arg.toString()}`);
    }
    function stringFromArg(arg) {
      var _a, _b, _c, _d, _e;
      if (!Object.hasOwn(arg, "value")) {
        return arg.type;
      }
      switch (arg.type) {
        case "string":
        case "number":
        case "boolean":
        case "bigint":
          return String(arg.value);
        case "regexp":
          return `/${arg.value.pattern}/${(_a = arg.value.flags) != null ? _a : ""}`;
        case "date":
          return new Date(arg.value).toString();
        case "object":
          return `Object(${(_c = (_b = arg.value) == null ? void 0 : _b.length) != null ? _c : ""})`;
        case "array":
          return `Array(${(_e = (_d = arg.value) == null ? void 0 : _d.length) != null ? _e : ""})`;
        case "map":
          return `Map(${arg.value.length})`;
        case "set":
          return `Set(${arg.value.length})`;
        case "node":
          return "node";
        default:
          return arg.type;
      }
    }
    function getRemoteValuesText(args, formatText) {
      const arg = args[0];
      if (!arg) {
        return "";
      }
      if (arg.type === "string" && isFormmatSpecifier(arg.value.toString()) && formatText) {
        return logMessageFormatter(args);
      }
      return args.map((arg2) => {
        return stringFromArg(arg2);
      }).join(" ");
    }
    exports.getRemoteValuesText = getRemoteValuesText;
  }
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/log/logManager.js
var require_logManager = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/log/logManager.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LogManager = void 0;
    var protocol_js_1 = require_protocol();
    var logHelper_js_1 = require_logHelper();
    function getBidiStackTrace(cdpStackTrace) {
      const stackFrames = cdpStackTrace == null ? void 0 : cdpStackTrace.callFrames.map((callFrame) => {
        return {
          columnNumber: callFrame.columnNumber,
          functionName: callFrame.functionName,
          lineNumber: callFrame.lineNumber,
          url: callFrame.url
        };
      });
      return stackFrames ? { callFrames: stackFrames } : void 0;
    }
    function getLogLevel(consoleApiType) {
      if (["assert", "error"].includes(consoleApiType)) {
        return "error";
      }
      if (["debug", "trace"].includes(consoleApiType)) {
        return "debug";
      }
      if (["warn", "warning"].includes(consoleApiType)) {
        return "warn";
      }
      return "info";
    }
    var _eventManager, _realmStorage, _cdpTarget, _initialize, initialize_fn, _initializeLogEntryAddedEventListener, initializeLogEntryAddedEventListener_fn;
    var _LogManager = class {
      constructor(cdpTarget, realmStorage, eventManager) {
        __privateAdd(this, _initialize);
        __privateAdd(this, _initializeLogEntryAddedEventListener);
        __privateAdd(this, _eventManager, void 0);
        __privateAdd(this, _realmStorage, void 0);
        __privateAdd(this, _cdpTarget, void 0);
        __privateSet(this, _cdpTarget, cdpTarget);
        __privateSet(this, _realmStorage, realmStorage);
        __privateSet(this, _eventManager, eventManager);
      }
      static create(cdpTarget, realmStorage, eventManager) {
        var _a;
        const logManager = new _LogManager(cdpTarget, realmStorage, eventManager);
        __privateMethod(_a = logManager, _initialize, initialize_fn).call(_a);
        return logManager;
      }
    };
    var LogManager = _LogManager;
    _eventManager = new WeakMap();
    _realmStorage = new WeakMap();
    _cdpTarget = new WeakMap();
    _initialize = new WeakSet();
    initialize_fn = function() {
      __privateMethod(this, _initializeLogEntryAddedEventListener, initializeLogEntryAddedEventListener_fn).call(this);
    };
    _initializeLogEntryAddedEventListener = new WeakSet();
    initializeLogEntryAddedEventListener_fn = function() {
      __privateGet(this, _cdpTarget).cdpClient.on("Runtime.consoleAPICalled", (params) => {
        var _a;
        const realm = __privateGet(this, _realmStorage).findRealm({
          cdpSessionId: __privateGet(this, _cdpTarget).cdpSessionId,
          executionContextId: params.executionContextId
        });
        const argsPromise = realm === void 0 ? Promise.resolve(params.args) : Promise.all(params.args.map((arg) => {
          return realm.serializeCdpObject(arg, "none");
        }));
        __privateGet(this, _eventManager).registerPromiseEvent(argsPromise.then((args) => {
          var _a2, _b;
          return {
            method: protocol_js_1.Log.EventNames.LogEntryAddedEvent,
            params: {
              level: getLogLevel(params.type),
              source: {
                realm: (_a2 = realm == null ? void 0 : realm.realmId) != null ? _a2 : "UNKNOWN",
                context: (_b = realm == null ? void 0 : realm.browsingContextId) != null ? _b : "UNKNOWN"
              },
              text: (0, logHelper_js_1.getRemoteValuesText)(args, true),
              timestamp: Math.round(params.timestamp),
              stackTrace: getBidiStackTrace(params.stackTrace),
              type: "console",
              method: params.type === "warning" ? "warn" : params.type,
              args
            }
          };
        }), (_a = realm == null ? void 0 : realm.browsingContextId) != null ? _a : "UNKNOWN", protocol_js_1.Log.EventNames.LogEntryAddedEvent);
      });
      __privateGet(this, _cdpTarget).cdpClient.on("Runtime.exceptionThrown", (params) => {
        var _a;
        const realm = __privateGet(this, _realmStorage).findRealm({
          cdpSessionId: __privateGet(this, _cdpTarget).cdpSessionId,
          executionContextId: params.exceptionDetails.executionContextId
        });
        const textPromise = (async () => {
          if (!params.exceptionDetails.exception) {
            return params.exceptionDetails.text;
          }
          if (realm === void 0) {
            return JSON.stringify(params.exceptionDetails.exception);
          }
          return realm.stringifyObject(params.exceptionDetails.exception);
        })();
        __privateGet(this, _eventManager).registerPromiseEvent(textPromise.then((text) => {
          var _a2, _b;
          return {
            method: protocol_js_1.Log.EventNames.LogEntryAddedEvent,
            params: {
              level: "error",
              source: {
                realm: (_a2 = realm == null ? void 0 : realm.realmId) != null ? _a2 : "UNKNOWN",
                context: (_b = realm == null ? void 0 : realm.browsingContextId) != null ? _b : "UNKNOWN"
              },
              text,
              timestamp: Math.round(params.timestamp),
              stackTrace: getBidiStackTrace(params.exceptionDetails.stackTrace),
              type: "javascript"
            }
          };
        }), (_a = realm == null ? void 0 : realm.browsingContextId) != null ? _a : "UNKNOWN", protocol_js_1.Log.EventNames.LogEntryAddedEvent);
      });
    };
    exports.LogManager = LogManager;
  }
});

// node_modules/chromium-bidi/lib/cjs/utils/DefaultMap.js
var require_DefaultMap = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/utils/DefaultMap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DefaultMap = void 0;
    var _getDefaultValue;
    var DefaultMap = class extends Map {
      constructor(getDefaultValue, entries) {
        super(entries);
        __privateAdd(this, _getDefaultValue, void 0);
        __privateSet(this, _getDefaultValue, getDefaultValue);
      }
      get(key) {
        if (!this.has(key)) {
          this.set(key, __privateGet(this, _getDefaultValue).call(this, key));
        }
        return super.get(key);
      }
    };
    _getDefaultValue = new WeakMap();
    exports.DefaultMap = DefaultMap;
  }
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/network/networkRequest.js
var require_networkRequest = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/network/networkRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NetworkRequest = void 0;
    var deferred_js_1 = require_deferred();
    var protocol_js_1 = require_protocol();
    var _unknown, _servedFromCache, _redirectCount, _eventManager, _requestWillBeSentEvent, _requestWillBeSentExtraInfoEvent, _responseReceivedEvent, _responseReceivedExtraInfoEvent, _beforeRequestSentDeferred, _responseReceivedDeferred, _getBaseEventParams, getBaseEventParams_fn, _getRequestData, getRequestData_fn, _sendBeforeRequestEvent, sendBeforeRequestEvent_fn, _getBeforeRequestEvent, getBeforeRequestEvent_fn, _sendResponseReceivedEvent, sendResponseReceivedEvent_fn, _getResponseReceivedEvent, getResponseReceivedEvent_fn, _isIgnoredEvent, isIgnoredEvent_fn, _getHeaders, getHeaders_fn, _getInitiatorType, getInitiatorType_fn, _getCookies, getCookies_fn, _getCookiesSameSite, getCookiesSameSite_fn;
    var _NetworkRequest = class {
      constructor(requestId, eventManager) {
        __privateAdd(this, _getBaseEventParams);
        __privateAdd(this, _getRequestData);
        __privateAdd(this, _sendBeforeRequestEvent);
        __privateAdd(this, _getBeforeRequestEvent);
        __privateAdd(this, _sendResponseReceivedEvent);
        __privateAdd(this, _getResponseReceivedEvent);
        __privateAdd(this, _isIgnoredEvent);
        __publicField(this, "requestId");
        __privateAdd(this, _servedFromCache, false);
        __privateAdd(this, _redirectCount, void 0);
        __privateAdd(this, _eventManager, void 0);
        __privateAdd(this, _requestWillBeSentEvent, void 0);
        __privateAdd(this, _requestWillBeSentExtraInfoEvent, void 0);
        __privateAdd(this, _responseReceivedEvent, void 0);
        __privateAdd(this, _responseReceivedExtraInfoEvent, void 0);
        __privateAdd(this, _beforeRequestSentDeferred, void 0);
        __privateAdd(this, _responseReceivedDeferred, void 0);
        this.requestId = requestId;
        __privateSet(this, _redirectCount, 0);
        __privateSet(this, _eventManager, eventManager);
        __privateSet(this, _beforeRequestSentDeferred, new deferred_js_1.Deferred());
        __privateSet(this, _responseReceivedDeferred, new deferred_js_1.Deferred());
      }
      onRequestWillBeSentEvent(event) {
        if (__privateGet(this, _requestWillBeSentEvent) !== void 0) {
          return;
        }
        __privateSet(this, _requestWillBeSentEvent, event);
        if (__privateGet(this, _requestWillBeSentExtraInfoEvent) !== void 0) {
          __privateGet(this, _beforeRequestSentDeferred).resolve();
        }
        __privateMethod(this, _sendBeforeRequestEvent, sendBeforeRequestEvent_fn).call(this);
      }
      onRequestWillBeSentExtraInfoEvent(event) {
        if (__privateGet(this, _requestWillBeSentExtraInfoEvent) !== void 0) {
          return;
        }
        __privateSet(this, _requestWillBeSentExtraInfoEvent, event);
        if (__privateGet(this, _requestWillBeSentEvent) !== void 0) {
          __privateGet(this, _beforeRequestSentDeferred).resolve();
        }
      }
      onResponseReceivedEventExtraInfo(event) {
        if (__privateGet(this, _responseReceivedExtraInfoEvent) !== void 0) {
          return;
        }
        __privateSet(this, _responseReceivedExtraInfoEvent, event);
        if (__privateGet(this, _responseReceivedEvent) !== void 0) {
          __privateGet(this, _responseReceivedDeferred).resolve();
        }
      }
      onResponseReceivedEvent(responseReceivedEvent) {
        if (__privateGet(this, _responseReceivedEvent) !== void 0) {
          return;
        }
        __privateSet(this, _responseReceivedEvent, responseReceivedEvent);
        if (!responseReceivedEvent.hasExtraInfo && !__privateGet(this, _beforeRequestSentDeferred).isFinished) {
          __privateGet(this, _beforeRequestSentDeferred).resolve();
        }
        if (!responseReceivedEvent.hasExtraInfo || __privateGet(this, _responseReceivedExtraInfoEvent) !== void 0 || __privateGet(this, _servedFromCache)) {
          __privateGet(this, _responseReceivedDeferred).resolve();
        }
        __privateMethod(this, _sendResponseReceivedEvent, sendResponseReceivedEvent_fn).call(this);
      }
      onServedFromCache() {
        if (__privateGet(this, _requestWillBeSentEvent) !== void 0) {
          __privateGet(this, _beforeRequestSentDeferred).resolve();
        }
        if (__privateGet(this, _responseReceivedEvent) !== void 0) {
          __privateGet(this, _responseReceivedDeferred).resolve();
        }
        __privateSet(this, _servedFromCache, true);
      }
      onLoadingFailedEvent(event) {
        var _a, _b;
        __privateGet(this, _beforeRequestSentDeferred).resolve();
        __privateGet(this, _responseReceivedDeferred).reject(event);
        __privateGet(this, _eventManager).registerEvent({
          method: protocol_js_1.Network.EventNames.FetchErrorEvent,
          params: {
            ...__privateMethod(this, _getBaseEventParams, getBaseEventParams_fn).call(this),
            errorText: event.errorText
          }
        }, (_b = (_a = __privateGet(this, _requestWillBeSentEvent)) == null ? void 0 : _a.frameId) != null ? _b : null);
      }
    };
    var NetworkRequest = _NetworkRequest;
    _unknown = new WeakMap();
    _servedFromCache = new WeakMap();
    _redirectCount = new WeakMap();
    _eventManager = new WeakMap();
    _requestWillBeSentEvent = new WeakMap();
    _requestWillBeSentExtraInfoEvent = new WeakMap();
    _responseReceivedEvent = new WeakMap();
    _responseReceivedExtraInfoEvent = new WeakMap();
    _beforeRequestSentDeferred = new WeakMap();
    _responseReceivedDeferred = new WeakMap();
    _getBaseEventParams = new WeakSet();
    getBaseEventParams_fn = function() {
      var _a, _b, _c, _d, _e, _f;
      return {
        context: (_b = (_a = __privateGet(this, _requestWillBeSentEvent)) == null ? void 0 : _a.frameId) != null ? _b : null,
        navigation: (_d = (_c = __privateGet(this, _requestWillBeSentEvent)) == null ? void 0 : _c.loaderId) != null ? _d : null,
        redirectCount: __privateGet(this, _redirectCount),
        request: __privateMethod(this, _getRequestData, getRequestData_fn).call(this),
        timestamp: Math.round(((_f = (_e = __privateGet(this, _requestWillBeSentEvent)) == null ? void 0 : _e.wallTime) != null ? _f : 0) * 1e3)
      };
    };
    _getRequestData = new WeakSet();
    getRequestData_fn = function() {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i;
      const cookies = __privateGet(this, _requestWillBeSentExtraInfoEvent) ? __privateMethod(_a = _NetworkRequest, _getCookies, getCookies_fn).call(_a, __privateGet(this, _requestWillBeSentExtraInfoEvent).associatedCookies) : [];
      return {
        request: (_c = (_b = __privateGet(this, _requestWillBeSentEvent)) == null ? void 0 : _b.requestId) != null ? _c : __privateGet(_NetworkRequest, _unknown),
        url: (_e = (_d = __privateGet(this, _requestWillBeSentEvent)) == null ? void 0 : _d.request.url) != null ? _e : __privateGet(_NetworkRequest, _unknown),
        method: (_g = (_f = __privateGet(this, _requestWillBeSentEvent)) == null ? void 0 : _f.request.method) != null ? _g : __privateGet(_NetworkRequest, _unknown),
        headers: Object.keys((_i = (_h = __privateGet(this, _requestWillBeSentEvent)) == null ? void 0 : _h.request.headers) != null ? _i : []).map((key) => {
          var _a2;
          return {
            name: key,
            value: (_a2 = __privateGet(this, _requestWillBeSentEvent)) == null ? void 0 : _a2.request.headers[key]
          };
        }),
        cookies,
        headersSize: -1,
        bodySize: 0,
        timings: {
          timeOrigin: 0,
          requestTime: 0,
          redirectStart: 0,
          redirectEnd: 0,
          fetchStart: 0,
          dnsStart: 0,
          dnsEnd: 0,
          connectStart: 0,
          connectEnd: 0,
          tlsStart: 0,
          requestStart: 0,
          responseStart: 0,
          responseEnd: 0
        }
      };
    };
    _sendBeforeRequestEvent = new WeakSet();
    sendBeforeRequestEvent_fn = function() {
      var _a, _b;
      if (!__privateMethod(this, _isIgnoredEvent, isIgnoredEvent_fn).call(this)) {
        __privateGet(this, _eventManager).registerPromiseEvent(__privateGet(this, _beforeRequestSentDeferred).then(() => __privateMethod(this, _getBeforeRequestEvent, getBeforeRequestEvent_fn).call(this)), (_b = (_a = __privateGet(this, _requestWillBeSentEvent)) == null ? void 0 : _a.frameId) != null ? _b : null, protocol_js_1.Network.EventNames.BeforeRequestSentEvent);
      }
    };
    _getBeforeRequestEvent = new WeakSet();
    getBeforeRequestEvent_fn = function() {
      var _a;
      if (__privateGet(this, _requestWillBeSentEvent) === void 0) {
        throw new Error("RequestWillBeSentEvent is not set");
      }
      return {
        method: protocol_js_1.Network.EventNames.BeforeRequestSentEvent,
        params: {
          ...__privateMethod(this, _getBaseEventParams, getBaseEventParams_fn).call(this),
          initiator: {
            type: __privateMethod(_a = _NetworkRequest, _getInitiatorType, getInitiatorType_fn).call(_a, __privateGet(this, _requestWillBeSentEvent).initiator.type)
          }
        }
      };
    };
    _sendResponseReceivedEvent = new WeakSet();
    sendResponseReceivedEvent_fn = function() {
      var _a, _b;
      if (!__privateMethod(this, _isIgnoredEvent, isIgnoredEvent_fn).call(this)) {
        __privateGet(this, _eventManager).registerPromiseEvent(__privateGet(this, _responseReceivedDeferred).then(() => __privateMethod(this, _getResponseReceivedEvent, getResponseReceivedEvent_fn).call(this)), (_b = (_a = __privateGet(this, _responseReceivedEvent)) == null ? void 0 : _a.frameId) != null ? _b : null, protocol_js_1.Network.EventNames.ResponseCompletedEvent);
      }
    };
    _getResponseReceivedEvent = new WeakSet();
    getResponseReceivedEvent_fn = function() {
      var _a, _b, _c, _d, _e, _f, _g;
      if (__privateGet(this, _requestWillBeSentEvent) === void 0) {
        throw new Error("RequestWillBeSentEvent is not set");
      }
      if (__privateGet(this, _responseReceivedEvent) === void 0) {
        throw new Error("ResponseReceivedEvent is not set");
      }
      if (__privateGet(this, _responseReceivedEvent).response.fromDiskCache) {
        __privateSet(this, _responseReceivedExtraInfoEvent, void 0);
      }
      return {
        method: protocol_js_1.Network.EventNames.ResponseCompletedEvent,
        params: {
          ...__privateMethod(this, _getBaseEventParams, getBaseEventParams_fn).call(this),
          response: {
            url: __privateGet(this, _responseReceivedEvent).response.url,
            protocol: (_a = __privateGet(this, _responseReceivedEvent).response.protocol) != null ? _a : "",
            status: (_c = (_b = __privateGet(this, _responseReceivedExtraInfoEvent)) == null ? void 0 : _b.statusCode) != null ? _c : __privateGet(this, _responseReceivedEvent).response.status,
            statusText: __privateGet(this, _responseReceivedEvent).response.statusText,
            fromCache: __privateGet(this, _responseReceivedEvent).response.fromDiskCache || __privateGet(this, _responseReceivedEvent).response.fromPrefetchCache || __privateGet(this, _servedFromCache),
            headers: __privateMethod(_d = _NetworkRequest, _getHeaders, getHeaders_fn).call(_d, __privateGet(this, _responseReceivedEvent).response.headers),
            mimeType: __privateGet(this, _responseReceivedEvent).response.mimeType,
            bytesReceived: __privateGet(this, _responseReceivedEvent).response.encodedDataLength,
            headersSize: (_g = (_f = (_e = __privateGet(this, _responseReceivedExtraInfoEvent)) == null ? void 0 : _e.headersText) == null ? void 0 : _f.length) != null ? _g : 0,
            bodySize: 0,
            content: {
              size: 0
            }
          }
        }
      };
    };
    _isIgnoredEvent = new WeakSet();
    isIgnoredEvent_fn = function() {
      var _a, _b;
      return (_b = (_a = __privateGet(this, _requestWillBeSentEvent)) == null ? void 0 : _a.request.url.endsWith("/favicon.ico")) != null ? _b : false;
    };
    _getHeaders = new WeakSet();
    getHeaders_fn = function(headers) {
      return Object.keys(headers).map((key) => ({
        name: key,
        value: headers[key]
      }));
    };
    _getInitiatorType = new WeakSet();
    getInitiatorType_fn = function(initiatorType) {
      switch (initiatorType) {
        case "parser":
        case "script":
        case "preflight":
          return initiatorType;
        default:
          return "other";
      }
    };
    _getCookies = new WeakSet();
    getCookies_fn = function(associatedCookies) {
      return associatedCookies.map((cookieInfo) => {
        var _a;
        return {
          name: cookieInfo.cookie.name,
          value: cookieInfo.cookie.value,
          domain: cookieInfo.cookie.domain,
          path: cookieInfo.cookie.path,
          expires: cookieInfo.cookie.expires,
          size: cookieInfo.cookie.size,
          httpOnly: cookieInfo.cookie.httpOnly,
          secure: cookieInfo.cookie.secure,
          sameSite: __privateMethod(_a = _NetworkRequest, _getCookiesSameSite, getCookiesSameSite_fn).call(_a, cookieInfo.cookie.sameSite)
        };
      });
    };
    _getCookiesSameSite = new WeakSet();
    getCookiesSameSite_fn = function(cdpSameSiteValue) {
      switch (cdpSameSiteValue) {
        case "Strict":
          return "strict";
        case "Lax":
          return "lax";
        default:
          return "none";
      }
    };
    __privateAdd(NetworkRequest, _getHeaders);
    __privateAdd(NetworkRequest, _getInitiatorType);
    __privateAdd(NetworkRequest, _getCookies);
    __privateAdd(NetworkRequest, _getCookiesSameSite);
    __privateAdd(NetworkRequest, _unknown, "UNKNOWN");
    exports.NetworkRequest = NetworkRequest;
  }
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/network/networkProcessor.js
var require_networkProcessor = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/network/networkProcessor.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NetworkProcessor = void 0;
    var DefaultMap_js_1 = require_DefaultMap();
    var networkRequest_js_1 = require_networkRequest();
    var _eventManager, _requestMap, _getOrCreateNetworkRequest, getOrCreateNetworkRequest_fn;
    var _NetworkProcessor = class {
      constructor(eventManager) {
        __privateAdd(this, _getOrCreateNetworkRequest);
        __privateAdd(this, _eventManager, void 0);
        __privateAdd(this, _requestMap, void 0);
        __privateSet(this, _eventManager, eventManager);
        __privateSet(this, _requestMap, new DefaultMap_js_1.DefaultMap((requestId) => new networkRequest_js_1.NetworkRequest(requestId, __privateGet(this, _eventManager))));
      }
      static async create(cdpClient, eventManager) {
        const networkProcessor = new _NetworkProcessor(eventManager);
        cdpClient.on("Network.requestWillBeSent", (params) => {
          var _a;
          __privateMethod(_a = networkProcessor, _getOrCreateNetworkRequest, getOrCreateNetworkRequest_fn).call(_a, params.requestId).onRequestWillBeSentEvent(params);
        });
        cdpClient.on("Network.requestWillBeSentExtraInfo", (params) => {
          var _a;
          __privateMethod(_a = networkProcessor, _getOrCreateNetworkRequest, getOrCreateNetworkRequest_fn).call(_a, params.requestId).onRequestWillBeSentExtraInfoEvent(params);
        });
        cdpClient.on("Network.responseReceived", (params) => {
          var _a;
          __privateMethod(_a = networkProcessor, _getOrCreateNetworkRequest, getOrCreateNetworkRequest_fn).call(_a, params.requestId).onResponseReceivedEvent(params);
        });
        cdpClient.on("Network.responseReceivedExtraInfo", (params) => {
          var _a;
          __privateMethod(_a = networkProcessor, _getOrCreateNetworkRequest, getOrCreateNetworkRequest_fn).call(_a, params.requestId).onResponseReceivedEventExtraInfo(params);
        });
        cdpClient.on("Network.loadingFailed", (params) => {
          var _a;
          __privateMethod(_a = networkProcessor, _getOrCreateNetworkRequest, getOrCreateNetworkRequest_fn).call(_a, params.requestId).onLoadingFailedEvent(params);
        });
        cdpClient.on("Network.requestServedFromCache", (params) => {
          var _a;
          __privateMethod(_a = networkProcessor, _getOrCreateNetworkRequest, getOrCreateNetworkRequest_fn).call(_a, params.requestId).onServedFromCache();
        });
        await cdpClient.sendCommand("Network.enable");
        return networkProcessor;
      }
    };
    var NetworkProcessor = _NetworkProcessor;
    _eventManager = new WeakMap();
    _requestMap = new WeakMap();
    _getOrCreateNetworkRequest = new WeakSet();
    getOrCreateNetworkRequest_fn = function(requestId) {
      return __privateGet(this, _requestMap).get(requestId);
    };
    exports.NetworkProcessor = NetworkProcessor;
  }
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/context/cdpTarget.js
var require_cdpTarget = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/context/cdpTarget.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CdpTarget = void 0;
    var logManager_js_1 = require_logManager();
    var protocol_js_1 = require_protocol();
    var deferred_js_1 = require_deferred();
    var networkProcessor_js_1 = require_networkProcessor();
    var _targetId, _parentTargetId, _cdpClient, _cdpSessionId, _eventManager, _preloadScriptStorage, _targetUnblocked, _networkDomainActivated, _unblock, unblock_fn, _setEventListeners, setEventListeners_fn, _initAndEvaluatePreloadScripts, initAndEvaluatePreloadScripts_fn;
    var _CdpTarget = class {
      constructor(targetId, parentTargetId, cdpClient, cdpSessionId, eventManager, preloadScriptStorage) {
        __privateAdd(this, _unblock);
        __privateAdd(this, _setEventListeners);
        __privateAdd(this, _initAndEvaluatePreloadScripts);
        __privateAdd(this, _targetId, void 0);
        __privateAdd(this, _parentTargetId, void 0);
        __privateAdd(this, _cdpClient, void 0);
        __privateAdd(this, _cdpSessionId, void 0);
        __privateAdd(this, _eventManager, void 0);
        __privateAdd(this, _preloadScriptStorage, void 0);
        __privateAdd(this, _targetUnblocked, void 0);
        __privateAdd(this, _networkDomainActivated, void 0);
        __privateSet(this, _targetId, targetId);
        __privateSet(this, _parentTargetId, parentTargetId);
        __privateSet(this, _cdpClient, cdpClient);
        __privateSet(this, _cdpSessionId, cdpSessionId);
        __privateSet(this, _eventManager, eventManager);
        __privateSet(this, _preloadScriptStorage, preloadScriptStorage);
        __privateSet(this, _networkDomainActivated, false);
        __privateSet(this, _targetUnblocked, new deferred_js_1.Deferred());
      }
      static create(targetId, parentTargetId, cdpClient, cdpSessionId, realmStorage, eventManager, preloadScriptStorage) {
        var _a, _b;
        const cdpTarget = new _CdpTarget(targetId, parentTargetId, cdpClient, cdpSessionId, eventManager, preloadScriptStorage);
        logManager_js_1.LogManager.create(cdpTarget, realmStorage, eventManager);
        __privateMethod(_a = cdpTarget, _setEventListeners, setEventListeners_fn).call(_a);
        void __privateMethod(_b = cdpTarget, _unblock, unblock_fn).call(_b);
        return cdpTarget;
      }
      get targetUnblocked() {
        return __privateGet(this, _targetUnblocked);
      }
      get targetId() {
        return __privateGet(this, _targetId);
      }
      get cdpClient() {
        return __privateGet(this, _cdpClient);
      }
      get cdpSessionId() {
        return __privateGet(this, _cdpSessionId);
      }
      async enableNetworkDomain() {
        if (!__privateGet(this, _networkDomainActivated)) {
          __privateSet(this, _networkDomainActivated, true);
          await networkProcessor_js_1.NetworkProcessor.create(this.cdpClient, __privateGet(this, _eventManager));
        }
      }
    };
    var CdpTarget = _CdpTarget;
    _targetId = new WeakMap();
    _parentTargetId = new WeakMap();
    _cdpClient = new WeakMap();
    _cdpSessionId = new WeakMap();
    _eventManager = new WeakMap();
    _preloadScriptStorage = new WeakMap();
    _targetUnblocked = new WeakMap();
    _networkDomainActivated = new WeakMap();
    _unblock = new WeakSet();
    unblock_fn = async function() {
      try {
        if (__privateGet(this, _eventManager).isNetworkDomainEnabled) {
          await this.enableNetworkDomain();
        }
        await __privateGet(this, _cdpClient).sendCommand("Runtime.enable");
        await __privateGet(this, _cdpClient).sendCommand("Page.enable");
        await __privateGet(this, _cdpClient).sendCommand("Page.setLifecycleEventsEnabled", {
          enabled: true
        });
        await __privateGet(this, _cdpClient).sendCommand("Target.setAutoAttach", {
          autoAttach: true,
          waitForDebuggerOnStart: true,
          flatten: true
        });
        await __privateMethod(this, _initAndEvaluatePreloadScripts, initAndEvaluatePreloadScripts_fn).call(this);
        await __privateGet(this, _cdpClient).sendCommand("Runtime.runIfWaitingForDebugger");
      } catch (error) {
        if (!__privateGet(this, _cdpClient).isCloseError(error)) {
          throw error;
        }
      }
      __privateGet(this, _targetUnblocked).resolve();
    };
    _setEventListeners = new WeakSet();
    setEventListeners_fn = function() {
      __privateGet(this, _cdpClient).on("*", (cdpMethod, params) => {
        __privateGet(this, _eventManager).registerEvent({
          method: protocol_js_1.CDP.EventNames.EventReceivedEvent,
          params: {
            cdpMethod,
            cdpParams: params != null ? params : {},
            cdpSession: __privateGet(this, _cdpSessionId)
          }
        }, null);
      });
    };
    _initAndEvaluatePreloadScripts = new WeakSet();
    initAndEvaluatePreloadScripts_fn = async function() {
      for (const script of __privateGet(this, _preloadScriptStorage).findPreloadScripts({
        contextIds: [null, __privateGet(this, _parentTargetId)]
      })) {
        await script.initInTarget(this);
        script.scheduleEvaluateInTarget(this);
      }
    };
    exports.CdpTarget = CdpTarget;
  }
});

// node_modules/chromium-bidi/lib/cjs/utils/uuid.js
var require_uuid = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/utils/uuid.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uuidv4 = void 0;
    function uuidv4() {
      if ("crypto" in globalThis && "randomUUID" in globalThis.crypto) {
        return globalThis.crypto.randomUUID();
      }
      const randomValues = new Uint8Array(16);
      if ("crypto" in globalThis && "getRandomValues" in globalThis.crypto) {
        globalThis.crypto.getRandomValues(randomValues);
      } else {
        require_crypto().webcrypto.getRandomValues(randomValues);
      }
      randomValues[6] = randomValues[6] & 15 | 64;
      randomValues[8] = randomValues[8] & 63 | 128;
      const bytesToHex = (bytes) => bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, "0"), "");
      return [
        bytesToHex(randomValues.subarray(0, 4)),
        bytesToHex(randomValues.subarray(4, 6)),
        bytesToHex(randomValues.subarray(6, 8)),
        bytesToHex(randomValues.subarray(8, 10)),
        bytesToHex(randomValues.subarray(10, 16))
      ].join("-");
    }
    exports.uuidv4 = uuidv4;
  }
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/context/bidiPreloadScript.js
var require_bidiPreloadScript = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/context/bidiPreloadScript.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BidiPreloadScript = void 0;
    var uuid_js_1 = require_uuid();
    var _id, _cdpPreloadScripts, _functionDeclaration, _contextId, _targetIds;
    var BidiPreloadScript = class {
      constructor(params) {
        __privateAdd(this, _id, (0, uuid_js_1.uuidv4)());
        __privateAdd(this, _cdpPreloadScripts, []);
        __privateAdd(this, _functionDeclaration, void 0);
        __privateAdd(this, _contextId, void 0);
        __privateAdd(this, _targetIds, /* @__PURE__ */ new Set());
        var _a;
        if (params.sandbox !== void 0) {
          throw new Error("Sandbox is not supported yet");
        }
        if (params.arguments !== void 0 && params.arguments.length > 0) {
          throw new Error("add preload script arguments are not supported");
        }
        __privateSet(this, _functionDeclaration, params.functionDeclaration);
        __privateSet(this, _contextId, (_a = params.context) != null ? _a : null);
      }
      get id() {
        return __privateGet(this, _id);
      }
      get contextId() {
        return __privateGet(this, _contextId);
      }
      get targetIds() {
        return __privateGet(this, _targetIds);
      }
      async initInTargets(cdpTargets) {
        await Promise.all(Array.from(cdpTargets).map((cdpTarget) => this.initInTarget(cdpTarget)));
      }
      async initInTarget(cdpTarget) {
        const addCdpPreloadScriptResult = await cdpTarget.cdpClient.sendCommand("Page.addScriptToEvaluateOnNewDocument", {
          source: `(${__privateGet(this, _functionDeclaration)})();`
        });
        __privateGet(this, _cdpPreloadScripts).push({
          target: cdpTarget,
          preloadScriptId: addCdpPreloadScriptResult.identifier
        });
        __privateGet(this, _targetIds).add(cdpTarget.targetId);
      }
      scheduleEvaluateInTarget(cdpTarget) {
        void cdpTarget.cdpClient.sendCommand("Runtime.evaluate", {
          expression: `(${__privateGet(this, _functionDeclaration)})();`
        });
      }
      async remove() {
        for (const cdpPreloadScript of __privateGet(this, _cdpPreloadScripts)) {
          const cdpTarget = cdpPreloadScript.target;
          const cdpPreloadScriptId = cdpPreloadScript.preloadScriptId;
          await cdpTarget.cdpClient.sendCommand("Page.removeScriptToEvaluateOnNewDocument", {
            identifier: cdpPreloadScriptId
          });
        }
      }
      async cdpTargetIsGone(cdpTargetId) {
        __privateSet(this, _cdpPreloadScripts, __privateGet(this, _cdpPreloadScripts).filter((cdpPreloadScript) => {
          var _a;
          return ((_a = cdpPreloadScript.target) == null ? void 0 : _a.targetId) !== cdpTargetId;
        }));
        __privateGet(this, _targetIds).delete(cdpTargetId);
      }
    };
    _id = new WeakMap();
    _cdpPreloadScripts = new WeakMap();
    _functionDeclaration = new WeakMap();
    _contextId = new WeakMap();
    _targetIds = new WeakMap();
    exports.BidiPreloadScript = BidiPreloadScript;
  }
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/context/browsingContextProcessor.js
var require_browsingContextProcessor = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/context/browsingContextProcessor.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BrowsingContextProcessor = void 0;
    var protocol_js_1 = require_protocol();
    var log_js_1 = require_log();
    var InputStateManager_js_1 = require_InputStateManager();
    var ActionDispatcher_js_1 = require_ActionDispatcher();
    var PreloadScriptStorage_js_1 = require_PreloadScriptStorage();
    var browsingContextImpl_js_1 = require_browsingContextImpl();
    var cdpTarget_js_1 = require_cdpTarget();
    var bidiPreloadScript_1 = require_bidiPreloadScript();
    var _browsingContextStorage, _cdpConnection, _eventManager, _logger, _realmStorage, _selfTargetId, _preloadScriptStorage, _inputStateManager, _setEventListeners, setEventListeners_fn, _handleFrameAttachedEvent, handleFrameAttachedEvent_fn, _handleFrameDetachedEvent, handleFrameDetachedEvent_fn, _handleAttachedToTargetEvent, handleAttachedToTargetEvent_fn, _handleDetachedFromTargetEvent, handleDetachedFromTargetEvent_fn, _getRealm, getRealm_fn, _getActionsByTick, getActionsByTick_fn, _isValidTarget, isValidTarget_fn;
    var BrowsingContextProcessor = class {
      constructor(realmStorage, cdpConnection, selfTargetId, eventManager, browsingContextStorage, logger) {
        __privateAdd(this, _setEventListeners);
        __privateAdd(this, _handleFrameAttachedEvent);
        __privateAdd(this, _handleFrameDetachedEvent);
        __privateAdd(this, _handleAttachedToTargetEvent);
        __privateAdd(this, _handleDetachedFromTargetEvent);
        __privateAdd(this, _getRealm);
        __privateAdd(this, _getActionsByTick);
        __privateAdd(this, _isValidTarget);
        __privateAdd(this, _browsingContextStorage, void 0);
        __privateAdd(this, _cdpConnection, void 0);
        __privateAdd(this, _eventManager, void 0);
        __privateAdd(this, _logger, void 0);
        __privateAdd(this, _realmStorage, void 0);
        __privateAdd(this, _selfTargetId, void 0);
        __privateAdd(this, _preloadScriptStorage, void 0);
        __privateAdd(this, _inputStateManager, new InputStateManager_js_1.InputStateManager());
        __privateSet(this, _browsingContextStorage, browsingContextStorage);
        __privateSet(this, _cdpConnection, cdpConnection);
        __privateSet(this, _eventManager, eventManager);
        __privateSet(this, _logger, logger);
        __privateSet(this, _realmStorage, realmStorage);
        __privateSet(this, _selfTargetId, selfTargetId);
        __privateSet(this, _preloadScriptStorage, new PreloadScriptStorage_js_1.PreloadScriptStorage());
        __privateMethod(this, _setEventListeners, setEventListeners_fn).call(this, __privateGet(this, _cdpConnection).browserClient());
      }
      process_browsingContext_getTree(params) {
        const resultContexts = params.root === void 0 ? __privateGet(this, _browsingContextStorage).getTopLevelContexts() : [__privateGet(this, _browsingContextStorage).getContext(params.root)];
        return {
          result: {
            contexts: resultContexts.map((c) => {
              var _a;
              return c.serializeToBidiValue((_a = params.maxDepth) != null ? _a : Number.MAX_VALUE);
            })
          }
        };
      }
      async process_browsingContext_create(params) {
        const browserCdpClient = __privateGet(this, _cdpConnection).browserClient();
        let referenceContext;
        if (params.referenceContext !== void 0) {
          referenceContext = __privateGet(this, _browsingContextStorage).getContext(params.referenceContext);
          if (!referenceContext.isTopLevelContext()) {
            throw new protocol_js_1.Message.InvalidArgumentException(`referenceContext should be a top-level context`);
          }
        }
        let result;
        switch (params.type) {
          case "tab":
            result = await browserCdpClient.sendCommand("Target.createTarget", {
              url: "about:blank",
              newWindow: false
            });
            break;
          case "window":
            result = await browserCdpClient.sendCommand("Target.createTarget", {
              url: "about:blank",
              newWindow: true
            });
            break;
        }
        const contextId = result.targetId;
        const context = __privateGet(this, _browsingContextStorage).getContext(contextId);
        await context.awaitLoaded();
        return {
          result: {
            context: context.id
          }
        };
      }
      process_browsingContext_navigate(params) {
        var _a;
        const context = __privateGet(this, _browsingContextStorage).getContext(params.context);
        return context.navigate(params.url, (_a = params.wait) != null ? _a : "none");
      }
      process_browsingContext_reload(params) {
        var _a, _b;
        const context = __privateGet(this, _browsingContextStorage).getContext(params.context);
        return context.reload((_a = params.ignoreCache) != null ? _a : false, (_b = params.wait) != null ? _b : "none");
      }
      async process_browsingContext_captureScreenshot(params) {
        const context = __privateGet(this, _browsingContextStorage).getContext(params.context);
        return context.captureScreenshot();
      }
      async process_browsingContext_print(params) {
        const context = __privateGet(this, _browsingContextStorage).getContext(params.context);
        return context.print(params);
      }
      async process_script_addPreloadScript(params) {
        const preloadScript = new bidiPreloadScript_1.BidiPreloadScript(params);
        __privateGet(this, _preloadScriptStorage).addPreloadScript(preloadScript);
        const cdpTargets = new Set(
          params.context === void 0 || params.context === null ? __privateGet(this, _browsingContextStorage).getTopLevelContexts().map((context) => context.cdpTarget) : [__privateGet(this, _browsingContextStorage).getContext(params.context).cdpTarget]
        );
        await preloadScript.initInTargets(cdpTargets);
        return {
          result: {
            script: preloadScript.id
          }
        };
      }
      async process_script_removePreloadScript(params) {
        const bidiId = params.script;
        const scripts = __privateGet(this, _preloadScriptStorage).findPreloadScripts({
          id: bidiId
        });
        if (scripts.length === 0) {
          throw new protocol_js_1.Message.NoSuchScriptException(`No preload script with BiDi ID '${bidiId}'`);
        }
        await Promise.all(scripts.map((script) => script.remove()));
        __privateGet(this, _preloadScriptStorage).removeBiDiPreloadScripts({
          id: bidiId
        });
        return { result: {} };
      }
      async process_script_evaluate(params) {
        var _a, _b;
        const realm = await __privateMethod(this, _getRealm, getRealm_fn).call(this, params.target);
        return realm.scriptEvaluate(params.expression, params.awaitPromise, (_a = params.resultOwnership) != null ? _a : "none", (_b = params.serializationOptions) != null ? _b : {});
      }
      process_script_getRealms(params) {
        if (params.context !== void 0) {
          __privateGet(this, _browsingContextStorage).getContext(params.context);
        }
        const realms = __privateGet(this, _realmStorage).findRealms({
          browsingContextId: params.context,
          type: params.type
        }).map((realm) => realm.toBiDi());
        return { result: { realms } };
      }
      async process_script_callFunction(params) {
        var _a, _b, _c, _d;
        const realm = await __privateMethod(this, _getRealm, getRealm_fn).call(this, params.target);
        return realm.callFunction(
          params.functionDeclaration,
          (_a = params.this) != null ? _a : {
            type: "undefined"
          },
          (_b = params.arguments) != null ? _b : [],
          params.awaitPromise,
          (_c = params.resultOwnership) != null ? _c : "none",
          (_d = params.serializationOptions) != null ? _d : {}
        );
      }
      async process_script_disown(params) {
        const realm = await __privateMethod(this, _getRealm, getRealm_fn).call(this, params.target);
        await Promise.all(params.handles.map(async (h) => realm.disown(h)));
        return { result: {} };
      }
      async process_input_performActions(params) {
        const context = __privateGet(this, _browsingContextStorage).getContext(params.context);
        const inputState = __privateGet(this, _inputStateManager).get(context.top);
        const actionsByTick = __privateMethod(this, _getActionsByTick, getActionsByTick_fn).call(this, params, inputState);
        const dispatcher = new ActionDispatcher_js_1.ActionDispatcher(inputState, context);
        await dispatcher.dispatchActions(actionsByTick);
        return { result: {} };
      }
      async process_input_releaseActions(params) {
        const context = __privateGet(this, _browsingContextStorage).getContext(params.context);
        const topContext = context.top;
        const inputState = __privateGet(this, _inputStateManager).get(topContext);
        const dispatcher = new ActionDispatcher_js_1.ActionDispatcher(inputState, context);
        await dispatcher.dispatchTickActions(inputState.cancelList.reverse());
        __privateGet(this, _inputStateManager).delete(topContext);
        return { result: {} };
      }
      async process_browsingContext_close(commandParams) {
        const browserCdpClient = __privateGet(this, _cdpConnection).browserClient();
        const context = __privateGet(this, _browsingContextStorage).getContext(commandParams.context);
        if (!context.isTopLevelContext()) {
          throw new protocol_js_1.Message.InvalidArgumentException("A top-level browsing context cannot be closed.");
        }
        const detachedFromTargetPromise = new Promise((resolve) => {
          const onContextDestroyed = (eventParams) => {
            if (eventParams.targetId === commandParams.context) {
              browserCdpClient.off("Target.detachedFromTarget", onContextDestroyed);
              resolve();
            }
          };
          browserCdpClient.on("Target.detachedFromTarget", onContextDestroyed);
        });
        await browserCdpClient.sendCommand("Target.closeTarget", {
          targetId: commandParams.context
        });
        await detachedFromTargetPromise;
        return { result: {} };
      }
      async process_cdp_sendCommand(params) {
        const client = params.cdpSession ? __privateGet(this, _cdpConnection).getCdpClient(params.cdpSession) : __privateGet(this, _cdpConnection).browserClient();
        const sendCdpCommandResult = await client.sendCommand(params.cdpMethod, params.cdpParams);
        return {
          result: sendCdpCommandResult,
          cdpSession: params.cdpSession
        };
      }
      process_cdp_getSession(params) {
        const context = params.context;
        const sessionId = __privateGet(this, _browsingContextStorage).getContext(context).cdpTarget.cdpSessionId;
        if (sessionId === void 0) {
          return { result: { cdpSession: null } };
        }
        return { result: { cdpSession: sessionId } };
      }
    };
    _browsingContextStorage = new WeakMap();
    _cdpConnection = new WeakMap();
    _eventManager = new WeakMap();
    _logger = new WeakMap();
    _realmStorage = new WeakMap();
    _selfTargetId = new WeakMap();
    _preloadScriptStorage = new WeakMap();
    _inputStateManager = new WeakMap();
    _setEventListeners = new WeakSet();
    setEventListeners_fn = function(cdpClient) {
      cdpClient.on("Target.attachedToTarget", (params) => {
        __privateMethod(this, _handleAttachedToTargetEvent, handleAttachedToTargetEvent_fn).call(this, params, cdpClient);
      });
      cdpClient.on("Target.detachedFromTarget", (params) => {
        __privateMethod(this, _handleDetachedFromTargetEvent, handleDetachedFromTargetEvent_fn).call(this, params);
      });
      cdpClient.on("Page.frameAttached", (params) => {
        __privateMethod(this, _handleFrameAttachedEvent, handleFrameAttachedEvent_fn).call(this, params);
      });
      cdpClient.on("Page.frameDetached", (params) => {
        __privateMethod(this, _handleFrameDetachedEvent, handleFrameDetachedEvent_fn).call(this, params);
      });
    };
    _handleFrameAttachedEvent = new WeakSet();
    handleFrameAttachedEvent_fn = function(params) {
      const parentBrowsingContext = __privateGet(this, _browsingContextStorage).findContext(params.parentFrameId);
      if (parentBrowsingContext !== void 0) {
        browsingContextImpl_js_1.BrowsingContextImpl.create(parentBrowsingContext.cdpTarget, __privateGet(this, _realmStorage), params.frameId, params.parentFrameId, __privateGet(this, _eventManager), __privateGet(this, _browsingContextStorage), __privateGet(this, _logger));
      }
    };
    _handleFrameDetachedEvent = new WeakSet();
    handleFrameDetachedEvent_fn = function(params) {
      var _a;
      if (params.reason === "swap") {
        return;
      }
      (_a = __privateGet(this, _browsingContextStorage).findContext(params.frameId)) == null ? void 0 : _a.delete();
    };
    _handleAttachedToTargetEvent = new WeakSet();
    handleAttachedToTargetEvent_fn = function(params, parentSessionCdpClient) {
      var _a, _b;
      const { sessionId, targetInfo } = params;
      const targetCdpClient = __privateGet(this, _cdpConnection).getCdpClient(sessionId);
      if (!__privateMethod(this, _isValidTarget, isValidTarget_fn).call(this, targetInfo)) {
        targetCdpClient.sendCommand("Runtime.runIfWaitingForDebugger").then(() => parentSessionCdpClient.sendCommand("Target.detachFromTarget", params)).catch((error) => {
          var _a2;
          return (_a2 = __privateGet(this, _logger)) == null ? void 0 : _a2.call(this, log_js_1.LogType.system, error);
        });
        return;
      }
      (_a = __privateGet(this, _logger)) == null ? void 0 : _a.call(this, log_js_1.LogType.browsingContexts, "AttachedToTarget event received:", JSON.stringify(params, null, 2));
      __privateMethod(this, _setEventListeners, setEventListeners_fn).call(this, targetCdpClient);
      const maybeContext = __privateGet(this, _browsingContextStorage).findContext(targetInfo.targetId);
      const cdpTarget = cdpTarget_js_1.CdpTarget.create(targetInfo.targetId, (_b = maybeContext == null ? void 0 : maybeContext.parentId) != null ? _b : null, targetCdpClient, sessionId, __privateGet(this, _realmStorage), __privateGet(this, _eventManager), __privateGet(this, _preloadScriptStorage));
      if (maybeContext) {
        maybeContext.updateCdpTarget(cdpTarget);
      } else {
        browsingContextImpl_js_1.BrowsingContextImpl.create(cdpTarget, __privateGet(this, _realmStorage), targetInfo.targetId, null, __privateGet(this, _eventManager), __privateGet(this, _browsingContextStorage), __privateGet(this, _logger));
      }
    };
    _handleDetachedFromTargetEvent = new WeakSet();
    handleDetachedFromTargetEvent_fn = function(params) {
      var _a;
      const contextId = params.targetId;
      (_a = __privateGet(this, _browsingContextStorage).findContext(contextId)) == null ? void 0 : _a.delete();
      __privateGet(this, _preloadScriptStorage).findPreloadScripts({ targetId: contextId }).map((preloadScript) => preloadScript.cdpTargetIsGone(contextId));
    };
    _getRealm = new WeakSet();
    getRealm_fn = async function(target) {
      if ("realm" in target) {
        return __privateGet(this, _realmStorage).getRealm({
          realmId: target.realm
        });
      }
      const context = __privateGet(this, _browsingContextStorage).getContext(target.context);
      return context.getOrCreateSandbox(target.sandbox);
    };
    _getActionsByTick = new WeakSet();
    getActionsByTick_fn = function(params, inputState) {
      var _a, _b, _c;
      const actionsByTick = [];
      for (const action of params.actions) {
        switch (action.type) {
          case protocol_js_1.Input.SourceActionsType.Pointer: {
            (_a = action.parameters) != null ? _a : action.parameters = { pointerType: protocol_js_1.Input.PointerType.Mouse };
            (_c = (_b = action.parameters).pointerType) != null ? _c : _b.pointerType = protocol_js_1.Input.PointerType.Mouse;
            const source = inputState.getOrCreate(action.id, protocol_js_1.Input.SourceActionsType.Pointer, action.parameters.pointerType);
            if (source.subtype !== action.parameters.pointerType) {
              throw new protocol_js_1.Message.InvalidArgumentException(`Expected input source ${action.id} to be ${source.subtype}; got ${action.parameters.pointerType}.`);
            }
            break;
          }
          default:
            inputState.getOrCreate(action.id, action.type);
        }
        const actions = action.actions.map((item) => ({
          id: action.id,
          action: item
        }));
        for (let i = 0; i < actions.length; i++) {
          if (actionsByTick.length === i) {
            actionsByTick.push([]);
          }
          actionsByTick[i].push(actions[i]);
        }
      }
      return actionsByTick;
    };
    _isValidTarget = new WeakSet();
    isValidTarget_fn = function(target) {
      if (target.targetId === __privateGet(this, _selfTargetId)) {
        return false;
      }
      return ["page", "iframe"].includes(target.type);
    };
    exports.BrowsingContextProcessor = BrowsingContextProcessor;
  }
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/OutgoingBidiMessage.js
var require_OutgoingBidiMessage = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/bidiMapper/OutgoingBidiMessage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OutgoingBidiMessage = void 0;
    var _message, _channel;
    var _OutgoingBidiMessage = class {
      constructor(message, channel) {
        __privateAdd(this, _message, void 0);
        __privateAdd(this, _channel, void 0);
        __privateSet(this, _message, message);
        __privateSet(this, _channel, channel);
      }
      static async createFromPromise(messagePromise, channel) {
        return messagePromise.then((message) => new _OutgoingBidiMessage(message, channel));
      }
      static createResolved(message, channel) {
        return Promise.resolve(new _OutgoingBidiMessage(message, channel));
      }
      get message() {
        return __privateGet(this, _message);
      }
      get channel() {
        return __privateGet(this, _channel);
      }
    };
    var OutgoingBidiMessage = _OutgoingBidiMessage;
    _message = new WeakMap();
    _channel = new WeakMap();
    exports.OutgoingBidiMessage = OutgoingBidiMessage;
  }
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/CommandProcessor.js
var require_CommandProcessor = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/bidiMapper/CommandProcessor.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CommandProcessor = void 0;
    var protocol_js_1 = require_protocol();
    var log_js_1 = require_log();
    var EventEmitter_js_1 = require_EventEmitter();
    var browsingContextProcessor_js_1 = require_browsingContextProcessor();
    var OutgoingBidiMessage_js_1 = require_OutgoingBidiMessage();
    var BidiNoOpParser = class {
      parseAddPreloadScriptParams(params) {
        return params;
      }
      parseRemovePreloadScriptParams(params) {
        return params;
      }
      parseGetRealmsParams(params) {
        return params;
      }
      parseCallFunctionParams(params) {
        return params;
      }
      parseEvaluateParams(params) {
        return params;
      }
      parseDisownParams(params) {
        return params;
      }
      parseSendCommandParams(params) {
        return params;
      }
      parseGetSessionParams(params) {
        return params;
      }
      parseSubscribeParams(params) {
        return params;
      }
      parseNavigateParams(params) {
        return params;
      }
      parseReloadParams(params) {
        return params;
      }
      parseGetTreeParams(params) {
        return params;
      }
      parseCreateParams(params) {
        return params;
      }
      parseCloseParams(params) {
        return params;
      }
      parseCaptureScreenshotParams(params) {
        return params;
      }
      parsePrintParams(params) {
        return params;
      }
      parsePerformActionsParams(params) {
        return params;
      }
      parseReleaseActionsParams(params) {
        return params;
      }
    };
    var _contextProcessor, _eventManager, _parser, _logger, _process_session_status, process_session_status_fn, _process_session_subscribe, process_session_subscribe_fn, _process_session_unsubscribe, process_session_unsubscribe_fn, _processCommand, processCommand_fn;
    var _CommandProcessor = class extends EventEmitter_js_1.EventEmitter {
      constructor(realmStorage, cdpConnection, eventManager, selfTargetId, parser = new BidiNoOpParser(), browsingContextStorage, logger) {
        super();
        __privateAdd(this, _process_session_subscribe);
        __privateAdd(this, _process_session_unsubscribe);
        __privateAdd(this, _processCommand);
        __privateAdd(this, _contextProcessor, void 0);
        __privateAdd(this, _eventManager, void 0);
        __privateAdd(this, _parser, void 0);
        __privateAdd(this, _logger, void 0);
        __privateSet(this, _eventManager, eventManager);
        __privateSet(this, _logger, logger);
        __privateSet(this, _contextProcessor, new browsingContextProcessor_js_1.BrowsingContextProcessor(realmStorage, cdpConnection, selfTargetId, eventManager, browsingContextStorage, logger));
        __privateSet(this, _parser, parser);
      }
      async processCommand(command) {
        var _a, _b, _c, _d;
        try {
          const result = await __privateMethod(this, _processCommand, processCommand_fn).call(this, command);
          const response = {
            id: command.id,
            ...result
          };
          this.emit("response", OutgoingBidiMessage_js_1.OutgoingBidiMessage.createResolved(response, (_a = command.channel) != null ? _a : null));
        } catch (e) {
          if (e instanceof protocol_js_1.Message.ErrorResponse) {
            const errorResponse = e;
            this.emit("response", OutgoingBidiMessage_js_1.OutgoingBidiMessage.createResolved(errorResponse.toErrorResponse(command.id), (_b = command.channel) != null ? _b : null));
          } else {
            const error = e;
            (_c = __privateGet(this, _logger)) == null ? void 0 : _c.call(this, log_js_1.LogType.bidi, error);
            this.emit("response", OutgoingBidiMessage_js_1.OutgoingBidiMessage.createResolved(new protocol_js_1.Message.UnknownErrorException(error.message).toErrorResponse(command.id), (_d = command.channel) != null ? _d : null));
          }
        }
      }
    };
    var CommandProcessor = _CommandProcessor;
    _contextProcessor = new WeakMap();
    _eventManager = new WeakMap();
    _parser = new WeakMap();
    _logger = new WeakMap();
    _process_session_status = new WeakSet();
    process_session_status_fn = function() {
      return { result: { ready: false, message: "already connected" } };
    };
    _process_session_subscribe = new WeakSet();
    process_session_subscribe_fn = async function(params, channel) {
      var _a;
      await __privateGet(this, _eventManager).subscribe(params.events, (_a = params.contexts) != null ? _a : [null], channel);
      return { result: {} };
    };
    _process_session_unsubscribe = new WeakSet();
    process_session_unsubscribe_fn = async function(params, channel) {
      var _a;
      await __privateGet(this, _eventManager).unsubscribe(params.events, (_a = params.contexts) != null ? _a : [null], channel);
      return { result: {} };
    };
    _processCommand = new WeakSet();
    processCommand_fn = async function(commandData) {
      var _a, _b, _c;
      switch (commandData.method) {
        case "session.status":
          return __privateMethod(_a = _CommandProcessor, _process_session_status, process_session_status_fn).call(_a);
        case "session.subscribe":
          return __privateMethod(this, _process_session_subscribe, process_session_subscribe_fn).call(this, __privateGet(this, _parser).parseSubscribeParams(commandData.params), (_b = commandData.channel) != null ? _b : null);
        case "session.unsubscribe":
          return __privateMethod(this, _process_session_unsubscribe, process_session_unsubscribe_fn).call(this, __privateGet(this, _parser).parseSubscribeParams(commandData.params), (_c = commandData.channel) != null ? _c : null);
        case "browsingContext.create":
          return __privateGet(this, _contextProcessor).process_browsingContext_create(__privateGet(this, _parser).parseCreateParams(commandData.params));
        case "browsingContext.close":
          return __privateGet(this, _contextProcessor).process_browsingContext_close(__privateGet(this, _parser).parseCloseParams(commandData.params));
        case "browsingContext.getTree":
          return __privateGet(this, _contextProcessor).process_browsingContext_getTree(__privateGet(this, _parser).parseGetTreeParams(commandData.params));
        case "browsingContext.navigate":
          return __privateGet(this, _contextProcessor).process_browsingContext_navigate(__privateGet(this, _parser).parseNavigateParams(commandData.params));
        case "browsingContext.captureScreenshot":
          return __privateGet(this, _contextProcessor).process_browsingContext_captureScreenshot(__privateGet(this, _parser).parseCaptureScreenshotParams(commandData.params));
        case "browsingContext.print":
          return __privateGet(this, _contextProcessor).process_browsingContext_print(__privateGet(this, _parser).parsePrintParams(commandData.params));
        case "browsingContext.reload":
          return __privateGet(this, _contextProcessor).process_browsingContext_reload(__privateGet(this, _parser).parseReloadParams(commandData.params));
        case "script.addPreloadScript":
          return __privateGet(this, _contextProcessor).process_script_addPreloadScript(__privateGet(this, _parser).parseAddPreloadScriptParams(commandData.params));
        case "script.removePreloadScript":
          return __privateGet(this, _contextProcessor).process_script_removePreloadScript(__privateGet(this, _parser).parseRemovePreloadScriptParams(commandData.params));
        case "script.getRealms":
          return __privateGet(this, _contextProcessor).process_script_getRealms(__privateGet(this, _parser).parseGetRealmsParams(commandData.params));
        case "script.callFunction":
          return __privateGet(this, _contextProcessor).process_script_callFunction(__privateGet(this, _parser).parseCallFunctionParams(commandData.params));
        case "script.evaluate":
          return __privateGet(this, _contextProcessor).process_script_evaluate(__privateGet(this, _parser).parseEvaluateParams(commandData.params));
        case "script.disown":
          return __privateGet(this, _contextProcessor).process_script_disown(__privateGet(this, _parser).parseDisownParams(commandData.params));
        case "input.performActions":
          return __privateGet(this, _contextProcessor).process_input_performActions(__privateGet(this, _parser).parsePerformActionsParams(commandData.params));
        case "input.releaseActions":
          return __privateGet(this, _contextProcessor).process_input_releaseActions(__privateGet(this, _parser).parseReleaseActionsParams(commandData.params));
        case "cdp.sendCommand":
          return __privateGet(this, _contextProcessor).process_cdp_sendCommand(__privateGet(this, _parser).parseSendCommandParams(commandData.params));
        case "cdp.getSession":
          return __privateGet(this, _contextProcessor).process_cdp_getSession(__privateGet(this, _parser).parseGetSessionParams(commandData.params));
      }
      throw new protocol_js_1.Message.UnknownCommandException(`Unknown command '${commandData.method}'.`);
    };
    __privateAdd(CommandProcessor, _process_session_status);
    exports.CommandProcessor = CommandProcessor;
  }
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/context/browsingContextStorage.js
var require_browsingContextStorage = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/context/browsingContextStorage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BrowsingContextStorage = void 0;
    var protocol_js_1 = require_protocol();
    var _contexts;
    var BrowsingContextStorage = class {
      constructor() {
        __privateAdd(this, _contexts, /* @__PURE__ */ new Map());
      }
      getTopLevelContexts() {
        return this.getAllContexts().filter((context) => context.isTopLevelContext());
      }
      getAllContexts() {
        return Array.from(__privateGet(this, _contexts).values());
      }
      deleteContextById(id) {
        __privateGet(this, _contexts).delete(id);
      }
      deleteContext(context) {
        __privateGet(this, _contexts).delete(context.id);
      }
      addContext(context) {
        __privateGet(this, _contexts).set(context.id, context);
      }
      hasContext(id) {
        return __privateGet(this, _contexts).has(id);
      }
      findContext(id) {
        return __privateGet(this, _contexts).get(id);
      }
      findTopLevelContextId(id) {
        var _a;
        if (id === null) {
          return null;
        }
        const maybeContext = this.findContext(id);
        const parentId = (_a = maybeContext == null ? void 0 : maybeContext.parentId) != null ? _a : null;
        if (parentId === null) {
          return id;
        }
        return this.findTopLevelContextId(parentId);
      }
      getContext(id) {
        const result = this.findContext(id);
        if (result === void 0) {
          throw new protocol_js_1.Message.NoSuchFrameException(`Context ${id} not found`);
        }
        return result;
      }
    };
    _contexts = new WeakMap();
    exports.BrowsingContextStorage = BrowsingContextStorage;
  }
});

// node_modules/chromium-bidi/lib/cjs/utils/buffer.js
var require_buffer = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/utils/buffer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Buffer = void 0;
    var _capacity, _entries, _onItemRemoved;
    var Buffer2 = class {
      constructor(capacity, onItemRemoved) {
        __privateAdd(this, _capacity, void 0);
        __privateAdd(this, _entries, []);
        __privateAdd(this, _onItemRemoved, void 0);
        __privateSet(this, _capacity, capacity);
        __privateSet(this, _onItemRemoved, onItemRemoved);
      }
      get() {
        return __privateGet(this, _entries);
      }
      add(value) {
        var _a;
        __privateGet(this, _entries).push(value);
        while (__privateGet(this, _entries).length > __privateGet(this, _capacity)) {
          const item = __privateGet(this, _entries).shift();
          if (item !== void 0) {
            (_a = __privateGet(this, _onItemRemoved)) == null ? void 0 : _a.call(this, item);
          }
        }
      }
    };
    _capacity = new WeakMap();
    _entries = new WeakMap();
    _onItemRemoved = new WeakMap();
    exports.Buffer = Buffer2;
  }
});

// node_modules/chromium-bidi/lib/cjs/utils/idWrapper.js
var require_idWrapper = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/utils/idWrapper.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IdWrapper = void 0;
    var _counter, _id;
    var _IdWrapper = class {
      constructor() {
        __privateAdd(this, _id, void 0);
        __privateSet(this, _id, ++__privateWrapper(_IdWrapper, _counter)._);
      }
      get id() {
        return __privateGet(this, _id);
      }
    };
    var IdWrapper = _IdWrapper;
    _counter = new WeakMap();
    _id = new WeakMap();
    __privateAdd(IdWrapper, _counter, 0);
    exports.IdWrapper = IdWrapper;
  }
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/events/SubscriptionManager.js
var require_SubscriptionManager = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/events/SubscriptionManager.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SubscriptionManager = exports.unrollEvents = exports.cartesianProduct = void 0;
    var protocol_js_1 = require_protocol();
    function cartesianProduct(...a) {
      return a.reduce((a2, b) => a2.flatMap((d) => b.map((e) => [d, e].flat())));
    }
    exports.cartesianProduct = cartesianProduct;
    function unrollEvents(events) {
      const allEvents = [];
      for (const event of events) {
        switch (event) {
          case protocol_js_1.BrowsingContext.AllEvents:
            allEvents.push(...Object.values(protocol_js_1.BrowsingContext.EventNames));
            break;
          case protocol_js_1.CDP.AllEvents:
            allEvents.push(...Object.values(protocol_js_1.CDP.EventNames));
            break;
          case protocol_js_1.Log.AllEvents:
            allEvents.push(...Object.values(protocol_js_1.Log.EventNames));
            break;
          case protocol_js_1.Network.AllEvents:
            allEvents.push(...Object.values(protocol_js_1.Network.EventNames));
            break;
          case protocol_js_1.Script.AllEvents:
            allEvents.push(...Object.values(protocol_js_1.Script.EventNames));
            break;
          default:
            allEvents.push(event);
        }
      }
      return allEvents;
    }
    exports.unrollEvents = unrollEvents;
    var _subscriptionPriority, _channelToContextToEventMap, _browsingContextStorage, _getEventSubscriptionPriorityForChannel, getEventSubscriptionPriorityForChannel_fn, _checkUnsubscribe, checkUnsubscribe_fn;
    var SubscriptionManager = class {
      constructor(browsingContextStorage) {
        __privateAdd(this, _getEventSubscriptionPriorityForChannel);
        __privateAdd(this, _checkUnsubscribe);
        __privateAdd(this, _subscriptionPriority, 0);
        __privateAdd(this, _channelToContextToEventMap, /* @__PURE__ */ new Map());
        __privateAdd(this, _browsingContextStorage, void 0);
        __privateSet(this, _browsingContextStorage, browsingContextStorage);
      }
      getChannelsSubscribedToEvent(eventMethod, contextId) {
        const prioritiesAndChannels = Array.from(__privateGet(this, _channelToContextToEventMap).keys()).map((channel) => ({
          priority: __privateMethod(this, _getEventSubscriptionPriorityForChannel, getEventSubscriptionPriorityForChannel_fn).call(this, eventMethod, contextId, channel),
          channel
        })).filter(({ priority }) => priority !== null);
        return prioritiesAndChannels.sort((a, b) => a.priority - b.priority).map(({ channel }) => channel);
      }
      subscribe(event, contextId, channel) {
        contextId = __privateGet(this, _browsingContextStorage).findTopLevelContextId(contextId);
        if (event === protocol_js_1.BrowsingContext.AllEvents) {
          Object.values(protocol_js_1.BrowsingContext.EventNames).map((specificEvent) => this.subscribe(specificEvent, contextId, channel));
          return;
        }
        if (event === protocol_js_1.CDP.AllEvents) {
          Object.values(protocol_js_1.CDP.EventNames).map((specificEvent) => this.subscribe(specificEvent, contextId, channel));
          return;
        }
        if (event === protocol_js_1.Log.AllEvents) {
          Object.values(protocol_js_1.Log.EventNames).map((specificEvent) => this.subscribe(specificEvent, contextId, channel));
          return;
        }
        if (event === protocol_js_1.Network.AllEvents) {
          Object.values(protocol_js_1.Network.EventNames).map((specificEvent) => this.subscribe(specificEvent, contextId, channel));
          return;
        }
        if (event === protocol_js_1.Script.AllEvents) {
          Object.values(protocol_js_1.Script.EventNames).map((specificEvent) => this.subscribe(specificEvent, contextId, channel));
          return;
        }
        if (!__privateGet(this, _channelToContextToEventMap).has(channel)) {
          __privateGet(this, _channelToContextToEventMap).set(channel, /* @__PURE__ */ new Map());
        }
        const contextToEventMap = __privateGet(this, _channelToContextToEventMap).get(channel);
        if (!contextToEventMap.has(contextId)) {
          contextToEventMap.set(contextId, /* @__PURE__ */ new Map());
        }
        const eventMap = contextToEventMap.get(contextId);
        if (eventMap.has(event)) {
          return;
        }
        eventMap.set(event, __privateWrapper(this, _subscriptionPriority)._++);
      }
      unsubscribeAll(events, contextIds, channel) {
        for (const contextId of contextIds) {
          if (contextId !== null) {
            __privateGet(this, _browsingContextStorage).getContext(contextId);
          }
        }
        const eventContextPairs = cartesianProduct(unrollEvents(events), contextIds);
        eventContextPairs.map(([event, contextId]) => __privateMethod(this, _checkUnsubscribe, checkUnsubscribe_fn).call(this, event, contextId, channel)).forEach((unsubscribe) => unsubscribe());
      }
      unsubscribe(eventName, contextId, channel) {
        this.unsubscribeAll([eventName], [contextId], channel);
      }
    };
    _subscriptionPriority = new WeakMap();
    _channelToContextToEventMap = new WeakMap();
    _browsingContextStorage = new WeakMap();
    _getEventSubscriptionPriorityForChannel = new WeakSet();
    getEventSubscriptionPriorityForChannel_fn = function(eventMethod, contextId, channel) {
      const contextToEventMap = __privateGet(this, _channelToContextToEventMap).get(channel);
      if (contextToEventMap === void 0) {
        return null;
      }
      const maybeTopLevelContextId = __privateGet(this, _browsingContextStorage).findTopLevelContextId(contextId);
      const relevantContexts = [.../* @__PURE__ */ new Set([null, maybeTopLevelContextId])];
      const priorities = relevantContexts.map((c) => {
        var _a;
        return (_a = contextToEventMap.get(c)) == null ? void 0 : _a.get(eventMethod);
      }).filter((p) => p !== void 0);
      if (priorities.length === 0) {
        return null;
      }
      return Math.min(...priorities);
    };
    _checkUnsubscribe = new WeakSet();
    checkUnsubscribe_fn = function(event, contextId, channel) {
      contextId = __privateGet(this, _browsingContextStorage).findTopLevelContextId(contextId);
      if (!__privateGet(this, _channelToContextToEventMap).has(channel)) {
        throw new protocol_js_1.Message.InvalidArgumentException(`Cannot unsubscribe from ${event}, ${contextId === null ? "null" : contextId}. No subscription found.`);
      }
      const contextToEventMap = __privateGet(this, _channelToContextToEventMap).get(channel);
      if (!contextToEventMap.has(contextId)) {
        throw new protocol_js_1.Message.InvalidArgumentException(`Cannot unsubscribe from ${event}, ${contextId === null ? "null" : contextId}. No subscription found.`);
      }
      const eventMap = contextToEventMap.get(contextId);
      if (!eventMap.has(event)) {
        throw new protocol_js_1.Message.InvalidArgumentException(`Cannot unsubscribe from ${event}, ${contextId === null ? "null" : contextId}. No subscription found.`);
      }
      return () => {
        eventMap.delete(event);
        if (eventMap.size === 0) {
          contextToEventMap.delete(event);
        }
        if (contextToEventMap.size === 0) {
          __privateGet(this, _channelToContextToEventMap).delete(channel);
        }
      };
    };
    exports.SubscriptionManager = SubscriptionManager;
  }
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/events/EventManager.js
var require_EventManager = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/events/EventManager.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EventManager = void 0;
    var protocol_js_1 = require_protocol();
    var buffer_js_1 = require_buffer();
    var idWrapper_js_1 = require_idWrapper();
    var OutgoingBidiMessage_js_1 = require_OutgoingBidiMessage();
    var DefaultMap_js_1 = require_DefaultMap();
    var SubscriptionManager_js_1 = require_SubscriptionManager();
    var _idWrapper, _contextId, _event;
    var EventWrapper = class {
      constructor(event, contextId) {
        __privateAdd(this, _idWrapper, void 0);
        __privateAdd(this, _contextId, void 0);
        __privateAdd(this, _event, void 0);
        __privateSet(this, _idWrapper, new idWrapper_js_1.IdWrapper());
        __privateSet(this, _contextId, contextId);
        __privateSet(this, _event, event);
      }
      get id() {
        return __privateGet(this, _idWrapper).id;
      }
      get contextId() {
        return __privateGet(this, _contextId);
      }
      get event() {
        return __privateGet(this, _event);
      }
    };
    _idWrapper = new WeakMap();
    _contextId = new WeakMap();
    _event = new WeakMap();
    var eventBufferLength = /* @__PURE__ */ new Map([
      [protocol_js_1.Log.EventNames.LogEntryAddedEvent, 100]
    ]);
    var _NETWORK_DOMAIN_PREFIX, _eventToContextsMap, _eventBuffers, _lastMessageSent, _subscriptionManager, _bidiServer, _isNetworkDomainEnabled, _getMapKey, getMapKey_fn, _handleDomains, handleDomains_fn, _bufferEvent, bufferEvent_fn, _markEventSent, markEventSent_fn, _getBufferedEvents, getBufferedEvents_fn;
    var _EventManager = class {
      constructor(bidiServer) {
        __privateAdd(this, _handleDomains);
        __privateAdd(this, _bufferEvent);
        __privateAdd(this, _markEventSent);
        __privateAdd(this, _getBufferedEvents);
        __privateAdd(this, _eventToContextsMap, new DefaultMap_js_1.DefaultMap(() => /* @__PURE__ */ new Set()));
        __privateAdd(this, _eventBuffers, /* @__PURE__ */ new Map());
        __privateAdd(this, _lastMessageSent, /* @__PURE__ */ new Map());
        __privateAdd(this, _subscriptionManager, void 0);
        __privateAdd(this, _bidiServer, void 0);
        __privateAdd(this, _isNetworkDomainEnabled, void 0);
        __privateSet(this, _bidiServer, bidiServer);
        __privateSet(this, _subscriptionManager, new SubscriptionManager_js_1.SubscriptionManager(bidiServer.getBrowsingContextStorage()));
        __privateSet(this, _isNetworkDomainEnabled, false);
      }
      get isNetworkDomainEnabled() {
        return __privateGet(this, _isNetworkDomainEnabled);
      }
      registerEvent(event, contextId) {
        this.registerPromiseEvent(Promise.resolve(event), contextId, event.method);
      }
      registerPromiseEvent(event, contextId, eventName) {
        const eventWrapper = new EventWrapper(event, contextId);
        const sortedChannels = __privateGet(this, _subscriptionManager).getChannelsSubscribedToEvent(eventName, contextId);
        __privateMethod(this, _bufferEvent, bufferEvent_fn).call(this, eventWrapper, eventName);
        for (const channel of sortedChannels) {
          __privateGet(this, _bidiServer).emitOutgoingMessage(OutgoingBidiMessage_js_1.OutgoingBidiMessage.createFromPromise(event, channel));
          __privateMethod(this, _markEventSent, markEventSent_fn).call(this, eventWrapper, channel, eventName);
        }
      }
      async subscribe(eventNames, contextIds, channel) {
        for (const contextId of contextIds) {
          if (contextId !== null) {
            __privateGet(this, _bidiServer).getBrowsingContextStorage().getContext(contextId);
          }
        }
        for (const eventName of eventNames) {
          for (const contextId of contextIds) {
            await __privateMethod(this, _handleDomains, handleDomains_fn).call(this, eventName, contextId);
            __privateGet(this, _subscriptionManager).subscribe(eventName, contextId, channel);
            for (const eventWrapper of __privateMethod(this, _getBufferedEvents, getBufferedEvents_fn).call(this, eventName, contextId, channel)) {
              __privateGet(this, _bidiServer).emitOutgoingMessage(OutgoingBidiMessage_js_1.OutgoingBidiMessage.createFromPromise(eventWrapper.event, channel));
              __privateMethod(this, _markEventSent, markEventSent_fn).call(this, eventWrapper, channel, eventName);
            }
          }
        }
      }
      unsubscribe(eventNames, contextIds, channel) {
        __privateGet(this, _subscriptionManager).unsubscribeAll(eventNames, contextIds, channel);
      }
    };
    var EventManager = _EventManager;
    _NETWORK_DOMAIN_PREFIX = new WeakMap();
    _eventToContextsMap = new WeakMap();
    _eventBuffers = new WeakMap();
    _lastMessageSent = new WeakMap();
    _subscriptionManager = new WeakMap();
    _bidiServer = new WeakMap();
    _isNetworkDomainEnabled = new WeakMap();
    _getMapKey = new WeakSet();
    getMapKey_fn = function(eventName, browsingContext, channel) {
      return JSON.stringify({ eventName, browsingContext, channel });
    };
    _handleDomains = new WeakSet();
    handleDomains_fn = async function(eventName, contextId) {
      if (eventName.startsWith(__privateGet(_EventManager, _NETWORK_DOMAIN_PREFIX))) {
        if (contextId === null) {
          __privateSet(this, _isNetworkDomainEnabled, true);
          await Promise.all(__privateGet(this, _bidiServer).getBrowsingContextStorage().getAllContexts().map((context) => context.cdpTarget.enableNetworkDomain()));
        } else {
          await __privateGet(this, _bidiServer).getBrowsingContextStorage().getContext(contextId).cdpTarget.enableNetworkDomain();
        }
      }
    };
    _bufferEvent = new WeakSet();
    bufferEvent_fn = function(eventWrapper, eventName) {
      var _a;
      if (!eventBufferLength.has(eventName)) {
        return;
      }
      const bufferMapKey = __privateMethod(_a = _EventManager, _getMapKey, getMapKey_fn).call(_a, eventName, eventWrapper.contextId);
      if (!__privateGet(this, _eventBuffers).has(bufferMapKey)) {
        __privateGet(this, _eventBuffers).set(bufferMapKey, new buffer_js_1.Buffer(eventBufferLength.get(eventName)));
      }
      __privateGet(this, _eventBuffers).get(bufferMapKey).add(eventWrapper);
      __privateGet(this, _eventToContextsMap).get(eventName).add(eventWrapper.contextId);
    };
    _markEventSent = new WeakSet();
    markEventSent_fn = function(eventWrapper, channel, eventName) {
      var _a, _b;
      if (!eventBufferLength.has(eventName)) {
        return;
      }
      const lastSentMapKey = __privateMethod(_a = _EventManager, _getMapKey, getMapKey_fn).call(_a, eventName, eventWrapper.contextId, channel);
      __privateGet(this, _lastMessageSent).set(lastSentMapKey, Math.max((_b = __privateGet(this, _lastMessageSent).get(lastSentMapKey)) != null ? _b : 0, eventWrapper.id));
    };
    _getBufferedEvents = new WeakSet();
    getBufferedEvents_fn = function(eventName, contextId, channel) {
      var _a, _b, _c, _d, _e;
      const bufferMapKey = __privateMethod(_a = _EventManager, _getMapKey, getMapKey_fn).call(_a, eventName, contextId);
      const lastSentMapKey = __privateMethod(_b = _EventManager, _getMapKey, getMapKey_fn).call(_b, eventName, contextId, channel);
      const lastSentMessageId = (_c = __privateGet(this, _lastMessageSent).get(lastSentMapKey)) != null ? _c : -Infinity;
      const result = (_e = (_d = __privateGet(this, _eventBuffers).get(bufferMapKey)) == null ? void 0 : _d.get().filter((wrapper) => wrapper.id > lastSentMessageId)) != null ? _e : [];
      if (contextId === null) {
        Array.from(__privateGet(this, _eventToContextsMap).get(eventName).keys()).filter((_contextId2) => _contextId2 !== null && __privateGet(this, _bidiServer).getBrowsingContextStorage().hasContext(_contextId2)).map((_contextId2) => __privateMethod(this, _getBufferedEvents, getBufferedEvents_fn).call(this, eventName, _contextId2, channel)).forEach((events) => result.push(...events));
      }
      return result.sort((e1, e2) => e1.id - e2.id);
    };
    __privateAdd(EventManager, _getMapKey);
    __privateAdd(EventManager, _NETWORK_DOMAIN_PREFIX, "network");
    exports.EventManager = EventManager;
  }
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/script/realmStorage.js
var require_realmStorage = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/script/realmStorage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RealmStorage = void 0;
    var protocol_js_1 = require_protocol();
    var _knownHandlesToRealm, _realmMap;
    var RealmStorage = class {
      constructor() {
        __privateAdd(this, _knownHandlesToRealm, /* @__PURE__ */ new Map());
        __privateAdd(this, _realmMap, /* @__PURE__ */ new Map());
      }
      get knownHandlesToRealm() {
        return __privateGet(this, _knownHandlesToRealm);
      }
      get realmMap() {
        return __privateGet(this, _realmMap);
      }
      findRealms(filter) {
        return Array.from(__privateGet(this, _realmMap).values()).filter((realm) => {
          if (filter.realmId !== void 0 && filter.realmId !== realm.realmId) {
            return false;
          }
          if (filter.browsingContextId !== void 0 && filter.browsingContextId !== realm.browsingContextId) {
            return false;
          }
          if (filter.navigableId !== void 0 && filter.navigableId !== realm.navigableId) {
            return false;
          }
          if (filter.executionContextId !== void 0 && filter.executionContextId !== realm.executionContextId) {
            return false;
          }
          if (filter.origin !== void 0 && filter.origin !== realm.origin) {
            return false;
          }
          if (filter.type !== void 0 && filter.type !== realm.type) {
            return false;
          }
          if (filter.sandbox !== void 0 && filter.sandbox !== realm.sandbox) {
            return false;
          }
          if (filter.cdpSessionId !== void 0 && filter.cdpSessionId !== realm.cdpSessionId) {
            return false;
          }
          return true;
        });
      }
      findRealm(filter) {
        const maybeRealms = this.findRealms(filter);
        if (maybeRealms.length !== 1) {
          return void 0;
        }
        return maybeRealms[0];
      }
      getRealm(filter) {
        const maybeRealm = this.findRealm(filter);
        if (maybeRealm === void 0) {
          throw new protocol_js_1.Message.NoSuchFrameException(`Realm ${JSON.stringify(filter)} not found`);
        }
        return maybeRealm;
      }
      deleteRealms(filter) {
        this.findRealms(filter).map((realm) => {
          __privateGet(this, _realmMap).delete(realm.realmId);
          Array.from(__privateGet(this, _knownHandlesToRealm).entries()).filter(([, r]) => r === realm.realmId).map(([handle]) => __privateGet(this, _knownHandlesToRealm).delete(handle));
        });
      }
    };
    _knownHandlesToRealm = new WeakMap();
    _realmMap = new WeakMap();
    exports.RealmStorage = RealmStorage;
  }
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/BidiServer.js
var require_BidiServer = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/bidiMapper/BidiServer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BidiServer = void 0;
    var EventEmitter_js_1 = require_EventEmitter();
    var log_js_1 = require_log();
    var processingQueue_js_1 = require_processingQueue();
    var CommandProcessor_js_1 = require_CommandProcessor();
    var browsingContextStorage_js_1 = require_browsingContextStorage();
    var EventManager_js_1 = require_EventManager();
    var realmStorage_js_1 = require_realmStorage();
    var _messageQueue, _transport, _commandProcessor, _browsingContextStorage, _realmStorage, _logger, _handleIncomingMessage, _processOutgoingMessage;
    var _BidiServer = class extends EventEmitter_js_1.EventEmitter {
      constructor(bidiTransport, cdpConnection, selfTargetId, parser, logger) {
        super();
        __privateAdd(this, _messageQueue, void 0);
        __privateAdd(this, _transport, void 0);
        __privateAdd(this, _commandProcessor, void 0);
        __privateAdd(this, _browsingContextStorage, void 0);
        __privateAdd(this, _realmStorage, void 0);
        __privateAdd(this, _logger, void 0);
        __privateAdd(this, _handleIncomingMessage, (message) => {
          void __privateGet(this, _commandProcessor).processCommand(message).catch((error) => {
            var _a;
            (_a = __privateGet(this, _logger)) == null ? void 0 : _a.call(this, log_js_1.LogType.system, error);
          });
        });
        __privateAdd(this, _processOutgoingMessage, async (messageEntry) => {
          const message = messageEntry.message;
          if (messageEntry.channel !== null) {
            message["channel"] = messageEntry.channel;
          }
          await __privateGet(this, _transport).sendMessage(message);
        });
        __privateSet(this, _logger, logger);
        __privateSet(this, _browsingContextStorage, new browsingContextStorage_js_1.BrowsingContextStorage());
        __privateSet(this, _realmStorage, new realmStorage_js_1.RealmStorage());
        __privateSet(this, _messageQueue, new processingQueue_js_1.ProcessingQueue(__privateGet(this, _processOutgoingMessage), __privateGet(this, _logger)));
        __privateSet(this, _transport, bidiTransport);
        __privateGet(this, _transport).setOnMessage(__privateGet(this, _handleIncomingMessage));
        __privateSet(this, _commandProcessor, new CommandProcessor_js_1.CommandProcessor(__privateGet(this, _realmStorage), cdpConnection, new EventManager_js_1.EventManager(this), selfTargetId, parser, __privateGet(this, _browsingContextStorage), __privateGet(this, _logger)));
        __privateGet(this, _commandProcessor).on("response", (response) => {
          this.emitOutgoingMessage(response);
        });
      }
      static async createAndStart(bidiTransport, cdpConnection, selfTargetId, parser, logger) {
        const server = new _BidiServer(bidiTransport, cdpConnection, selfTargetId, parser, logger);
        const cdpClient = cdpConnection.browserClient();
        await cdpClient.sendCommand("Target.setDiscoverTargets", { discover: true });
        await cdpClient.sendCommand("Target.setAutoAttach", {
          autoAttach: true,
          waitForDebuggerOnStart: true,
          flatten: true
        });
        await server.topLevelContextsLoaded();
        return server;
      }
      async topLevelContextsLoaded() {
        await Promise.all(__privateGet(this, _browsingContextStorage).getTopLevelContexts().map((c) => c.awaitLoaded()));
      }
      emitOutgoingMessage(messageEntry) {
        __privateGet(this, _messageQueue).add(messageEntry);
      }
      close() {
        __privateGet(this, _transport).close();
      }
      getBrowsingContextStorage() {
        return __privateGet(this, _browsingContextStorage);
      }
    };
    var BidiServer2 = _BidiServer;
    _messageQueue = new WeakMap();
    _transport = new WeakMap();
    _commandProcessor = new WeakMap();
    _browsingContextStorage = new WeakMap();
    _realmStorage = new WeakMap();
    _logger = new WeakMap();
    _handleIncomingMessage = new WeakMap();
    _processOutgoingMessage = new WeakMap();
    exports.BidiServer = BidiServer2;
  }
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/bidiMapper.js
var require_bidiMapper = __commonJS({
  "node_modules/chromium-bidi/lib/cjs/bidiMapper/bidiMapper.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OutgoingBidiMessage = exports.EventEmitter = exports.BidiServer = void 0;
    var BidiServer_js_1 = require_BidiServer();
    Object.defineProperty(exports, "BidiServer", { enumerable: true, get: function() {
      return BidiServer_js_1.BidiServer;
    } });
    var EventEmitter_js_1 = require_EventEmitter();
    Object.defineProperty(exports, "EventEmitter", { enumerable: true, get: function() {
      return EventEmitter_js_1.EventEmitter;
    } });
    var OutgoingBidiMessage_js_1 = require_OutgoingBidiMessage();
    Object.defineProperty(exports, "OutgoingBidiMessage", { enumerable: true, get: function() {
      return OutgoingBidiMessage_js_1.OutgoingBidiMessage;
    } });
  }
});

// node_modules/puppeteer-core/lib/esm/puppeteer/common/bidi/Serializer.js
var UnserializableError = class extends Error {
};
var BidiSerializer = class {
  static serializeNumber(arg) {
    let value;
    if (Object.is(arg, -0)) {
      value = "-0";
    } else if (Object.is(arg, Infinity)) {
      value = "Infinity";
    } else if (Object.is(arg, -Infinity)) {
      value = "-Infinity";
    } else if (Object.is(arg, NaN)) {
      value = "NaN";
    } else {
      value = arg;
    }
    return {
      type: "number",
      value
    };
  }
  static serializeObject(arg) {
    if (arg === null) {
      return {
        type: "null"
      };
    } else if (Array.isArray(arg)) {
      const parsedArray = arg.map((subArg) => {
        return BidiSerializer.serializeRemoveValue(subArg);
      });
      return {
        type: "array",
        value: parsedArray
      };
    } else if (isPlainObject(arg)) {
      try {
        JSON.stringify(arg);
      } catch (error) {
        if (error instanceof TypeError && error.message.startsWith("Converting circular structure to JSON")) {
          error.message += " Recursive objects are not allowed.";
        }
        throw error;
      }
      const parsedObject = [];
      for (const key in arg) {
        parsedObject.push([
          BidiSerializer.serializeRemoveValue(key),
          BidiSerializer.serializeRemoveValue(arg[key])
        ]);
      }
      return {
        type: "object",
        value: parsedObject
      };
    } else if (isRegExp(arg)) {
      return {
        type: "regexp",
        value: {
          pattern: arg.source,
          flags: arg.flags
        }
      };
    } else if (isDate(arg)) {
      return {
        type: "date",
        value: arg.toISOString()
      };
    }
    throw new UnserializableError("Custom object sterilization not possible. Use plain objects instead.");
  }
  static serializeRemoveValue(arg) {
    switch (typeof arg) {
      case "symbol":
      case "function":
        throw new UnserializableError(`Unable to serializable ${typeof arg}`);
      case "object":
        return BidiSerializer.serializeObject(arg);
      case "undefined":
        return {
          type: "undefined"
        };
      case "number":
        return BidiSerializer.serializeNumber(arg);
      case "bigint":
        return {
          type: "bigint",
          value: arg.toString()
        };
      case "string":
        return {
          type: "string",
          value: arg
        };
      case "boolean":
        return {
          type: "boolean",
          value: arg
        };
    }
  }
  static async serialize(arg, context) {
    if (arg instanceof LazyArg) {
      arg = await arg.get(context);
    }
    const objectHandle = arg && (arg instanceof JSHandle2 || arg instanceof ElementHandle2) ? arg : null;
    if (objectHandle) {
      if (objectHandle.context() !== context && !("sharedId" in objectHandle.remoteValue())) {
        throw new Error("JSHandles can be evaluated only in the context they were created!");
      }
      if (objectHandle.disposed) {
        throw new Error("JSHandle is disposed!");
      }
      return objectHandle.remoteValue();
    }
    return BidiSerializer.serializeRemoveValue(arg);
  }
  static deserializeNumber(value) {
    switch (value) {
      case "-0":
        return -0;
      case "NaN":
        return NaN;
      case "Infinity":
        return Infinity;
      case "-Infinity":
        return -Infinity;
      default:
        return value;
    }
  }
  static deserializeLocalValue(result) {
    var _a;
    switch (result.type) {
      case "array":
        return (_a = result.value) == null ? void 0 : _a.map((value) => {
          return BidiSerializer.deserializeLocalValue(value);
        });
      case "set":
        return result.value.reduce((acc, value) => {
          return acc.add(BidiSerializer.deserializeLocalValue(value));
        }, /* @__PURE__ */ new Set());
      case "object":
        if (result.value) {
          return result.value.reduce((acc, tuple) => {
            const { key, value } = BidiSerializer.deserializeTuple(tuple);
            acc[key] = value;
            return acc;
          }, {});
        }
        break;
      case "map":
        return result.value.reduce((acc, tuple) => {
          const { key, value } = BidiSerializer.deserializeTuple(tuple);
          return acc.set(key, value);
        }, /* @__PURE__ */ new Map());
      case "promise":
        return {};
      case "regexp":
        return new RegExp(result.value.pattern, result.value.flags);
      case "date":
        return new Date(result.value);
      case "undefined":
        return void 0;
      case "null":
        return null;
      case "number":
        return BidiSerializer.deserializeNumber(result.value);
      case "bigint":
        return BigInt(result.value);
      case "boolean":
        return Boolean(result.value);
      case "string":
        return result.value;
    }
    throw new UnserializableError(`Deserialization of type ${result.type} not supported.`);
  }
  static deserializeTuple([serializedKey, serializedValue]) {
    const key = typeof serializedKey === "string" ? serializedKey : BidiSerializer.deserializeLocalValue(serializedKey);
    const value = BidiSerializer.deserializeLocalValue(serializedValue);
    return { key, value };
  }
  static deserialize(result) {
    if (!result) {
      debugError("Service did not produce a result.");
      return void 0;
    }
    try {
      return BidiSerializer.deserializeLocalValue(result);
    } catch (error) {
      if (error instanceof UnserializableError) {
        debugError(error.message);
        return void 0;
      }
      throw error;
    }
  }
};

// node_modules/puppeteer-core/lib/esm/puppeteer/common/bidi/utils.js
var debugError2 = debug("puppeteer:error");
async function releaseReference(client, remoteReference) {
  if (!remoteReference.handle) {
    return;
  }
  await client.connection.send("script.disown", {
    target: client.target,
    handles: [remoteReference.handle]
  }).catch((error) => {
    debugError2(error);
  });
}
function createEvaluationError(details) {
  if (details.exception.type !== "error") {
    return BidiSerializer.deserialize(details.exception);
  }
  const [name = "", ...parts] = details.text.split(": ");
  const message = parts.join(": ");
  const error = new Error(message);
  error.name = name;
  const stackLines = [];
  if (details.stackTrace && stackLines.length < Error.stackTraceLimit) {
    for (const frame of details.stackTrace.callFrames.reverse()) {
      if (PuppeteerURL.isPuppeteerURL(frame.url) && frame.url !== PuppeteerURL.INTERNAL_URL) {
        const url = PuppeteerURL.parse(frame.url);
        stackLines.unshift(`    at ${frame.functionName || url.functionName} (${url.functionName} at ${url.siteString}, <anonymous>:${frame.lineNumber}:${frame.columnNumber})`);
      } else {
        stackLines.push(`    at ${frame.functionName || "<anonymous>"} (${frame.url}:${frame.lineNumber}:${frame.columnNumber})`);
      }
      if (stackLines.length >= Error.stackTraceLimit) {
        break;
      }
    }
  }
  error.stack = [details.text, ...stackLines].join("\n");
  return error;
}

// node_modules/puppeteer-core/lib/esm/puppeteer/common/bidi/JSHandle.js
var __classPrivateFieldSet = function(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _JSHandle_disposed;
var _JSHandle_realm;
var _JSHandle_remoteValue;
var JSHandle2 = class extends JSHandle {
  constructor(realm, remoteValue) {
    super();
    _JSHandle_disposed.set(this, false);
    _JSHandle_realm.set(this, void 0);
    _JSHandle_remoteValue.set(this, void 0);
    __classPrivateFieldSet(this, _JSHandle_realm, realm, "f");
    __classPrivateFieldSet(this, _JSHandle_remoteValue, remoteValue, "f");
  }
  context() {
    return __classPrivateFieldGet(this, _JSHandle_realm, "f");
  }
  get disposed() {
    return __classPrivateFieldGet(this, _JSHandle_disposed, "f");
  }
  async evaluate(pageFunction, ...args) {
    pageFunction = withSourcePuppeteerURLIfNone(this.evaluate.name, pageFunction);
    return await this.context().evaluate(pageFunction, this, ...args);
  }
  async evaluateHandle(pageFunction, ...args) {
    pageFunction = withSourcePuppeteerURLIfNone(this.evaluateHandle.name, pageFunction);
    return this.context().evaluateHandle(pageFunction, this, ...args);
  }
  async getProperty(propertyName) {
    return await this.evaluateHandle((object, propertyName2) => {
      return object[propertyName2];
    }, propertyName);
  }
  async getProperties() {
    const keys = await this.evaluate((object) => {
      var _a;
      const enumerableKeys = [];
      const descriptors = Object.getOwnPropertyDescriptors(object);
      for (const key in descriptors) {
        if ((_a = descriptors[key]) == null ? void 0 : _a.enumerable) {
          enumerableKeys.push(key);
        }
      }
      return enumerableKeys;
    });
    const map = /* @__PURE__ */ new Map();
    const results = await Promise.all(keys.map((key) => {
      return this.getProperty(key);
    }));
    for (const [key, value] of Object.entries(keys)) {
      const handle = results[key];
      if (handle) {
        map.set(value, handle);
      }
    }
    return map;
  }
  async jsonValue() {
    const value = BidiSerializer.deserialize(__classPrivateFieldGet(this, _JSHandle_remoteValue, "f"));
    if (__classPrivateFieldGet(this, _JSHandle_remoteValue, "f").type !== "undefined" && value === void 0) {
      throw new Error("Could not serialize referenced object");
    }
    return value;
  }
  asElement() {
    return null;
  }
  async dispose() {
    if (__classPrivateFieldGet(this, _JSHandle_disposed, "f")) {
      return;
    }
    __classPrivateFieldSet(this, _JSHandle_disposed, true, "f");
    if ("handle" in __classPrivateFieldGet(this, _JSHandle_remoteValue, "f")) {
      await releaseReference(__classPrivateFieldGet(this, _JSHandle_realm, "f"), __classPrivateFieldGet(this, _JSHandle_remoteValue, "f"));
    }
  }
  get isPrimitiveValue() {
    switch (__classPrivateFieldGet(this, _JSHandle_remoteValue, "f").type) {
      case "string":
      case "number":
      case "bigint":
      case "boolean":
      case "undefined":
      case "null":
        return true;
      default:
        return false;
    }
  }
  toString() {
    if (this.isPrimitiveValue) {
      return "JSHandle:" + BidiSerializer.deserialize(__classPrivateFieldGet(this, _JSHandle_remoteValue, "f"));
    }
    return "JSHandle@" + __classPrivateFieldGet(this, _JSHandle_remoteValue, "f").type;
  }
  get id() {
    return "handle" in __classPrivateFieldGet(this, _JSHandle_remoteValue, "f") ? __classPrivateFieldGet(this, _JSHandle_remoteValue, "f").handle : void 0;
  }
  remoteValue() {
    return __classPrivateFieldGet(this, _JSHandle_remoteValue, "f");
  }
};
_JSHandle_disposed = /* @__PURE__ */ new WeakMap(), _JSHandle_realm = /* @__PURE__ */ new WeakMap(), _JSHandle_remoteValue = /* @__PURE__ */ new WeakMap();

// node_modules/puppeteer-core/lib/esm/puppeteer/common/bidi/ElementHandle.js
var __classPrivateFieldSet2 = function(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet2 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ElementHandle_frame;
var ElementHandle2 = class extends ElementHandle {
  constructor(realm, remoteValue, frame) {
    super(new JSHandle2(realm, remoteValue));
    _ElementHandle_frame.set(this, void 0);
    __classPrivateFieldSet2(this, _ElementHandle_frame, frame, "f");
  }
  get frame() {
    return __classPrivateFieldGet2(this, _ElementHandle_frame, "f");
  }
  context() {
    return this.handle.context();
  }
  get isPrimitiveValue() {
    return this.handle.isPrimitiveValue;
  }
  remoteValue() {
    return this.handle.remoteValue();
  }
  assertElementHasWorld() {
    return;
  }
  async click(options) {
    var _a;
    await this.scrollIntoViewIfNeeded();
    const { x = 0, y = 0 } = (_a = options == null ? void 0 : options.offset) != null ? _a : {};
    const remoteValue = this.remoteValue();
    assert("sharedId" in remoteValue);
    return __classPrivateFieldGet2(this, _ElementHandle_frame, "f").page().mouse.click(x, y, Object.assign({}, options, {
      origin: {
        type: "element",
        element: remoteValue
      }
    }));
  }
  async hover() {
    await this.scrollIntoViewIfNeeded();
    const remoteValue = this.remoteValue();
    assert("sharedId" in remoteValue);
    return __classPrivateFieldGet2(this, _ElementHandle_frame, "f").page().mouse.move(0, 0, {
      origin: {
        type: "element",
        element: remoteValue
      }
    });
  }
  async tap() {
    await this.scrollIntoViewIfNeeded();
    const remoteValue = this.remoteValue();
    assert("sharedId" in remoteValue);
    return __classPrivateFieldGet2(this, _ElementHandle_frame, "f").page().touchscreen.tap(0, 0, {
      origin: {
        type: "element",
        element: remoteValue
      }
    });
  }
  async touchStart() {
    await this.scrollIntoViewIfNeeded();
    const remoteValue = this.remoteValue();
    assert("sharedId" in remoteValue);
    return __classPrivateFieldGet2(this, _ElementHandle_frame, "f").page().touchscreen.touchStart(0, 0, {
      origin: {
        type: "element",
        element: remoteValue
      }
    });
  }
  async touchMove() {
    await this.scrollIntoViewIfNeeded();
    const remoteValue = this.remoteValue();
    assert("sharedId" in remoteValue);
    return __classPrivateFieldGet2(this, _ElementHandle_frame, "f").page().touchscreen.touchMove(0, 0, {
      origin: {
        type: "element",
        element: remoteValue
      }
    });
  }
  async touchEnd() {
    await this.scrollIntoViewIfNeeded();
    await __classPrivateFieldGet2(this, _ElementHandle_frame, "f").page().touchscreen.touchEnd();
  }
  async type(text, options) {
    await this.focus();
    await __classPrivateFieldGet2(this, _ElementHandle_frame, "f").page().keyboard.type(text, options);
  }
  async press(key, options) {
    await this.focus();
    await __classPrivateFieldGet2(this, _ElementHandle_frame, "f").page().keyboard.press(key, options);
  }
};
_ElementHandle_frame = /* @__PURE__ */ new WeakMap();

// node_modules/puppeteer-core/lib/esm/puppeteer/common/bidi/Realm.js
var __classPrivateFieldSet3 = function(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet3 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Realm_instances;
var _Realm_frame;
var _Realm_id;
var _Realm_sandbox;
var _Realm_evaluate;
var SOURCE_URL_REGEX = /^[\040\t]*\/\/[@#] sourceURL=\s*(\S*?)\s*$/m;
var getSourceUrlComment = (url) => {
  return `//# sourceURL=${url}`;
};
var Realm = class extends EventEmitter {
  constructor(connection, id, sandbox) {
    super();
    _Realm_instances.add(this);
    _Realm_frame.set(this, void 0);
    _Realm_id.set(this, void 0);
    _Realm_sandbox.set(this, void 0);
    this.connection = connection;
    __classPrivateFieldSet3(this, _Realm_id, id, "f");
    __classPrivateFieldSet3(this, _Realm_sandbox, sandbox, "f");
  }
  get target() {
    return {
      context: __classPrivateFieldGet3(this, _Realm_id, "f"),
      sandbox: __classPrivateFieldGet3(this, _Realm_sandbox, "f")
    };
  }
  setFrame(frame) {
    __classPrivateFieldSet3(this, _Realm_frame, frame, "f");
  }
  get puppeteerUtil() {
    const promise = Promise.resolve();
    scriptInjector.inject((script) => {
      if (this.internalPuppeteerUtil) {
        void this.internalPuppeteerUtil.then((handle) => {
          void handle.dispose();
        });
      }
      this.internalPuppeteerUtil = promise.then(() => {
        return this.evaluateHandle(script);
      });
    }, !this.internalPuppeteerUtil);
    return this.internalPuppeteerUtil;
  }
  async evaluateHandle(pageFunction, ...args) {
    return __classPrivateFieldGet3(this, _Realm_instances, "m", _Realm_evaluate).call(this, false, pageFunction, ...args);
  }
  async evaluate(pageFunction, ...args) {
    return __classPrivateFieldGet3(this, _Realm_instances, "m", _Realm_evaluate).call(this, true, pageFunction, ...args);
  }
};
_Realm_frame = /* @__PURE__ */ new WeakMap(), _Realm_id = /* @__PURE__ */ new WeakMap(), _Realm_sandbox = /* @__PURE__ */ new WeakMap(), _Realm_instances = /* @__PURE__ */ new WeakSet(), _Realm_evaluate = async function _Realm_evaluate2(returnByValue, pageFunction, ...args) {
  var _a, _b;
  const sourceUrlComment = getSourceUrlComment((_b = (_a = getSourcePuppeteerURLIfAvailable(pageFunction)) == null ? void 0 : _a.toString()) != null ? _b : PuppeteerURL.INTERNAL_URL);
  let responsePromise;
  const resultOwnership = returnByValue ? "none" : "root";
  if (isString(pageFunction)) {
    const expression = SOURCE_URL_REGEX.test(pageFunction) ? pageFunction : `${pageFunction}
${sourceUrlComment}
`;
    responsePromise = this.connection.send("script.evaluate", {
      expression,
      target: this.target,
      resultOwnership,
      awaitPromise: true
    });
  } else {
    let functionDeclaration = stringifyFunction(pageFunction);
    functionDeclaration = SOURCE_URL_REGEX.test(functionDeclaration) ? functionDeclaration : `${functionDeclaration}
${sourceUrlComment}
`;
    responsePromise = this.connection.send("script.callFunction", {
      functionDeclaration,
      arguments: await Promise.all(args.map((arg) => {
        return BidiSerializer.serialize(arg, this);
      })),
      target: this.target,
      resultOwnership,
      awaitPromise: true
    });
  }
  const { result } = await responsePromise;
  if ("type" in result && result.type === "exception") {
    throw createEvaluationError(result.exceptionDetails);
  }
  return returnByValue ? BidiSerializer.deserialize(result.result) : getBidiHandle(this, result.result, __classPrivateFieldGet3(this, _Realm_frame, "f"));
};
function getBidiHandle(realmOrContext, result, frame) {
  if (result.type === "node" || result.type === "window") {
    return new ElementHandle2(realmOrContext, result, frame);
  }
  return new JSHandle2(realmOrContext, result);
}

// node_modules/puppeteer-core/lib/esm/puppeteer/common/bidi/BrowsingContext.js
var __classPrivateFieldSet4 = function(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet4 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _CDPSessionWrapper_context;
var _CDPSessionWrapper_sessionId;
var _BrowsingContext_timeoutSettings;
var _BrowsingContext_id;
var _BrowsingContext_url;
var _BrowsingContext_cdpSession;
var lifeCycleToSubscribedEvent = /* @__PURE__ */ new Map([
  ["load", "browsingContext.load"],
  ["domcontentloaded", "browsingContext.domContentLoaded"]
]);
var lifeCycleToReadinessState = /* @__PURE__ */ new Map([
  ["load", "complete"],
  ["domcontentloaded", "interactive"]
]);
var CDPSessionWrapper = class extends EventEmitter {
  constructor(context) {
    super();
    _CDPSessionWrapper_context.set(this, void 0);
    _CDPSessionWrapper_sessionId.set(this, Deferred.create());
    __classPrivateFieldSet4(this, _CDPSessionWrapper_context, context, "f");
    context.connection.send("cdp.getSession", {
      context: context.id
    }).then((session) => {
      __classPrivateFieldGet4(this, _CDPSessionWrapper_sessionId, "f").resolve(session.result.cdpSession);
    }).catch((err) => {
      __classPrivateFieldGet4(this, _CDPSessionWrapper_sessionId, "f").reject(err);
    });
  }
  connection() {
    return void 0;
  }
  async send(method, ...paramArgs) {
    const cdpSession = await __classPrivateFieldGet4(this, _CDPSessionWrapper_sessionId, "f").valueOrThrow();
    const result = await __classPrivateFieldGet4(this, _CDPSessionWrapper_context, "f").connection.send("cdp.sendCommand", {
      cdpMethod: method,
      cdpParams: paramArgs[0] || {},
      cdpSession
    });
    return result.result;
  }
  detach() {
    throw new Error("Method not implemented.");
  }
  id() {
    const val = __classPrivateFieldGet4(this, _CDPSessionWrapper_sessionId, "f").value();
    return val instanceof Error || val === void 0 ? "" : val;
  }
};
_CDPSessionWrapper_context = /* @__PURE__ */ new WeakMap(), _CDPSessionWrapper_sessionId = /* @__PURE__ */ new WeakMap();
var BrowsingContext = class extends Realm {
  constructor(connection, timeoutSettings, info) {
    super(connection, info.context);
    _BrowsingContext_timeoutSettings.set(this, void 0);
    _BrowsingContext_id.set(this, void 0);
    _BrowsingContext_url.set(this, "about:blank");
    _BrowsingContext_cdpSession.set(this, void 0);
    this.connection = connection;
    __classPrivateFieldSet4(this, _BrowsingContext_timeoutSettings, timeoutSettings, "f");
    __classPrivateFieldSet4(this, _BrowsingContext_id, info.context, "f");
    __classPrivateFieldSet4(this, _BrowsingContext_cdpSession, new CDPSessionWrapper(this), "f");
  }
  createSandboxRealm(sandbox) {
    return new Realm(this.connection, __classPrivateFieldGet4(this, _BrowsingContext_id, "f"), sandbox);
  }
  get url() {
    return __classPrivateFieldGet4(this, _BrowsingContext_url, "f");
  }
  get id() {
    return __classPrivateFieldGet4(this, _BrowsingContext_id, "f");
  }
  get cdpSession() {
    return __classPrivateFieldGet4(this, _BrowsingContext_cdpSession, "f");
  }
  async goto(url, options = {}) {
    const { waitUntil = "load", timeout = __classPrivateFieldGet4(this, _BrowsingContext_timeoutSettings, "f").navigationTimeout() } = options;
    const readinessState = lifeCycleToReadinessState.get(getWaitUntilSingle(waitUntil));
    try {
      const { result } = await waitWithTimeout(this.connection.send("browsingContext.navigate", {
        url,
        context: __classPrivateFieldGet4(this, _BrowsingContext_id, "f"),
        wait: readinessState
      }), "Navigation", timeout);
      __classPrivateFieldSet4(this, _BrowsingContext_url, result.url, "f");
      return result.navigation;
    } catch (error) {
      if (error instanceof ProtocolError) {
        error.message += ` at ${url}`;
      } else if (error instanceof TimeoutError) {
        error.message = "Navigation timeout of " + timeout + " ms exceeded";
      }
      throw error;
    }
  }
  async reload(options = {}) {
    const { waitUntil = "load", timeout = __classPrivateFieldGet4(this, _BrowsingContext_timeoutSettings, "f").navigationTimeout() } = options;
    const readinessState = lifeCycleToReadinessState.get(getWaitUntilSingle(waitUntil));
    await waitWithTimeout(this.connection.send("browsingContext.reload", {
      context: __classPrivateFieldGet4(this, _BrowsingContext_id, "f"),
      wait: readinessState
    }), "Navigation", timeout);
  }
  async setContent(html, options) {
    const { waitUntil = "load", timeout = __classPrivateFieldGet4(this, _BrowsingContext_timeoutSettings, "f").navigationTimeout() } = options;
    const waitUntilEvent = lifeCycleToSubscribedEvent.get(getWaitUntilSingle(waitUntil));
    await Promise.all([
      setPageContent(this, html),
      waitWithTimeout(new Promise((resolve) => {
        this.once(waitUntilEvent, () => {
          resolve();
        });
      }), waitUntilEvent, timeout)
    ]);
  }
  async content() {
    return await this.evaluate(getPageContent);
  }
  async sendCDPCommand(method, ...paramArgs) {
    return __classPrivateFieldGet4(this, _BrowsingContext_cdpSession, "f").send(method, ...paramArgs);
  }
  title() {
    return this.evaluate(() => {
      return document.title;
    });
  }
  dispose() {
    this.removeAllListeners();
    this.connection.unregisterBrowsingContexts(__classPrivateFieldGet4(this, _BrowsingContext_id, "f"));
  }
};
_BrowsingContext_timeoutSettings = /* @__PURE__ */ new WeakMap(), _BrowsingContext_id = /* @__PURE__ */ new WeakMap(), _BrowsingContext_url = /* @__PURE__ */ new WeakMap(), _BrowsingContext_cdpSession = /* @__PURE__ */ new WeakMap();
function getWaitUntilSingle(event) {
  if (Array.isArray(event) && event.length > 1) {
    throw new Error("BiDi support only single `waitUntil` argument");
  }
  const waitUntilSingle = Array.isArray(event) ? event.find((lifecycle) => {
    return lifecycle === "domcontentloaded" || lifecycle === "load";
  }) : event;
  if (waitUntilSingle === "networkidle0" || waitUntilSingle === "networkidle2") {
    throw new Error(`BiDi does not support 'waitUntil' ${waitUntilSingle}`);
  }
  assert(waitUntilSingle, `Invalid waitUntil option ${waitUntilSingle}`);
  return waitUntilSingle;
}

// node_modules/puppeteer-core/lib/esm/puppeteer/common/bidi/Sandbox.js
var __classPrivateFieldSet5 = function(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet5 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Sandbox_document;
var _Sandbox_realm;
var _Sandbox_timeoutSettings;
var _Sandbox_taskManager;
var MAIN_SANDBOX = Symbol("mainSandbox");
var PUPPETEER_SANDBOX = Symbol("puppeteerSandbox");
var Sandbox = class {
  constructor(context, timeoutSettings) {
    _Sandbox_document.set(this, void 0);
    _Sandbox_realm.set(this, void 0);
    _Sandbox_timeoutSettings.set(this, void 0);
    _Sandbox_taskManager.set(this, new TaskManager());
    __classPrivateFieldSet5(this, _Sandbox_realm, context, "f");
    __classPrivateFieldSet5(this, _Sandbox_timeoutSettings, timeoutSettings, "f");
  }
  get taskManager() {
    return __classPrivateFieldGet5(this, _Sandbox_taskManager, "f");
  }
  async document() {
    if (__classPrivateFieldGet5(this, _Sandbox_document, "f")) {
      return __classPrivateFieldGet5(this, _Sandbox_document, "f");
    }
    __classPrivateFieldSet5(this, _Sandbox_document, await __classPrivateFieldGet5(this, _Sandbox_realm, "f").evaluateHandle(() => {
      return document;
    }), "f");
    return __classPrivateFieldGet5(this, _Sandbox_document, "f");
  }
  async $(selector) {
    const document2 = await this.document();
    return document2.$(selector);
  }
  async $$(selector) {
    const document2 = await this.document();
    return document2.$$(selector);
  }
  async $eval(selector, pageFunction, ...args) {
    pageFunction = withSourcePuppeteerURLIfNone(this.$eval.name, pageFunction);
    const document2 = await this.document();
    return document2.$eval(selector, pageFunction, ...args);
  }
  async $$eval(selector, pageFunction, ...args) {
    pageFunction = withSourcePuppeteerURLIfNone(this.$$eval.name, pageFunction);
    const document2 = await this.document();
    return document2.$$eval(selector, pageFunction, ...args);
  }
  async $x(expression) {
    const document2 = await this.document();
    return document2.$x(expression);
  }
  async evaluateHandle(pageFunction, ...args) {
    pageFunction = withSourcePuppeteerURLIfNone(this.evaluateHandle.name, pageFunction);
    return __classPrivateFieldGet5(this, _Sandbox_realm, "f").evaluateHandle(pageFunction, ...args);
  }
  async evaluate(pageFunction, ...args) {
    pageFunction = withSourcePuppeteerURLIfNone(this.evaluate.name, pageFunction);
    return __classPrivateFieldGet5(this, _Sandbox_realm, "f").evaluate(pageFunction, ...args);
  }
  async adoptHandle(handle) {
    return await this.evaluateHandle((node) => {
      return node;
    }, handle);
  }
  async transferHandle(handle) {
    if (handle.context() === __classPrivateFieldGet5(this, _Sandbox_realm, "f")) {
      return handle;
    }
    const transferredHandle = await this.evaluateHandle((node) => {
      return node;
    }, handle);
    await handle.dispose();
    return transferredHandle;
  }
  waitForFunction(pageFunction, options = {}, ...args) {
    const { polling = "raf", timeout = __classPrivateFieldGet5(this, _Sandbox_timeoutSettings, "f").timeout(), root, signal } = options;
    if (typeof polling === "number" && polling < 0) {
      throw new Error("Cannot poll with non-positive interval");
    }
    const waitTask = new WaitTask(this, {
      polling,
      root,
      timeout,
      signal
    }, pageFunction, ...args);
    return waitTask.result;
  }
  async click(selector, options) {
    const handle = await this.$(selector);
    assert(handle, `No element found for selector: ${selector}`);
    await handle.click(options);
    await handle.dispose();
  }
  async focus(selector) {
    const handle = await this.$(selector);
    assert(handle, `No element found for selector: ${selector}`);
    await handle.focus();
    await handle.dispose();
  }
  async hover(selector) {
    const handle = await this.$(selector);
    assert(handle, `No element found for selector: ${selector}`);
    await handle.hover();
    await handle.dispose();
  }
  async select(selector, ...values) {
    const handle = await this.$(selector);
    assert(handle, `No element found for selector: ${selector}`);
    const result = await handle.select(...values);
    await handle.dispose();
    return result;
  }
  async tap(selector) {
    const handle = await this.$(selector);
    assert(handle, `No element found for selector: ${selector}`);
    await handle.tap();
    await handle.dispose();
  }
  async type(selector, text, options) {
    const handle = await this.$(selector);
    assert(handle, `No element found for selector: ${selector}`);
    await handle.type(text, options);
    await handle.dispose();
  }
};
_Sandbox_document = /* @__PURE__ */ new WeakMap(), _Sandbox_realm = /* @__PURE__ */ new WeakMap(), _Sandbox_timeoutSettings = /* @__PURE__ */ new WeakMap(), _Sandbox_taskManager = /* @__PURE__ */ new WeakMap();

// node_modules/puppeteer-core/lib/esm/puppeteer/common/bidi/Frame.js
var __classPrivateFieldSet6 = function(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet6 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Frame_page;
var _Frame_context;
var Frame2 = class extends Frame {
  constructor(page, context, timeoutSettings, parentId) {
    super();
    _Frame_page.set(this, void 0);
    _Frame_context.set(this, void 0);
    __classPrivateFieldSet6(this, _Frame_page, page, "f");
    __classPrivateFieldSet6(this, _Frame_context, context, "f");
    this._id = __classPrivateFieldGet6(this, _Frame_context, "f").id;
    this._parentId = parentId != null ? parentId : void 0;
    const puppeteerRealm = context.createSandboxRealm(UTILITY_WORLD_NAME);
    this.sandboxes = {
      [MAIN_SANDBOX]: new Sandbox(context, timeoutSettings),
      [PUPPETEER_SANDBOX]: new Sandbox(puppeteerRealm, timeoutSettings)
    };
    puppeteerRealm.setFrame(this);
    context.setFrame(this);
  }
  mainRealm() {
    return this.sandboxes[MAIN_SANDBOX];
  }
  isolatedRealm() {
    return this.sandboxes[PUPPETEER_SANDBOX];
  }
  page() {
    return __classPrivateFieldGet6(this, _Frame_page, "f");
  }
  name() {
    return this._name || "";
  }
  url() {
    return __classPrivateFieldGet6(this, _Frame_context, "f").url;
  }
  parentFrame() {
    var _a;
    return __classPrivateFieldGet6(this, _Frame_page, "f").frame((_a = this._parentId) != null ? _a : "");
  }
  childFrames() {
    return __classPrivateFieldGet6(this, _Frame_page, "f").childFrames(__classPrivateFieldGet6(this, _Frame_context, "f").id);
  }
  async evaluateHandle(pageFunction, ...args) {
    return __classPrivateFieldGet6(this, _Frame_context, "f").evaluateHandle(pageFunction, ...args);
  }
  async evaluate(pageFunction, ...args) {
    return __classPrivateFieldGet6(this, _Frame_context, "f").evaluate(pageFunction, ...args);
  }
  async goto(url, options) {
    const navigationId = await __classPrivateFieldGet6(this, _Frame_context, "f").goto(url, options);
    return __classPrivateFieldGet6(this, _Frame_page, "f").getNavigationResponse(navigationId);
  }
  setContent(html, options) {
    return __classPrivateFieldGet6(this, _Frame_context, "f").setContent(html, options);
  }
  content() {
    return __classPrivateFieldGet6(this, _Frame_context, "f").content();
  }
  title() {
    return __classPrivateFieldGet6(this, _Frame_context, "f").title();
  }
  context() {
    return __classPrivateFieldGet6(this, _Frame_context, "f");
  }
  $(selector) {
    return this.sandboxes[MAIN_SANDBOX].$(selector);
  }
  $$(selector) {
    return this.sandboxes[MAIN_SANDBOX].$$(selector);
  }
  $eval(selector, pageFunction, ...args) {
    pageFunction = withSourcePuppeteerURLIfNone(this.$eval.name, pageFunction);
    return this.sandboxes[MAIN_SANDBOX].$eval(selector, pageFunction, ...args);
  }
  $$eval(selector, pageFunction, ...args) {
    pageFunction = withSourcePuppeteerURLIfNone(this.$$eval.name, pageFunction);
    return this.sandboxes[MAIN_SANDBOX].$$eval(selector, pageFunction, ...args);
  }
  $x(expression) {
    return this.sandboxes[MAIN_SANDBOX].$x(expression);
  }
  dispose() {
    __classPrivateFieldGet6(this, _Frame_context, "f").dispose();
  }
};
_Frame_page = /* @__PURE__ */ new WeakMap(), _Frame_context = /* @__PURE__ */ new WeakMap();

// node_modules/puppeteer-core/lib/esm/puppeteer/common/bidi/Input.js
var Bidi = __toESM(require_protocol(), 1);
var __classPrivateFieldSet7 = function(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet7 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Keyboard_context;
var _Mouse_context;
var _Mouse_lastMovePoint;
var _Touchscreen_context;
var getBidiKeyValue = (key) => {
  switch (key) {
    case "\n":
      key = "Enter";
      break;
  }
  if ([...key].length === 1) {
    return key;
  }
  switch (key) {
    case "Unidentified":
      return "\uE000";
    case "Cancel":
      return "\uE001";
    case "Help":
      return "\uE002";
    case "Backspace":
      return "\uE003";
    case "Tab":
      return "\uE004";
    case "Clear":
      return "\uE005";
    case "Return":
      return "\uE006";
    case "Enter":
      return "\uE007";
    case "Shift":
      return "\uE008";
    case "Control":
      return "\uE009";
    case "Alt":
      return "\uE00A";
    case "Pause":
      return "\uE00B";
    case "Escape":
      return "\uE00C";
    case " ":
      return "\uE00D";
    case "PageUp":
      return "\uE00E";
    case "PageDown":
      return "\uE00F";
    case "End":
      return "\uE010";
    case "Home":
      return "\uE011";
    case "ArrowLeft":
      return "\uE012";
    case "ArrowUp":
      return "\uE013";
    case "ArrowRight":
      return "\uE014";
    case "ArrowDown":
      return "\uE015";
    case "Insert":
      return "\uE016";
    case "Delete":
      return "\uE017";
    case ";":
      return "\uE018";
    case "=":
      return "\uE019";
    case "0":
      return "\uE01A";
    case "1":
      return "\uE01B";
    case "2":
      return "\uE01C";
    case "3":
      return "\uE01D";
    case "4":
      return "\uE01E";
    case "5":
      return "\uE01F";
    case "6":
      return "\uE020";
    case "7":
      return "\uE021";
    case "8":
      return "\uE022";
    case "9":
      return "\uE023";
    case "*":
      return "\uE024";
    case "+":
      return "\uE025";
    case ",":
      return "\uE026";
    case "-":
      return "\uE027";
    case ".":
      return "\uE028";
    case "/":
      return "\uE029";
    case "F1":
      return "\uE031";
    case "F2":
      return "\uE032";
    case "F3":
      return "\uE033";
    case "F4":
      return "\uE034";
    case "F5":
      return "\uE035";
    case "F6":
      return "\uE036";
    case "F7":
      return "\uE037";
    case "F8":
      return "\uE038";
    case "F9":
      return "\uE039";
    case "F10":
      return "\uE03A";
    case "F11":
      return "\uE03B";
    case "F12":
      return "\uE03C";
    case "Meta":
      return "\uE03D";
    case "ZenkakuHankaku":
      return "\uE040";
    default:
      throw new Error(`Unknown key: "${key}"`);
  }
};
var Keyboard2 = class extends Keyboard {
  constructor(context) {
    super();
    _Keyboard_context.set(this, void 0);
    __classPrivateFieldSet7(this, _Keyboard_context, context, "f");
  }
  async down(key, options) {
    if (options) {
      throw new Error("KeyDownOptions are not supported");
    }
    await __classPrivateFieldGet7(this, _Keyboard_context, "f").connection.send("input.performActions", {
      context: __classPrivateFieldGet7(this, _Keyboard_context, "f").id,
      actions: [
        {
          type: Bidi.Input.SourceActionsType.Key,
          id: "__puppeteer_keyboard",
          actions: [
            {
              type: Bidi.Input.ActionType.KeyDown,
              value: getBidiKeyValue(key)
            }
          ]
        }
      ]
    });
  }
  async up(key) {
    await __classPrivateFieldGet7(this, _Keyboard_context, "f").connection.send("input.performActions", {
      context: __classPrivateFieldGet7(this, _Keyboard_context, "f").id,
      actions: [
        {
          type: Bidi.Input.SourceActionsType.Key,
          id: "__puppeteer_keyboard",
          actions: [
            {
              type: Bidi.Input.ActionType.KeyUp,
              value: getBidiKeyValue(key)
            }
          ]
        }
      ]
    });
  }
  async press(key, options = {}) {
    const { delay = 0 } = options;
    const actions = [
      {
        type: Bidi.Input.ActionType.KeyDown,
        value: getBidiKeyValue(key)
      }
    ];
    if (delay > 0) {
      actions.push({
        type: Bidi.Input.ActionType.Pause,
        duration: delay
      });
    }
    actions.push({
      type: Bidi.Input.ActionType.KeyUp,
      value: getBidiKeyValue(key)
    });
    await __classPrivateFieldGet7(this, _Keyboard_context, "f").connection.send("input.performActions", {
      context: __classPrivateFieldGet7(this, _Keyboard_context, "f").id,
      actions: [
        {
          type: Bidi.Input.SourceActionsType.Key,
          id: "__puppeteer_keyboard",
          actions
        }
      ]
    });
  }
  async type(text, options = {}) {
    const { delay = 0 } = options;
    const values = [...text].map(getBidiKeyValue);
    const actions = [];
    if (delay <= 0) {
      for (const value of values) {
        actions.push({
          type: Bidi.Input.ActionType.KeyDown,
          value
        }, {
          type: Bidi.Input.ActionType.KeyUp,
          value
        });
      }
    } else {
      for (const value of values) {
        actions.push({
          type: Bidi.Input.ActionType.KeyDown,
          value
        }, {
          type: Bidi.Input.ActionType.Pause,
          duration: delay
        }, {
          type: Bidi.Input.ActionType.KeyUp,
          value
        });
      }
    }
    await __classPrivateFieldGet7(this, _Keyboard_context, "f").connection.send("input.performActions", {
      context: __classPrivateFieldGet7(this, _Keyboard_context, "f").id,
      actions: [
        {
          type: Bidi.Input.SourceActionsType.Key,
          id: "__puppeteer_keyboard",
          actions
        }
      ]
    });
  }
};
_Keyboard_context = /* @__PURE__ */ new WeakMap();
var getBidiButton = (button) => {
  switch (button) {
    case MouseButton.Left:
      return 0;
    case MouseButton.Middle:
      return 1;
    case MouseButton.Right:
      return 2;
    case MouseButton.Back:
      return 3;
    case MouseButton.Forward:
      return 4;
  }
};
var Mouse2 = class extends Mouse {
  constructor(context) {
    super();
    _Mouse_context.set(this, void 0);
    _Mouse_lastMovePoint.set(this, void 0);
    __classPrivateFieldSet7(this, _Mouse_context, context, "f");
  }
  async reset() {
    __classPrivateFieldSet7(this, _Mouse_lastMovePoint, void 0, "f");
    await __classPrivateFieldGet7(this, _Mouse_context, "f").connection.send("input.releaseActions", {
      context: __classPrivateFieldGet7(this, _Mouse_context, "f").id
    });
  }
  async move(x, y, options = {}) {
    var _a;
    __classPrivateFieldSet7(this, _Mouse_lastMovePoint, {
      x,
      y
    }, "f");
    await __classPrivateFieldGet7(this, _Mouse_context, "f").connection.send("input.performActions", {
      context: __classPrivateFieldGet7(this, _Mouse_context, "f").id,
      actions: [
        {
          type: Bidi.Input.SourceActionsType.Pointer,
          id: "__puppeteer_mouse",
          actions: [
            {
              type: Bidi.Input.ActionType.PointerMove,
              x,
              y,
              duration: ((_a = options.steps) != null ? _a : 0) * 50,
              origin: options.origin
            }
          ]
        }
      ]
    });
  }
  async down(options = {}) {
    var _a;
    await __classPrivateFieldGet7(this, _Mouse_context, "f").connection.send("input.performActions", {
      context: __classPrivateFieldGet7(this, _Mouse_context, "f").id,
      actions: [
        {
          type: Bidi.Input.SourceActionsType.Pointer,
          id: "__puppeteer_mouse",
          actions: [
            {
              type: Bidi.Input.ActionType.PointerDown,
              button: getBidiButton((_a = options.button) != null ? _a : MouseButton.Left)
            }
          ]
        }
      ]
    });
  }
  async up(options = {}) {
    var _a;
    await __classPrivateFieldGet7(this, _Mouse_context, "f").connection.send("input.performActions", {
      context: __classPrivateFieldGet7(this, _Mouse_context, "f").id,
      actions: [
        {
          type: Bidi.Input.SourceActionsType.Pointer,
          id: "__puppeteer_mouse",
          actions: [
            {
              type: Bidi.Input.ActionType.PointerUp,
              button: getBidiButton((_a = options.button) != null ? _a : MouseButton.Left)
            }
          ]
        }
      ]
    });
  }
  async click(x, y, options = {}) {
    var _a, _b;
    const actions = [
      {
        type: Bidi.Input.ActionType.PointerMove,
        x,
        y,
        origin: options.origin
      }
    ];
    const pointerDownAction = {
      type: Bidi.Input.ActionType.PointerDown,
      button: getBidiButton((_a = options.button) != null ? _a : MouseButton.Left)
    };
    const pointerUpAction = {
      type: Bidi.Input.ActionType.PointerUp,
      button: pointerDownAction.button
    };
    for (let i = 1; i < ((_b = options.count) != null ? _b : 1); ++i) {
      actions.push(pointerDownAction, pointerUpAction);
    }
    actions.push(pointerDownAction);
    if (options.delay) {
      actions.push({
        type: Bidi.Input.ActionType.Pause,
        duration: options.delay
      });
    }
    actions.push(pointerUpAction);
    await __classPrivateFieldGet7(this, _Mouse_context, "f").connection.send("input.performActions", {
      context: __classPrivateFieldGet7(this, _Mouse_context, "f").id,
      actions: [
        {
          type: Bidi.Input.SourceActionsType.Pointer,
          id: "__puppeteer_mouse",
          actions
        }
      ]
    });
  }
  async wheel(options = {}) {
    var _a, _b, _c;
    await __classPrivateFieldGet7(this, _Mouse_context, "f").connection.send("input.performActions", {
      context: __classPrivateFieldGet7(this, _Mouse_context, "f").id,
      actions: [
        {
          type: Bidi.Input.SourceActionsType.Wheel,
          id: "__puppeteer_wheel",
          actions: [
            {
              type: Bidi.Input.ActionType.Scroll,
              ...(_a = __classPrivateFieldGet7(this, _Mouse_lastMovePoint, "f")) != null ? _a : {
                x: 0,
                y: 0
              },
              deltaX: (_b = options.deltaX) != null ? _b : 0,
              deltaY: (_c = options.deltaY) != null ? _c : 0
            }
          ]
        }
      ]
    });
  }
};
_Mouse_context = /* @__PURE__ */ new WeakMap(), _Mouse_lastMovePoint = /* @__PURE__ */ new WeakMap();
var Touchscreen2 = class extends Touchscreen {
  constructor(context) {
    super();
    _Touchscreen_context.set(this, void 0);
    __classPrivateFieldSet7(this, _Touchscreen_context, context, "f");
  }
  async tap(x, y, options = {}) {
    await this.touchStart(x, y, options);
    await this.touchEnd();
  }
  async touchStart(x, y, options = {}) {
    await __classPrivateFieldGet7(this, _Touchscreen_context, "f").connection.send("input.performActions", {
      context: __classPrivateFieldGet7(this, _Touchscreen_context, "f").id,
      actions: [
        {
          type: Bidi.Input.SourceActionsType.Pointer,
          id: "__puppeteer_finger",
          parameters: {
            pointerType: Bidi.Input.PointerType.Touch
          },
          actions: [
            {
              type: Bidi.Input.ActionType.PointerMove,
              x,
              y,
              origin: options.origin
            },
            {
              type: Bidi.Input.ActionType.PointerDown,
              button: 0
            }
          ]
        }
      ]
    });
  }
  async touchMove(x, y, options = {}) {
    await __classPrivateFieldGet7(this, _Touchscreen_context, "f").connection.send("input.performActions", {
      context: __classPrivateFieldGet7(this, _Touchscreen_context, "f").id,
      actions: [
        {
          type: Bidi.Input.SourceActionsType.Pointer,
          id: "__puppeteer_finger",
          parameters: {
            pointerType: Bidi.Input.PointerType.Touch
          },
          actions: [
            {
              type: Bidi.Input.ActionType.PointerMove,
              x,
              y,
              origin: options.origin
            }
          ]
        }
      ]
    });
  }
  async touchEnd() {
    await __classPrivateFieldGet7(this, _Touchscreen_context, "f").connection.send("input.performActions", {
      context: __classPrivateFieldGet7(this, _Touchscreen_context, "f").id,
      actions: [
        {
          type: Bidi.Input.SourceActionsType.Pointer,
          id: "__puppeteer_finger",
          parameters: {
            pointerType: Bidi.Input.PointerType.Touch
          },
          actions: [
            {
              type: Bidi.Input.ActionType.PointerUp,
              button: 0
            }
          ]
        }
      ]
    });
  }
};
_Touchscreen_context = /* @__PURE__ */ new WeakMap();

// node_modules/puppeteer-core/lib/esm/puppeteer/common/bidi/HTTPRequest.js
var __classPrivateFieldSet8 = function(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet8 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _HTTPRequest_url;
var _HTTPRequest_resourceType;
var _HTTPRequest_method;
var _HTTPRequest_postData;
var _HTTPRequest_headers;
var _HTTPRequest_initiator;
var _HTTPRequest_frame;
var HTTPRequest2 = class extends HTTPRequest {
  constructor(event, frame, redirectChain) {
    super();
    this._response = null;
    _HTTPRequest_url.set(this, void 0);
    _HTTPRequest_resourceType.set(this, void 0);
    _HTTPRequest_method.set(this, void 0);
    _HTTPRequest_postData.set(this, void 0);
    _HTTPRequest_headers.set(this, {});
    _HTTPRequest_initiator.set(this, void 0);
    _HTTPRequest_frame.set(this, void 0);
    __classPrivateFieldSet8(this, _HTTPRequest_url, event.request.url, "f");
    __classPrivateFieldSet8(this, _HTTPRequest_resourceType, event.initiator.type.toLowerCase(), "f");
    __classPrivateFieldSet8(this, _HTTPRequest_method, event.request.method, "f");
    __classPrivateFieldSet8(this, _HTTPRequest_postData, void 0, "f");
    __classPrivateFieldSet8(this, _HTTPRequest_initiator, event.initiator, "f");
    __classPrivateFieldSet8(this, _HTTPRequest_frame, frame, "f");
    this._requestId = event.request.request;
    this._redirectChain = redirectChain != null ? redirectChain : [];
    this._navigationId = event.navigation;
    for (const { name, value } of event.request.headers) {
      if (value) {
        __classPrivateFieldGet8(this, _HTTPRequest_headers, "f")[name.toLowerCase()] = value;
      }
    }
  }
  url() {
    return __classPrivateFieldGet8(this, _HTTPRequest_url, "f");
  }
  resourceType() {
    return __classPrivateFieldGet8(this, _HTTPRequest_resourceType, "f");
  }
  method() {
    return __classPrivateFieldGet8(this, _HTTPRequest_method, "f");
  }
  postData() {
    return __classPrivateFieldGet8(this, _HTTPRequest_postData, "f");
  }
  headers() {
    return __classPrivateFieldGet8(this, _HTTPRequest_headers, "f");
  }
  response() {
    return this._response;
  }
  isNavigationRequest() {
    return Boolean(this._navigationId);
  }
  initiator() {
    return __classPrivateFieldGet8(this, _HTTPRequest_initiator, "f");
  }
  redirectChain() {
    return this._redirectChain.slice();
  }
  enqueueInterceptAction(pendingHandler) {
    void pendingHandler();
  }
  frame() {
    return __classPrivateFieldGet8(this, _HTTPRequest_frame, "f");
  }
};
_HTTPRequest_url = /* @__PURE__ */ new WeakMap(), _HTTPRequest_resourceType = /* @__PURE__ */ new WeakMap(), _HTTPRequest_method = /* @__PURE__ */ new WeakMap(), _HTTPRequest_postData = /* @__PURE__ */ new WeakMap(), _HTTPRequest_headers = /* @__PURE__ */ new WeakMap(), _HTTPRequest_initiator = /* @__PURE__ */ new WeakMap(), _HTTPRequest_frame = /* @__PURE__ */ new WeakMap();

// node_modules/puppeteer-core/lib/esm/puppeteer/common/bidi/HTTPResponse.js
var __classPrivateFieldSet9 = function(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet9 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _HTTPResponse_request;
var _HTTPResponse_remoteAddress;
var _HTTPResponse_status;
var _HTTPResponse_statusText;
var _HTTPResponse_url;
var _HTTPResponse_fromCache;
var _HTTPResponse_headers;
var _HTTPResponse_timings;
var HTTPResponse2 = class extends HTTPResponse {
  constructor(request, responseEvent) {
    var _a, _b;
    super();
    _HTTPResponse_request.set(this, void 0);
    _HTTPResponse_remoteAddress.set(this, void 0);
    _HTTPResponse_status.set(this, void 0);
    _HTTPResponse_statusText.set(this, void 0);
    _HTTPResponse_url.set(this, void 0);
    _HTTPResponse_fromCache.set(this, void 0);
    _HTTPResponse_headers.set(this, {});
    _HTTPResponse_timings.set(this, void 0);
    const { response } = responseEvent;
    __classPrivateFieldSet9(this, _HTTPResponse_request, request, "f");
    __classPrivateFieldSet9(this, _HTTPResponse_remoteAddress, {
      ip: "",
      port: -1
    }, "f");
    __classPrivateFieldSet9(this, _HTTPResponse_url, response.url, "f");
    __classPrivateFieldSet9(this, _HTTPResponse_fromCache, response.fromCache, "f");
    __classPrivateFieldSet9(this, _HTTPResponse_status, response.status, "f");
    __classPrivateFieldSet9(this, _HTTPResponse_statusText, response.statusText, "f");
    __classPrivateFieldSet9(this, _HTTPResponse_timings, (_a = response.timings) != null ? _a : null, "f");
    for (const header of response.headers || []) {
      __classPrivateFieldGet9(this, _HTTPResponse_headers, "f")[header.name] = (_b = header.value) != null ? _b : "";
    }
  }
  remoteAddress() {
    return __classPrivateFieldGet9(this, _HTTPResponse_remoteAddress, "f");
  }
  url() {
    return __classPrivateFieldGet9(this, _HTTPResponse_url, "f");
  }
  status() {
    return __classPrivateFieldGet9(this, _HTTPResponse_status, "f");
  }
  statusText() {
    return __classPrivateFieldGet9(this, _HTTPResponse_statusText, "f");
  }
  headers() {
    return __classPrivateFieldGet9(this, _HTTPResponse_headers, "f");
  }
  request() {
    return __classPrivateFieldGet9(this, _HTTPResponse_request, "f");
  }
  fromCache() {
    return __classPrivateFieldGet9(this, _HTTPResponse_fromCache, "f");
  }
  timing() {
    return __classPrivateFieldGet9(this, _HTTPResponse_timings, "f");
  }
};
_HTTPResponse_request = /* @__PURE__ */ new WeakMap(), _HTTPResponse_remoteAddress = /* @__PURE__ */ new WeakMap(), _HTTPResponse_status = /* @__PURE__ */ new WeakMap(), _HTTPResponse_statusText = /* @__PURE__ */ new WeakMap(), _HTTPResponse_url = /* @__PURE__ */ new WeakMap(), _HTTPResponse_fromCache = /* @__PURE__ */ new WeakMap(), _HTTPResponse_headers = /* @__PURE__ */ new WeakMap(), _HTTPResponse_timings = /* @__PURE__ */ new WeakMap();

// node_modules/puppeteer-core/lib/esm/puppeteer/common/bidi/NetworkManager.js
var __classPrivateFieldSet10 = function(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet10 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _NetworkManager_instances;
var _NetworkManager_connection;
var _NetworkManager_page;
var _NetworkManager_subscribedEvents;
var _NetworkManager_requestMap;
var _NetworkManager_navigationMap;
var _NetworkManager_onBeforeRequestSent;
var _NetworkManager_onResponseStarted;
var _NetworkManager_onResponseCompleted;
var _NetworkManager_onFetchError;
var NetworkManager = class extends EventEmitter {
  constructor(connection, page) {
    super();
    _NetworkManager_instances.add(this);
    _NetworkManager_connection.set(this, void 0);
    _NetworkManager_page.set(this, void 0);
    _NetworkManager_subscribedEvents.set(this, /* @__PURE__ */ new Map([
      ["network.beforeRequestSent", __classPrivateFieldGet10(this, _NetworkManager_instances, "m", _NetworkManager_onBeforeRequestSent).bind(this)],
      ["network.responseStarted", __classPrivateFieldGet10(this, _NetworkManager_instances, "m", _NetworkManager_onResponseStarted).bind(this)],
      ["network.responseCompleted", __classPrivateFieldGet10(this, _NetworkManager_instances, "m", _NetworkManager_onResponseCompleted).bind(this)],
      ["network.fetchError", __classPrivateFieldGet10(this, _NetworkManager_instances, "m", _NetworkManager_onFetchError).bind(this)]
    ]));
    _NetworkManager_requestMap.set(this, /* @__PURE__ */ new Map());
    _NetworkManager_navigationMap.set(this, /* @__PURE__ */ new Map());
    __classPrivateFieldSet10(this, _NetworkManager_connection, connection, "f");
    __classPrivateFieldSet10(this, _NetworkManager_page, page, "f");
    for (const [event, subscriber] of __classPrivateFieldGet10(this, _NetworkManager_subscribedEvents, "f")) {
      __classPrivateFieldGet10(this, _NetworkManager_connection, "f").on(event, subscriber);
    }
  }
  getNavigationResponse(navigationId) {
    var _a;
    return (_a = __classPrivateFieldGet10(this, _NetworkManager_navigationMap, "f").get(navigationId != null ? navigationId : "")) != null ? _a : null;
  }
  inFlightRequestsCount() {
    let inFlightRequestCounter = 0;
    for (const request of __classPrivateFieldGet10(this, _NetworkManager_requestMap, "f").values()) {
      if (!request.response() || request._failureText) {
        inFlightRequestCounter++;
      }
    }
    return inFlightRequestCounter;
  }
  dispose() {
    this.removeAllListeners();
    __classPrivateFieldGet10(this, _NetworkManager_requestMap, "f").clear();
    __classPrivateFieldGet10(this, _NetworkManager_navigationMap, "f").clear();
    for (const [event, subscriber] of __classPrivateFieldGet10(this, _NetworkManager_subscribedEvents, "f")) {
      __classPrivateFieldGet10(this, _NetworkManager_connection, "f").off(event, subscriber);
    }
  }
};
_NetworkManager_connection = /* @__PURE__ */ new WeakMap(), _NetworkManager_page = /* @__PURE__ */ new WeakMap(), _NetworkManager_subscribedEvents = /* @__PURE__ */ new WeakMap(), _NetworkManager_requestMap = /* @__PURE__ */ new WeakMap(), _NetworkManager_navigationMap = /* @__PURE__ */ new WeakMap(), _NetworkManager_instances = /* @__PURE__ */ new WeakSet(), _NetworkManager_onBeforeRequestSent = function _NetworkManager_onBeforeRequestSent2(event) {
  var _a;
  const frame = __classPrivateFieldGet10(this, _NetworkManager_page, "f").frame((_a = event.context) != null ? _a : "");
  if (!frame) {
    return;
  }
  const request = __classPrivateFieldGet10(this, _NetworkManager_requestMap, "f").get(event.request.request);
  let upsertRequest;
  if (request) {
    const requestChain = request._redirectChain;
    upsertRequest = new HTTPRequest2(event, frame, requestChain);
  } else {
    upsertRequest = new HTTPRequest2(event, frame, []);
  }
  __classPrivateFieldGet10(this, _NetworkManager_requestMap, "f").set(event.request.request, upsertRequest);
  this.emit(NetworkManagerEmittedEvents.Request, upsertRequest);
}, _NetworkManager_onResponseStarted = function _NetworkManager_onResponseStarted2(_event) {
}, _NetworkManager_onResponseCompleted = function _NetworkManager_onResponseCompleted2(event) {
  const request = __classPrivateFieldGet10(this, _NetworkManager_requestMap, "f").get(event.request.request);
  if (request) {
    const response = new HTTPResponse2(request, event);
    request._response = response;
    if (event.navigation) {
      __classPrivateFieldGet10(this, _NetworkManager_navigationMap, "f").set(event.navigation, response);
    }
    if (response.fromCache()) {
      this.emit(NetworkManagerEmittedEvents.RequestServedFromCache, request);
    }
    this.emit(NetworkManagerEmittedEvents.Response, response);
    this.emit(NetworkManagerEmittedEvents.RequestFinished, request);
  }
}, _NetworkManager_onFetchError = function _NetworkManager_onFetchError2(event) {
  const request = __classPrivateFieldGet10(this, _NetworkManager_requestMap, "f").get(event.request.request);
  if (!request) {
    return;
  }
  request._failureText = event.errorText;
  this.emit(NetworkManagerEmittedEvents.RequestFailed, request);
};

// node_modules/puppeteer-core/lib/esm/puppeteer/common/bidi/Page.js
var __classPrivateFieldSet11 = function(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet11 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Page_instances;
var _Page_accessibility;
var _Page_timeoutSettings;
var _Page_browserContext;
var _Page_connection;
var _Page_frameTree;
var _Page_networkManager;
var _Page_viewport;
var _Page_closedDeferred;
var _Page_subscribedEvents;
var _Page_networkManagerEvents;
var _Page_tracing;
var _Page_coverage;
var _Page_emulationManager;
var _Page_mouse;
var _Page_touchscreen;
var _Page_keyboard;
var _Page_onFrameAttached;
var _Page_onFrameNavigated;
var _Page_onFrameDetached;
var _Page_removeFramesRecursively;
var _Page_onLogEntryAdded;
var Page2 = class extends Page {
  constructor(browserContext, info) {
    super();
    _Page_instances.add(this);
    _Page_accessibility.set(this, void 0);
    _Page_timeoutSettings.set(this, new TimeoutSettings());
    _Page_browserContext.set(this, void 0);
    _Page_connection.set(this, void 0);
    _Page_frameTree.set(this, new FrameTree());
    _Page_networkManager.set(this, void 0);
    _Page_viewport.set(this, null);
    _Page_closedDeferred.set(this, Deferred.create());
    _Page_subscribedEvents.set(this, /* @__PURE__ */ new Map([
      ["log.entryAdded", __classPrivateFieldGet11(this, _Page_instances, "m", _Page_onLogEntryAdded).bind(this)],
      [
        "browsingContext.load",
        () => {
          return this.emit("load");
        }
      ],
      [
        "browsingContext.domContentLoaded",
        () => {
          return this.emit("domcontentloaded");
        }
      ],
      ["browsingContext.contextCreated", __classPrivateFieldGet11(this, _Page_instances, "m", _Page_onFrameAttached).bind(this)],
      ["browsingContext.contextDestroyed", __classPrivateFieldGet11(this, _Page_instances, "m", _Page_onFrameDetached).bind(this)],
      ["browsingContext.fragmentNavigated", __classPrivateFieldGet11(this, _Page_instances, "m", _Page_onFrameNavigated).bind(this)]
    ]));
    _Page_networkManagerEvents.set(this, /* @__PURE__ */ new Map([
      [
        NetworkManagerEmittedEvents.Request,
        (event) => {
          return this.emit("request", event);
        }
      ],
      [
        NetworkManagerEmittedEvents.RequestServedFromCache,
        (event) => {
          return this.emit("requestservedfromcache", event);
        }
      ],
      [
        NetworkManagerEmittedEvents.RequestFailed,
        (event) => {
          return this.emit("requestfailed", event);
        }
      ],
      [
        NetworkManagerEmittedEvents.RequestFinished,
        (event) => {
          return this.emit("requestfinished", event);
        }
      ],
      [
        NetworkManagerEmittedEvents.Response,
        (event) => {
          return this.emit("response", event);
        }
      ]
    ]));
    _Page_tracing.set(this, void 0);
    _Page_coverage.set(this, void 0);
    _Page_emulationManager.set(this, void 0);
    _Page_mouse.set(this, void 0);
    _Page_touchscreen.set(this, void 0);
    _Page_keyboard.set(this, void 0);
    __classPrivateFieldSet11(this, _Page_browserContext, browserContext, "f");
    __classPrivateFieldSet11(this, _Page_connection, browserContext.connection, "f");
    __classPrivateFieldSet11(this, _Page_networkManager, new NetworkManager(__classPrivateFieldGet11(this, _Page_connection, "f"), this), "f");
    __classPrivateFieldGet11(this, _Page_instances, "m", _Page_onFrameAttached).call(this, {
      ...info,
      url: "about:blank",
      children: []
    });
    for (const [event, subscriber] of __classPrivateFieldGet11(this, _Page_subscribedEvents, "f")) {
      __classPrivateFieldGet11(this, _Page_connection, "f").on(event, subscriber);
    }
    for (const [event, subscriber] of __classPrivateFieldGet11(this, _Page_networkManagerEvents, "f")) {
      __classPrivateFieldGet11(this, _Page_networkManager, "f").on(event, subscriber);
    }
    __classPrivateFieldSet11(this, _Page_accessibility, new Accessibility(this.mainFrame().context().cdpSession), "f");
    __classPrivateFieldSet11(this, _Page_tracing, new Tracing(this.mainFrame().context().cdpSession), "f");
    __classPrivateFieldSet11(this, _Page_coverage, new Coverage(this.mainFrame().context().cdpSession), "f");
    __classPrivateFieldSet11(this, _Page_emulationManager, new EmulationManager(this.mainFrame().context().cdpSession), "f");
    __classPrivateFieldSet11(this, _Page_mouse, new Mouse2(this.mainFrame().context()), "f");
    __classPrivateFieldSet11(this, _Page_touchscreen, new Touchscreen2(this.mainFrame().context()), "f");
    __classPrivateFieldSet11(this, _Page_keyboard, new Keyboard2(this.mainFrame().context()), "f");
  }
  get accessibility() {
    return __classPrivateFieldGet11(this, _Page_accessibility, "f");
  }
  get tracing() {
    return __classPrivateFieldGet11(this, _Page_tracing, "f");
  }
  get coverage() {
    return __classPrivateFieldGet11(this, _Page_coverage, "f");
  }
  get mouse() {
    return __classPrivateFieldGet11(this, _Page_mouse, "f");
  }
  get touchscreen() {
    return __classPrivateFieldGet11(this, _Page_touchscreen, "f");
  }
  get keyboard() {
    return __classPrivateFieldGet11(this, _Page_keyboard, "f");
  }
  browser() {
    return __classPrivateFieldGet11(this, _Page_browserContext, "f").browser();
  }
  browserContext() {
    return __classPrivateFieldGet11(this, _Page_browserContext, "f");
  }
  mainFrame() {
    const mainFrame = __classPrivateFieldGet11(this, _Page_frameTree, "f").getMainFrame();
    assert(mainFrame, "Requesting main frame too early!");
    return mainFrame;
  }
  frames() {
    return Array.from(__classPrivateFieldGet11(this, _Page_frameTree, "f").frames());
  }
  frame(frameId) {
    return __classPrivateFieldGet11(this, _Page_frameTree, "f").getById(frameId != null ? frameId : "") || null;
  }
  childFrames(frameId) {
    return __classPrivateFieldGet11(this, _Page_frameTree, "f").childFrames(frameId);
  }
  getNavigationResponse(id) {
    return __classPrivateFieldGet11(this, _Page_networkManager, "f").getNavigationResponse(id);
  }
  async close() {
    if (__classPrivateFieldGet11(this, _Page_closedDeferred, "f").finished()) {
      return;
    }
    __classPrivateFieldGet11(this, _Page_closedDeferred, "f").resolve(new TargetCloseError("Page closed!"));
    this.removeAllListeners();
    __classPrivateFieldGet11(this, _Page_networkManager, "f").dispose();
    await __classPrivateFieldGet11(this, _Page_connection, "f").send("browsingContext.close", {
      context: this.mainFrame()._id
    });
  }
  async evaluateHandle(pageFunction, ...args) {
    pageFunction = withSourcePuppeteerURLIfNone(this.evaluateHandle.name, pageFunction);
    return this.mainFrame().evaluateHandle(pageFunction, ...args);
  }
  async evaluate(pageFunction, ...args) {
    pageFunction = withSourcePuppeteerURLIfNone(this.evaluate.name, pageFunction);
    return this.mainFrame().evaluate(pageFunction, ...args);
  }
  async goto(url, options) {
    return this.mainFrame().goto(url, options);
  }
  async reload(options) {
    const [response] = await Promise.all([
      this.waitForResponse((response2) => {
        return response2.request().isNavigationRequest() && response2.url() === this.url();
      }),
      this.mainFrame().context().reload(options)
    ]);
    return response;
  }
  url() {
    return this.mainFrame().url();
  }
  setDefaultNavigationTimeout(timeout) {
    __classPrivateFieldGet11(this, _Page_timeoutSettings, "f").setDefaultNavigationTimeout(timeout);
  }
  setDefaultTimeout(timeout) {
    __classPrivateFieldGet11(this, _Page_timeoutSettings, "f").setDefaultTimeout(timeout);
  }
  getDefaultTimeout() {
    return __classPrivateFieldGet11(this, _Page_timeoutSettings, "f").timeout();
  }
  async setContent(html, options = {}) {
    await this.mainFrame().setContent(html, options);
  }
  async content() {
    return this.mainFrame().content();
  }
  isJavaScriptEnabled() {
    return __classPrivateFieldGet11(this, _Page_emulationManager, "f").javascriptEnabled;
  }
  async setGeolocation(options) {
    return await __classPrivateFieldGet11(this, _Page_emulationManager, "f").setGeolocation(options);
  }
  async setJavaScriptEnabled(enabled) {
    return await __classPrivateFieldGet11(this, _Page_emulationManager, "f").setJavaScriptEnabled(enabled);
  }
  async emulateMediaType(type) {
    return await __classPrivateFieldGet11(this, _Page_emulationManager, "f").emulateMediaType(type);
  }
  async emulateCPUThrottling(factor) {
    return await __classPrivateFieldGet11(this, _Page_emulationManager, "f").emulateCPUThrottling(factor);
  }
  async emulateMediaFeatures(features) {
    return await __classPrivateFieldGet11(this, _Page_emulationManager, "f").emulateMediaFeatures(features);
  }
  async emulateTimezone(timezoneId) {
    return await __classPrivateFieldGet11(this, _Page_emulationManager, "f").emulateTimezone(timezoneId);
  }
  async emulateIdleState(overrides) {
    return await __classPrivateFieldGet11(this, _Page_emulationManager, "f").emulateIdleState(overrides);
  }
  async emulateVisionDeficiency(type) {
    return await __classPrivateFieldGet11(this, _Page_emulationManager, "f").emulateVisionDeficiency(type);
  }
  async setViewport(viewport) {
    const needsReload = await __classPrivateFieldGet11(this, _Page_emulationManager, "f").emulateViewport(viewport);
    __classPrivateFieldSet11(this, _Page_viewport, viewport, "f");
    if (needsReload) {
    }
  }
  viewport() {
    return __classPrivateFieldGet11(this, _Page_viewport, "f");
  }
  async pdf(options = {}) {
    const { path = void 0 } = options;
    const { printBackground: background, margin, landscape, width, height, pageRanges, scale, preferCSSPageSize, timeout } = this._getPDFOptions(options, "cm");
    const { result } = await waitWithTimeout(__classPrivateFieldGet11(this, _Page_connection, "f").send("browsingContext.print", {
      context: this.mainFrame()._id,
      background,
      margin,
      orientation: landscape ? "landscape" : "portrait",
      page: {
        width,
        height
      },
      pageRanges: pageRanges.split(", "),
      scale,
      shrinkToFit: !preferCSSPageSize
    }), "browsingContext.print", timeout);
    const buffer = Buffer.from(result.data, "base64");
    await this._maybeWriteBufferToFile(path, buffer);
    return buffer;
  }
  async createPDFStream(options) {
    const buffer = await this.pdf(options);
    try {
      const { Readable } = await import("./stream-WNBH26D6.js");
      return Readable.from(buffer);
    } catch (error) {
      if (error instanceof TypeError) {
        throw new Error("Can only pass a file path in a Node-like environment.");
      }
      throw error;
    }
  }
  async screenshot(options = {}) {
    const { path = void 0, encoding, ...args } = options;
    if (Object.keys(args).length >= 1) {
      throw new Error('BiDi only supports "encoding" and "path" options');
    }
    const { result } = await __classPrivateFieldGet11(this, _Page_connection, "f").send("browsingContext.captureScreenshot", {
      context: this.mainFrame()._id
    });
    if (encoding === "base64") {
      return result.data;
    }
    const buffer = Buffer.from(result.data, "base64");
    await this._maybeWriteBufferToFile(path, buffer);
    return buffer;
  }
  waitForRequest(urlOrPredicate, options = {}) {
    const { timeout = __classPrivateFieldGet11(this, _Page_timeoutSettings, "f").timeout() } = options;
    return waitForEvent(__classPrivateFieldGet11(this, _Page_networkManager, "f"), NetworkManagerEmittedEvents.Request, async (request) => {
      if (isString(urlOrPredicate)) {
        return urlOrPredicate === request.url();
      }
      if (typeof urlOrPredicate === "function") {
        return !!await urlOrPredicate(request);
      }
      return false;
    }, timeout, __classPrivateFieldGet11(this, _Page_closedDeferred, "f").valueOrThrow());
  }
  waitForResponse(urlOrPredicate, options = {}) {
    const { timeout = __classPrivateFieldGet11(this, _Page_timeoutSettings, "f").timeout() } = options;
    return waitForEvent(__classPrivateFieldGet11(this, _Page_networkManager, "f"), NetworkManagerEmittedEvents.Response, async (response) => {
      if (isString(urlOrPredicate)) {
        return urlOrPredicate === response.url();
      }
      if (typeof urlOrPredicate === "function") {
        return !!await urlOrPredicate(response);
      }
      return false;
    }, timeout, __classPrivateFieldGet11(this, _Page_closedDeferred, "f").valueOrThrow());
  }
  async waitForNetworkIdle(options = {}) {
    const { idleTime = 500, timeout = __classPrivateFieldGet11(this, _Page_timeoutSettings, "f").timeout() } = options;
    await this._waitForNetworkIdle(__classPrivateFieldGet11(this, _Page_networkManager, "f"), idleTime, timeout, __classPrivateFieldGet11(this, _Page_closedDeferred, "f"));
  }
  title() {
    return this.mainFrame().title();
  }
};
_Page_accessibility = /* @__PURE__ */ new WeakMap(), _Page_timeoutSettings = /* @__PURE__ */ new WeakMap(), _Page_browserContext = /* @__PURE__ */ new WeakMap(), _Page_connection = /* @__PURE__ */ new WeakMap(), _Page_frameTree = /* @__PURE__ */ new WeakMap(), _Page_networkManager = /* @__PURE__ */ new WeakMap(), _Page_viewport = /* @__PURE__ */ new WeakMap(), _Page_closedDeferred = /* @__PURE__ */ new WeakMap(), _Page_subscribedEvents = /* @__PURE__ */ new WeakMap(), _Page_networkManagerEvents = /* @__PURE__ */ new WeakMap(), _Page_tracing = /* @__PURE__ */ new WeakMap(), _Page_coverage = /* @__PURE__ */ new WeakMap(), _Page_emulationManager = /* @__PURE__ */ new WeakMap(), _Page_mouse = /* @__PURE__ */ new WeakMap(), _Page_touchscreen = /* @__PURE__ */ new WeakMap(), _Page_keyboard = /* @__PURE__ */ new WeakMap(), _Page_instances = /* @__PURE__ */ new WeakSet(), _Page_onFrameAttached = function _Page_onFrameAttached2(info) {
  var _a;
  if (!this.frame(info.context) && (this.frame((_a = info.parent) != null ? _a : "") || !__classPrivateFieldGet11(this, _Page_frameTree, "f").getMainFrame())) {
    const context = new BrowsingContext(__classPrivateFieldGet11(this, _Page_connection, "f"), __classPrivateFieldGet11(this, _Page_timeoutSettings, "f"), info);
    __classPrivateFieldGet11(this, _Page_connection, "f").registerBrowsingContexts(context);
    const frame = new Frame2(this, context, __classPrivateFieldGet11(this, _Page_timeoutSettings, "f"), info.parent);
    __classPrivateFieldGet11(this, _Page_frameTree, "f").addFrame(frame);
    this.emit(FrameManagerEmittedEvents.FrameAttached, frame);
  }
}, _Page_onFrameNavigated = async function _Page_onFrameNavigated2(info) {
  const frameId = info.context;
  let frame = this.frame(frameId);
  if (frame) {
    for (const child of frame.childFrames()) {
      __classPrivateFieldGet11(this, _Page_instances, "m", _Page_removeFramesRecursively).call(this, child);
    }
    frame = await __classPrivateFieldGet11(this, _Page_frameTree, "f").waitForFrame(frameId);
    this.emit(FrameManagerEmittedEvents.FrameNavigated, frame);
  }
}, _Page_onFrameDetached = function _Page_onFrameDetached2(info) {
  const frame = this.frame(info.context);
  if (frame) {
    __classPrivateFieldGet11(this, _Page_instances, "m", _Page_removeFramesRecursively).call(this, frame);
  }
}, _Page_removeFramesRecursively = function _Page_removeFramesRecursively2(frame) {
  for (const child of frame.childFrames()) {
    __classPrivateFieldGet11(this, _Page_instances, "m", _Page_removeFramesRecursively2).call(this, child);
  }
  frame.dispose();
  __classPrivateFieldGet11(this, _Page_frameTree, "f").removeFrame(frame);
  this.emit(FrameManagerEmittedEvents.FrameDetached, frame);
}, _Page_onLogEntryAdded = function _Page_onLogEntryAdded2(event) {
  var _a;
  const frame = this.frame(event.source.context);
  if (!frame) {
    return;
  }
  if (isConsoleLogEntry(event)) {
    const args = event.args.map((arg) => {
      return getBidiHandle(frame.context(), arg, frame);
    });
    const text = args.reduce((value, arg) => {
      const parsedValue = arg.isPrimitiveValue ? BidiSerializer.deserialize(arg.remoteValue()) : arg.toString();
      return `${value} ${parsedValue}`;
    }, "").slice(1);
    this.emit("console", new ConsoleMessage(event.method, text, args, getStackTraceLocations(event.stackTrace)));
  } else if (isJavaScriptLogEntry(event)) {
    let message = (_a = event.text) != null ? _a : "";
    if (event.stackTrace) {
      for (const callFrame of event.stackTrace.callFrames) {
        const location = callFrame.url + ":" + callFrame.lineNumber + ":" + callFrame.columnNumber;
        const functionName = callFrame.functionName || "<anonymous>";
        message += `
    at ${functionName} (${location})`;
      }
    }
    const error = new Error(message);
    error.stack = "";
    this.emit("pageerror", error);
  } else {
    debugError(`Unhandled LogEntry with type "${event.type}", text "${event.text}" and level "${event.level}"`);
  }
};
function isConsoleLogEntry(event) {
  return event.type === "console";
}
function isJavaScriptLogEntry(event) {
  return event.type === "javascript";
}
function getStackTraceLocations(stackTrace) {
  const stackTraceLocations = [];
  if (stackTrace) {
    for (const callFrame of stackTrace.callFrames) {
      stackTraceLocations.push({
        url: callFrame.url,
        lineNumber: callFrame.lineNumber,
        columnNumber: callFrame.columnNumber
      });
    }
  }
  return stackTraceLocations;
}

// node_modules/puppeteer-core/lib/esm/puppeteer/common/bidi/BrowserContext.js
var __classPrivateFieldSet12 = function(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet12 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _BrowserContext_instances;
var _BrowserContext_browser;
var _BrowserContext_connection;
var _BrowserContext_defaultViewport;
var _BrowserContext_pages;
var _BrowserContext_onContextDestroyedBind;
var _BrowserContext_init;
var _BrowserContext_isDefault;
var _BrowserContext_getTree;
var _BrowserContext_onContextDestroyed;
var BrowserContext2 = class extends BrowserContext {
  constructor(browser, options) {
    super();
    _BrowserContext_instances.add(this);
    _BrowserContext_browser.set(this, void 0);
    _BrowserContext_connection.set(this, void 0);
    _BrowserContext_defaultViewport.set(this, void 0);
    _BrowserContext_pages.set(this, /* @__PURE__ */ new Map());
    _BrowserContext_onContextDestroyedBind.set(this, __classPrivateFieldGet12(this, _BrowserContext_instances, "m", _BrowserContext_onContextDestroyed).bind(this));
    _BrowserContext_init.set(this, Deferred.create());
    _BrowserContext_isDefault.set(this, false);
    __classPrivateFieldSet12(this, _BrowserContext_browser, browser, "f");
    __classPrivateFieldSet12(this, _BrowserContext_connection, __classPrivateFieldGet12(this, _BrowserContext_browser, "f").connection, "f");
    __classPrivateFieldSet12(this, _BrowserContext_defaultViewport, options.defaultViewport, "f");
    __classPrivateFieldGet12(this, _BrowserContext_connection, "f").on("browsingContext.contextDestroyed", __classPrivateFieldGet12(this, _BrowserContext_onContextDestroyedBind, "f"));
    __classPrivateFieldSet12(this, _BrowserContext_isDefault, options.isDefault, "f");
    __classPrivateFieldGet12(this, _BrowserContext_instances, "m", _BrowserContext_getTree).call(this).catch(debugError2);
  }
  get connection() {
    return __classPrivateFieldGet12(this, _BrowserContext_connection, "f");
  }
  async newPage() {
    await __classPrivateFieldGet12(this, _BrowserContext_init, "f").valueOrThrow();
    const { result } = await __classPrivateFieldGet12(this, _BrowserContext_connection, "f").send("browsingContext.create", {
      type: "tab"
    });
    const page = new Page2(this, result);
    if (__classPrivateFieldGet12(this, _BrowserContext_defaultViewport, "f")) {
      try {
        await page.setViewport(__classPrivateFieldGet12(this, _BrowserContext_defaultViewport, "f"));
      } catch {
      }
    }
    __classPrivateFieldGet12(this, _BrowserContext_pages, "f").set(result.context, page);
    return page;
  }
  async close() {
    await __classPrivateFieldGet12(this, _BrowserContext_init, "f").valueOrThrow();
    for (const page of __classPrivateFieldGet12(this, _BrowserContext_pages, "f").values()) {
      await (page == null ? void 0 : page.close().catch((error) => {
        debugError2(error);
      }));
    }
    __classPrivateFieldGet12(this, _BrowserContext_pages, "f").clear();
  }
  browser() {
    return __classPrivateFieldGet12(this, _BrowserContext_browser, "f");
  }
  async pages() {
    await __classPrivateFieldGet12(this, _BrowserContext_init, "f").valueOrThrow();
    return [...__classPrivateFieldGet12(this, _BrowserContext_pages, "f").values()];
  }
};
_BrowserContext_browser = /* @__PURE__ */ new WeakMap(), _BrowserContext_connection = /* @__PURE__ */ new WeakMap(), _BrowserContext_defaultViewport = /* @__PURE__ */ new WeakMap(), _BrowserContext_pages = /* @__PURE__ */ new WeakMap(), _BrowserContext_onContextDestroyedBind = /* @__PURE__ */ new WeakMap(), _BrowserContext_init = /* @__PURE__ */ new WeakMap(), _BrowserContext_isDefault = /* @__PURE__ */ new WeakMap(), _BrowserContext_instances = /* @__PURE__ */ new WeakSet(), _BrowserContext_getTree = async function _BrowserContext_getTree2() {
  if (!__classPrivateFieldGet12(this, _BrowserContext_isDefault, "f")) {
    __classPrivateFieldGet12(this, _BrowserContext_init, "f").resolve();
    return;
  }
  try {
    const { result } = await __classPrivateFieldGet12(this, _BrowserContext_connection, "f").send("browsingContext.getTree", {});
    for (const context of result.contexts) {
      const page = new Page2(this, context);
      __classPrivateFieldGet12(this, _BrowserContext_pages, "f").set(context.context, page);
    }
    __classPrivateFieldGet12(this, _BrowserContext_init, "f").resolve();
  } catch (err) {
    __classPrivateFieldGet12(this, _BrowserContext_init, "f").reject(err);
  }
}, _BrowserContext_onContextDestroyed = async function _BrowserContext_onContextDestroyed2(event) {
  const page = __classPrivateFieldGet12(this, _BrowserContext_pages, "f").get(event.context);
  await (page == null ? void 0 : page.close().catch((error) => {
    debugError2(error);
  }));
  __classPrivateFieldGet12(this, _BrowserContext_pages, "f").delete(event.context);
};

// node_modules/puppeteer-core/lib/esm/puppeteer/common/bidi/Browser.js
var __classPrivateFieldSet13 = function(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet13 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Browser_browserName;
var _Browser_browserVersion;
var _Browser_process;
var _Browser_closeCallback;
var _Browser_connection;
var _Browser_defaultViewport;
var _Browser_defaultContext;
var Browser2 = class extends Browser {
  static async create(opts) {
    var _a, _b;
    let browserName = "";
    let browserVersion = "";
    try {
      const { result } = await opts.connection.send("session.new", {
        capabilities: {
          alwaysMatch: {
            acceptInsecureCerts: opts.ignoreHTTPSErrors
          }
        }
      });
      browserName = (_a = result.capabilities.browserName) != null ? _a : "";
      browserVersion = (_b = result.capabilities.browserVersion) != null ? _b : "";
    } catch (err) {
      debugError2(err);
    }
    await opts.connection.send("session.subscribe", {
      events: browserName.toLocaleLowerCase().includes("firefox") ? Browser2.subscribeModules.filter((module) => {
        return !["cdp"].includes(module);
      }) : Browser2.subscribeModules
    });
    return new Browser2({
      ...opts,
      browserName,
      browserVersion
    });
  }
  constructor(opts) {
    var _a;
    super();
    _Browser_browserName.set(this, "");
    _Browser_browserVersion.set(this, "");
    _Browser_process.set(this, void 0);
    _Browser_closeCallback.set(this, void 0);
    _Browser_connection.set(this, void 0);
    _Browser_defaultViewport.set(this, void 0);
    _Browser_defaultContext.set(this, void 0);
    __classPrivateFieldSet13(this, _Browser_process, opts.process, "f");
    __classPrivateFieldSet13(this, _Browser_closeCallback, opts.closeCallback, "f");
    __classPrivateFieldSet13(this, _Browser_connection, opts.connection, "f");
    __classPrivateFieldSet13(this, _Browser_defaultViewport, opts.defaultViewport, "f");
    __classPrivateFieldSet13(this, _Browser_browserName, opts.browserName, "f");
    __classPrivateFieldSet13(this, _Browser_browserVersion, opts.browserVersion, "f");
    (_a = __classPrivateFieldGet13(this, _Browser_process, "f")) == null ? void 0 : _a.once("close", () => {
      __classPrivateFieldGet13(this, _Browser_connection, "f").dispose();
      this.emit("disconnected");
    });
    __classPrivateFieldSet13(this, _Browser_defaultContext, new BrowserContext2(this, {
      defaultViewport: __classPrivateFieldGet13(this, _Browser_defaultViewport, "f"),
      isDefault: true
    }), "f");
  }
  get connection() {
    return __classPrivateFieldGet13(this, _Browser_connection, "f");
  }
  wsEndpoint() {
    return __classPrivateFieldGet13(this, _Browser_connection, "f").url;
  }
  async close() {
    var _a;
    if (__classPrivateFieldGet13(this, _Browser_connection, "f").closed) {
      return;
    }
    __classPrivateFieldGet13(this, _Browser_connection, "f").dispose();
    await ((_a = __classPrivateFieldGet13(this, _Browser_closeCallback, "f")) == null ? void 0 : _a.call(null));
  }
  isConnected() {
    return !__classPrivateFieldGet13(this, _Browser_connection, "f").closed;
  }
  process() {
    var _a;
    return (_a = __classPrivateFieldGet13(this, _Browser_process, "f")) != null ? _a : null;
  }
  async createIncognitoBrowserContext(_options) {
    return new BrowserContext2(this, {
      defaultViewport: __classPrivateFieldGet13(this, _Browser_defaultViewport, "f"),
      isDefault: false
    });
  }
  async version() {
    return `${__classPrivateFieldGet13(this, _Browser_browserName, "f")}/${__classPrivateFieldGet13(this, _Browser_browserVersion, "f")}`;
  }
  browserContexts() {
    return [__classPrivateFieldGet13(this, _Browser_defaultContext, "f")];
  }
  defaultBrowserContext() {
    return __classPrivateFieldGet13(this, _Browser_defaultContext, "f");
  }
  newPage() {
    return __classPrivateFieldGet13(this, _Browser_defaultContext, "f").newPage();
  }
};
_Browser_browserName = /* @__PURE__ */ new WeakMap(), _Browser_browserVersion = /* @__PURE__ */ new WeakMap(), _Browser_process = /* @__PURE__ */ new WeakMap(), _Browser_closeCallback = /* @__PURE__ */ new WeakMap(), _Browser_connection = /* @__PURE__ */ new WeakMap(), _Browser_defaultViewport = /* @__PURE__ */ new WeakMap(), _Browser_defaultContext = /* @__PURE__ */ new WeakMap();
Browser2.subscribeModules = [
  "browsingContext",
  "network",
  "log",
  "cdp"
];

// node_modules/puppeteer-core/lib/esm/puppeteer/common/bidi/Connection.js
var __classPrivateFieldSet14 = function(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet14 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Connection_instances;
var _Connection_url;
var _Connection_transport;
var _Connection_delay;
var _Connection_timeout;
var _Connection_closed;
var _Connection_callbacks;
var _Connection_browsingContexts;
var _Connection_maybeEmitOnContext;
var _Connection_onClose;
var debugProtocolSend = debug("puppeteer:webDriverBiDi:SEND \u25BA");
var debugProtocolReceive = debug("puppeteer:webDriverBiDi:RECV \u25C0");
var Connection = class extends EventEmitter {
  constructor(url, transport, delay = 0, timeout) {
    super();
    _Connection_instances.add(this);
    _Connection_url.set(this, void 0);
    _Connection_transport.set(this, void 0);
    _Connection_delay.set(this, void 0);
    _Connection_timeout.set(this, 0);
    _Connection_closed.set(this, false);
    _Connection_callbacks.set(this, new CallbackRegistry());
    _Connection_browsingContexts.set(this, /* @__PURE__ */ new Map());
    __classPrivateFieldSet14(this, _Connection_url, url, "f");
    __classPrivateFieldSet14(this, _Connection_delay, delay, "f");
    __classPrivateFieldSet14(this, _Connection_timeout, timeout != null ? timeout : 18e4, "f");
    __classPrivateFieldSet14(this, _Connection_transport, transport, "f");
    __classPrivateFieldGet14(this, _Connection_transport, "f").onmessage = this.onMessage.bind(this);
    __classPrivateFieldGet14(this, _Connection_transport, "f").onclose = __classPrivateFieldGet14(this, _Connection_instances, "m", _Connection_onClose).bind(this);
  }
  get closed() {
    return __classPrivateFieldGet14(this, _Connection_closed, "f");
  }
  get url() {
    return __classPrivateFieldGet14(this, _Connection_url, "f");
  }
  send(method, params) {
    return __classPrivateFieldGet14(this, _Connection_callbacks, "f").create(method, __classPrivateFieldGet14(this, _Connection_timeout, "f"), (id) => {
      const stringifiedMessage = JSON.stringify({
        id,
        method,
        params
      });
      debugProtocolSend(stringifiedMessage);
      __classPrivateFieldGet14(this, _Connection_transport, "f").send(stringifiedMessage);
    });
  }
  async onMessage(message) {
    if (__classPrivateFieldGet14(this, _Connection_delay, "f")) {
      await new Promise((f) => {
        return setTimeout(f, __classPrivateFieldGet14(this, _Connection_delay, "f"));
      });
    }
    debugProtocolReceive(message);
    const object = JSON.parse(message);
    if ("id" in object) {
      if ("error" in object) {
        __classPrivateFieldGet14(this, _Connection_callbacks, "f").reject(object.id, createProtocolError(object), object.message);
      } else {
        __classPrivateFieldGet14(this, _Connection_callbacks, "f").resolve(object.id, object);
      }
    } else {
      __classPrivateFieldGet14(this, _Connection_instances, "m", _Connection_maybeEmitOnContext).call(this, object);
      this.emit(object.method, object.params);
    }
  }
  registerBrowsingContexts(context) {
    __classPrivateFieldGet14(this, _Connection_browsingContexts, "f").set(context.id, context);
  }
  unregisterBrowsingContexts(id) {
    __classPrivateFieldGet14(this, _Connection_browsingContexts, "f").delete(id);
  }
  dispose() {
    __classPrivateFieldGet14(this, _Connection_instances, "m", _Connection_onClose).call(this);
    __classPrivateFieldGet14(this, _Connection_transport, "f").close();
  }
};
_Connection_url = /* @__PURE__ */ new WeakMap(), _Connection_transport = /* @__PURE__ */ new WeakMap(), _Connection_delay = /* @__PURE__ */ new WeakMap(), _Connection_timeout = /* @__PURE__ */ new WeakMap(), _Connection_closed = /* @__PURE__ */ new WeakMap(), _Connection_callbacks = /* @__PURE__ */ new WeakMap(), _Connection_browsingContexts = /* @__PURE__ */ new WeakMap(), _Connection_instances = /* @__PURE__ */ new WeakSet(), _Connection_maybeEmitOnContext = function _Connection_maybeEmitOnContext2(event) {
  var _a;
  let context;
  if ("context" in event.params && event.params.context) {
    context = __classPrivateFieldGet14(this, _Connection_browsingContexts, "f").get(event.params.context);
  } else if ("source" in event.params && event.params.source.context) {
    context = __classPrivateFieldGet14(this, _Connection_browsingContexts, "f").get(event.params.source.context);
  } else if (event.method === "cdp.eventReceived") {
    const cdpSessionId = event.params.cdpSession;
    for (const context2 of __classPrivateFieldGet14(this, _Connection_browsingContexts, "f").values()) {
      if (((_a = context2.cdpSession) == null ? void 0 : _a.id()) === cdpSessionId) {
        context2.cdpSession.emit(event.params.cdpMethod, event.params.cdpParams);
      }
    }
  }
  context == null ? void 0 : context.emit(event.method, event.params);
}, _Connection_onClose = function _Connection_onClose2() {
  if (__classPrivateFieldGet14(this, _Connection_closed, "f")) {
    return;
  }
  __classPrivateFieldSet14(this, _Connection_closed, true, "f");
  __classPrivateFieldGet14(this, _Connection_transport, "f").onmessage = void 0;
  __classPrivateFieldGet14(this, _Connection_transport, "f").onclose = void 0;
  __classPrivateFieldGet14(this, _Connection_callbacks, "f").clear();
};
function createProtocolError(object) {
  let message = `${object.error} ${object.message}`;
  if (object.stacktrace) {
    message += ` ${object.stacktrace}`;
  }
  return message;
}

// node_modules/puppeteer-core/lib/esm/puppeteer/common/bidi/BidiOverCDP.js
var BidiMapper = __toESM(require_bidiMapper(), 1);
var __classPrivateFieldSet15 = function(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet15 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _CDPConnectionAdapter_cdp;
var _CDPConnectionAdapter_adapters;
var _CDPConnectionAdapter_browser;
var _CDPClientAdapter_closed;
var _CDPClientAdapter_client;
var _CDPClientAdapter_forwardMessage;
var _NoOpTransport_onMessage;
async function connectBidiOverCDP(cdp) {
  const transportBiDi = new NoOpTransport();
  const cdpConnectionAdapter = new CDPConnectionAdapter(cdp);
  const pptrTransport = {
    send(message) {
      transportBiDi.emitMessage(JSON.parse(message));
    },
    close() {
      bidiServer.close();
      cdpConnectionAdapter.close();
    },
    onmessage(_message) {
    }
  };
  transportBiDi.on("bidiResponse", (message) => {
    pptrTransport.onmessage(JSON.stringify(message));
  });
  const pptrBiDiConnection = new Connection(cdp.url(), pptrTransport);
  const bidiServer = await BidiMapper.BidiServer.createAndStart(transportBiDi, cdpConnectionAdapter, "");
  return pptrBiDiConnection;
}
var CDPConnectionAdapter = class {
  constructor(cdp) {
    _CDPConnectionAdapter_cdp.set(this, void 0);
    _CDPConnectionAdapter_adapters.set(this, /* @__PURE__ */ new Map());
    _CDPConnectionAdapter_browser.set(this, void 0);
    __classPrivateFieldSet15(this, _CDPConnectionAdapter_cdp, cdp, "f");
    __classPrivateFieldSet15(this, _CDPConnectionAdapter_browser, new CDPClientAdapter(cdp), "f");
  }
  browserClient() {
    return __classPrivateFieldGet15(this, _CDPConnectionAdapter_browser, "f");
  }
  getCdpClient(id) {
    const session = __classPrivateFieldGet15(this, _CDPConnectionAdapter_cdp, "f").session(id);
    if (!session) {
      throw new Error("Unknown CDP session with id" + id);
    }
    if (!__classPrivateFieldGet15(this, _CDPConnectionAdapter_adapters, "f").has(session)) {
      const adapter = new CDPClientAdapter(session);
      __classPrivateFieldGet15(this, _CDPConnectionAdapter_adapters, "f").set(session, adapter);
      return adapter;
    }
    return __classPrivateFieldGet15(this, _CDPConnectionAdapter_adapters, "f").get(session);
  }
  close() {
    __classPrivateFieldGet15(this, _CDPConnectionAdapter_browser, "f").close();
    for (const adapter of __classPrivateFieldGet15(this, _CDPConnectionAdapter_adapters, "f").values()) {
      adapter.close();
    }
  }
};
_CDPConnectionAdapter_cdp = /* @__PURE__ */ new WeakMap(), _CDPConnectionAdapter_adapters = /* @__PURE__ */ new WeakMap(), _CDPConnectionAdapter_browser = /* @__PURE__ */ new WeakMap();
var CDPClientAdapter = class extends BidiMapper.EventEmitter {
  constructor(client) {
    super();
    _CDPClientAdapter_closed.set(this, false);
    _CDPClientAdapter_client.set(this, void 0);
    _CDPClientAdapter_forwardMessage.set(this, (method, event) => {
      this.emit(method, event);
    });
    __classPrivateFieldSet15(this, _CDPClientAdapter_client, client, "f");
    __classPrivateFieldGet15(this, _CDPClientAdapter_client, "f").on("*", __classPrivateFieldGet15(this, _CDPClientAdapter_forwardMessage, "f"));
  }
  async sendCommand(method, ...params) {
    if (__classPrivateFieldGet15(this, _CDPClientAdapter_closed, "f")) {
      return;
    }
    try {
      return await __classPrivateFieldGet15(this, _CDPClientAdapter_client, "f").send(method, ...params);
    } catch (err) {
      if (__classPrivateFieldGet15(this, _CDPClientAdapter_closed, "f")) {
        return;
      }
      throw err;
    }
  }
  close() {
    __classPrivateFieldGet15(this, _CDPClientAdapter_client, "f").off("*", __classPrivateFieldGet15(this, _CDPClientAdapter_forwardMessage, "f"));
    __classPrivateFieldSet15(this, _CDPClientAdapter_closed, true, "f");
  }
  isCloseError(error) {
    return error instanceof TargetCloseError;
  }
};
_CDPClientAdapter_closed = /* @__PURE__ */ new WeakMap(), _CDPClientAdapter_client = /* @__PURE__ */ new WeakMap(), _CDPClientAdapter_forwardMessage = /* @__PURE__ */ new WeakMap();
var NoOpTransport = class extends BidiMapper.EventEmitter {
  constructor() {
    super(...arguments);
    _NoOpTransport_onMessage.set(this, async (_m) => {
      return;
    });
  }
  emitMessage(message) {
    void __classPrivateFieldGet15(this, _NoOpTransport_onMessage, "f").call(this, message);
  }
  setOnMessage(onMessage) {
    __classPrivateFieldSet15(this, _NoOpTransport_onMessage, onMessage, "f");
  }
  async sendMessage(message) {
    this.emit("bidiResponse", message);
  }
  close() {
    __classPrivateFieldSet15(this, _NoOpTransport_onMessage, async (_m) => {
      return;
    }, "f");
  }
};
_NoOpTransport_onMessage = /* @__PURE__ */ new WeakMap();
export {
  Browser2 as Browser,
  BrowserContext2 as BrowserContext,
  Connection,
  Page2 as Page,
  connectBidiOverCDP
};
//# sourceMappingURL=bidi-GXH7AYNA.js.map
